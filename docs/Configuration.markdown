# Configuration files

NOTE: Parts of the description haven't yet been implemented for version 0.16.

All (or almost all) PATKIT configuration should be stored with the data. This
is a philosophical choice that stems from the fact that even GUI settings (such
as which frequencies are shown on a spectrogram and with which color map)
potentially affect analysis results. The idea is that standardising analysis
and annotation settings across a project or research group should be easy. If
you find that the current way PATKIT attempts to do this, does not work for you, please get in touch and we'll see how things can be improved.

There are some very simple ways of circumventing this system and PATKIT will
not try to prevent that. However, things might not work quite as intended if
the assumptions about where files are stored are broken. Please refer to [Data
Management](DataManagement.markdown) for how PATKIT assumes recorded/imported
data is separated from PATKIT/derived/saved data and configuration files.

There are examples of configuration files in the GitHub repository in the
`example_configs` folder. 

TODO: 1.0 Make full examples of data and configuration of various complexity.

## Default settings and user preferences

PATKIT does contain default parameter files and you can save your own preferred
settings which PATKIT will place in the `~/.patkit` (on Linux/macOS) or
`%userprofile%\.patkit` (on Windows) folder. However, when PATKIT uses given
settings with data, it will store those settings with the data. This means that
default settings and user preferences get copied to the data directories as
needed.

## Command history

By default, the command history of the interactive commandline is stored with
the global (user specific) configuration in the `.patkit` folder inside the
`history` file. It is plain text and of the same format as the `.python_history`
file. In fact, with a bit of tweaking a user could use `.python_history` instead
because the PATKIT interactive interpreter is actually just a Python interpreter
with PATKIT data preloaded. However, this is only recommended if you know what
you are doing.

## Configuration files

PATKIT has a number of configuration files. Briefly they are 

- `patkit_data.yaml` which defines how data should be processed, which metrics,
  statistics (in the PATKIT-specific sense of an aggregate statistic such as
  mean image of an ultrasound recording), and annotation should be generated.
- `patkit_gui.yaml` configures the PATKIT annotator GUI. It specifies what data
  is displayed and how. Essentially these are the settings that should be
  standardised for different annotators working on the same project or dataset.
- `patkit-publish.yaml` specifies graphs, exported data and other outputs
  that are intended for publication.  
- `patkit-simulation.yaml` specifies simulated data and analysis of that data.
- `patkit-manifest.yaml` is autogenerated by PATKIT. It is a list of Scenarios
  that refer to recorded data and stored with the recorded data. This file can
  be added to by humans if a Scenario gets copied from one computer or user to
  another. This will require some care but will save a lot of time if the
  PATKIT data in question requires a lot of computation to generate.
- `session-config.yaml` specifies the data sources in a session and the path
  structure, that is where to find files of different types. 
- `spline-config.yaml` tells PATKIT - under `import_config` - how to import a
  given set of splines and - under `data_config` how to trim the splines before analysis.

Below you can find what is intended to be a comprehensive list of 

### General parameters

These are set globally so that they may be omitted locally. They can be
overridden locally though and should be when, for example, different parts of
the data have been recorded in areas with different mains frequencies. 

```yaml
# What precision is treated as equal when comparing annotation boundaries.
epsilon: 0.00001

# Used in filtering sound signals before beep detection.
mains_frequency: 50
```

### GUI parameters

Most of these parameters deal with data display.

#### General parameters for axes in the main plot

Height ratio of data display area vs textgrid tier display area. This does not
control directly the height of individual data displays nor individual tier
displays, but instead controls the ratio between the sum of data displays vs sum
of tier displays.

```yaml
data_and_tier_height_ratios: 
  data: 2
  tier: 1
```

```yaml
# Which data axes to display. Currently used only to decide the number to
# create. Number of lines gives the number of axis, modalities on the same line
# will be drawn on the same axes.
general_axes_params:
  data_axes:
    sharex: True
  tier_axes:
    sharex: True
```

#### Axes definitions for the main plot

```yaml
data_axes:
  PD l1:
    modalities:
      - PD l1 on RawUltrasound
#    modality_names:
#      - l1
    sharex: True
    auto_ylim: True
  PD l2:
    modalities:
      - PD l2 on RawUltrasound
#    modality_names:
#      - l2
    sharex: True
    ylim:
      - 100
      - 2000
  PD normalised:
    modalities:
      - PD l1 on RawUltrasound
      - PD l2 on RawUltrasound
    modality_names:
      - l1
      - l2
    sharex: True
    normalisation: both # none, peak, bottom, both
  spectrogram2:
    sharex: True
  wav:
    sharex: True
  # density:
  #   sharex: False
```

#### TextGrid display parameters

```yaml
# Tiers drawn on the data axes. Ignored if not found.  
pervasive_tiers:
  - Segment
  - Segments
  - segment
  - segments
  - phoneme
```

#### X (time) axis parameters

```yaml
# Initial limits for x-axis
#xlim:
#  - -.25
#  - 1.5
auto_xlim: True
```

#### General display style parameters

```yaml
# Font parameters
default_font_size: 10
```

Dark vs light mode. Accepted values are `dark`, `follow_system`, and `light`.
```yaml
color_scheme: dark
```


## Local configuration

All of the global parameters can be set locally by using the same file names
within the data directories. In addition, [Data processing
parameters](#data-processing-parameters) are only set locally with the data.
They may -- however -- be overridden for parts of the data.

### GUI parameters

It is especially useful to override global GUI parameters at the data to
guarantee a given set of display settings is used for segmentation or other
analysis.

### Data processing parameters


### Simulation parameters

Simulations are run on mock up tongue splines/contours extracted manually from
Peter Ladefoged's Vowels and Consonants. A commented version of the
configuration walked through below can be found on PATKIT's GitHub repository in
the `example_configs` folder.

The first parameters define where to save the resulting plots, if existing files
should be overwritten, and what message prefix should be used in logging
messages. If the `overwrite_plots` parameter is omitted, overwriting will be
confirmed individually for each existing plot file.

```yaml
output_directory: "ultrafest2024/"
overwrite_plots: True
logging_notice_base: "Ultrafest 2024 simulation: "
```

Sound/contour selection is defined with IPA characters:

```yaml
sounds: 
  - 'æ'
  - 'i'
```

This parameter defines the used point-wise perturbations in millimeters.

```yaml 
perturbations: 
  - -2 
  - -1 
  - -.5 
  - .5 
  - 1 
  - 2
```

This parameter group defines the spline distance metric simulation.

```yaml
contour_distance:
  metric: "annd"
  timestep: 1
  sound_pair_params:
    sounds:
      - 'æ'
      - 'i'
    perturbed:
      - 'second'
      - 'first'
    combinations: full_cartesian # only_cross, only_self
```

This (rather simple) parameter group defines the spline shape metric simulation.

```yaml
spline_shape_params:
  metric: 'mci'
```

And finally the result figures are defined with the following parameter groups.
To omit a figure from the final plotting just comment out or delete the group
from the configuration file.

```yaml
# This produces a plot with change in the distance metric plotted
# as a ray on the perturbed point of the contour.
distance_metric_ray_plot:
  figure_size:
    - 10.1
    - 4.72
  scale: 200
  color_threshold:
    - .1
    - -.1

# Same as distance_metric_ray_plot but for shape metrics.
shape_metric_ray_plot:
  figure_size:
    - 7
    - 3.35
  scale: 20
  color_threshold:
    - 2
    - .5

# Two panel plot that demonstrates how the perturbations are applied.
# See the Ultrafest 2024 extended abstract for an example.
demonstration_contour_plot:
  filename: "demonstration_contour_plot.pdf"
  figure_size:
    - 6.4
    - 4.8
  sounds:
    - 'æ'
    - 'i'
```



