window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "patkit", "modulename": "patkit", "kind": "module", "doc": "<p>PATKIT -- The Phonetic Analysis ToolKIT</p>\n\n<p>This is the API reference for PATKIT, if you are looking for the general\ndocumentation, it can be found <a href=\"../index.md\">here</a>.</p>\n\n<p>PATKIT's data structures are built around two class hierarchies:\nThe Recording and the Modality. Similarly, the commandline interface -- and\nthe batch processing of data -- is handled by classes that extend CLI and \ngraphical annotation tools derive from Annotator.</p>\n\n<p>The following images are mainly used for debugging, and are too large to display\nhere, but in case somebody is interested:</p>\n\n<ul>\n<li><a href=\"packages_patkit.png\" title=\"PATKIT Module hierarchy\">PATKIT Module hierarchy</a></li>\n<li><a href=\"classes_patkit.png\" title=\"PATKIT Class hierarchies\">PATKIT Class hierarchies</a></li>\n</ul>\n"}, {"fullname": "patkit.LOG_CONFIG", "modulename": "patkit", "qualname": "LOG_CONFIG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;patkit_logging_configuration.json&#x27;"}, {"fullname": "patkit.annotations", "modulename": "patkit.annotations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.annotations.peaks", "modulename": "patkit.annotations.peaks", "kind": "module", "doc": "<p>Generating and operating on peak annotations. </p>\n\n<p>Currently, contains also some legacy code that is not in use, but may provide a\nuseful basis for writing future functionality.</p>\n"}, {"fullname": "patkit.annotations.peaks.add_peaks", "modulename": "patkit.annotations.peaks", "qualname": "add_peaks", "kind": "function", "doc": "<p>Add peak annotation to a modality.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nThe annotated Modality. Assumed to be a 1D timeseries.</li>\n<li><strong>peak_parameters</strong> (dict, optional):\n_description_, by default None</li>\n<li><strong>release_data_memory</strong> (bool, optional):\nShould the Modality's data memory be released after adding the\nannotations, by default False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: If IntervalBoundary is not either BEGIN or END</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">peak_parameters</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">PeakDetectionParams</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.find_gesture_peaks", "modulename": "patkit.annotations.peaks", "qualname": "find_gesture_peaks", "kind": "function", "doc": "<p>Find peaks in the data with <code>scipy_signal.find_peaks</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (np.ndarray):\nThe timeseries data. Should be a 1D array.</li>\n<li><strong>timevector</strong> (np.ndarray):\nTimevector corresponding to the data.</li>\n<li><strong>peak_params</strong> (PeakDetectionParams, optional):\nAn object containing normalisation and parameters to pass to\n<code>scipy_signal.find_peaks</code>, by default None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>PointAnnotations</strong>: The gesture peaks asa PointAnnotations object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">timevector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">peak_params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">PeakDetectionParams</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">PointAnnotations</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.annotations_to_dataframe", "modulename": "patkit.annotations.peaks", "qualname": "annotations_to_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">modality_name</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">downsampling_ratios</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">annotations</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.prominences_in_downsampling", "modulename": "patkit.annotations.peaks", "qualname": "prominences_in_downsampling", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">downsampling_ratios</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.nearest_neighbours_in_downsampling", "modulename": "patkit.annotations.peaks", "qualname": "nearest_neighbours_in_downsampling", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">downsampling_ratios</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.count_number_of_peaks", "modulename": "patkit.annotations.peaks", "qualname": "count_number_of_peaks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">downsampling_ratios</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.get_nearest_neighbours", "modulename": "patkit.annotations.peaks", "qualname": "get_nearest_neighbours", "kind": "function", "doc": "<p>Get an array of nearest neighbours of elements of array1 in array2.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>array1</strong> (np.ndarray):\nThe first 1D array.</li>\n<li><strong>array2</strong> (np.ndarray):\nThe second 1D array where we search for the nearest neighbours.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: An array containing each element of array1 paired with its nearest\nneighbour from array2.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">array2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.PeakData", "modulename": "patkit.annotations.peaks", "qualname": "PeakData", "kind": "class", "doc": "<p>Peaks, their times, and properties as returned by <code>scipy.find_peaks</code>.</p>\n"}, {"fullname": "patkit.annotations.peaks.PeakData.__init__", "modulename": "patkit.annotations.peaks", "qualname": "PeakData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">peaks</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">peak_times</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "patkit.annotations.peaks.PeakData.peaks", "modulename": "patkit.annotations.peaks", "qualname": "PeakData.peaks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.annotations.peaks.PeakData.peak_times", "modulename": "patkit.annotations.peaks", "qualname": "PeakData.peak_times", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.annotations.peaks.PeakData.properties", "modulename": "patkit.annotations.peaks", "qualname": "PeakData.properties", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "patkit.annotations.peaks.time_series_peaks", "modulename": "patkit.annotations.peaks", "qualname": "time_series_peaks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_lim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">normalise</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">TimeseriesNormalisation</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_ignored_frames</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">prominence</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.save_peaks", "modulename": "patkit.annotations.peaks", "qualname": "save_peaks", "kind": "function", "doc": "<p>Save peak data to .csv files.</p>\n\n<p>Save both numbers/recording for each recording and the peak times\nthemselves do this for unthresholded and thresholded peaks.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.plot_peak_ns", "modulename": "patkit.annotations.peaks", "qualname": "plot_peak_ns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unthresholded_peak_ns</span>, </span><span class=\"param\"><span class=\"n\">thresholded_peak_ns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.annotations.peaks.plot_peak_comparison", "modulename": "patkit.annotations.peaks", "qualname": "plot_peak_comparison", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">whole_to_bottom</span>,</span><span class=\"param\">\t<span class=\"n\">bottom_to_whole</span>,</span><span class=\"param\">\t<span class=\"n\">whole_to_bottom_thresholded</span>,</span><span class=\"param\">\t<span class=\"n\">bottom_to_whole_thresholded</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.audio_processing", "modulename": "patkit.audio_processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.audio_processing.audio_processing", "modulename": "patkit.audio_processing.audio_processing", "kind": "module", "doc": "<p>Audio processing module.</p>\n"}, {"fullname": "patkit.audio_processing.audio_processing.high_pass_50", "modulename": "patkit.audio_processing.audio_processing", "qualname": "high_pass_50", "kind": "function", "doc": "<p>Returns a high-pass filter with a 50Hz stop band. Used for\nfiltering the mains frequency away from recorded sound.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sampling_frequency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.audio_processing.audio_processing.high_pass", "modulename": "patkit.audio_processing.audio_processing", "qualname": "high_pass", "kind": "function", "doc": "<p>Returns a high-pass filter with a stop band of sb. Used for\nfiltering the mains frequency away from recorded sound.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sampling_frequency</span>, </span><span class=\"param\"><span class=\"n\">stop_band</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.audio_processing.audio_processing.band_pass", "modulename": "patkit.audio_processing.audio_processing", "qualname": "band_pass", "kind": "function", "doc": "<p>Generate a band pass filter for detecting a 1kHz signal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sampling_frequency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.audio_processing.audio_processing.MainsFilter", "modulename": "patkit.audio_processing.audio_processing", "qualname": "MainsFilter", "kind": "class", "doc": "<p>Class for containing a general mains filter.</p>\n\n<p>This exists so that the mains filter does not need to be regenerated every\ntime audio is read.</p>\n"}, {"fullname": "patkit.audio_processing.audio_processing.MainsFilter.mains_frequency", "modulename": "patkit.audio_processing.audio_processing", "qualname": "MainsFilter.mains_frequency", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "None"}, {"fullname": "patkit.audio_processing.audio_processing.MainsFilter.mains_filter", "modulename": "patkit.audio_processing.audio_processing", "qualname": "MainsFilter.mains_filter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "{&#x27;b&#x27;: None, &#x27;a&#x27;: None}"}, {"fullname": "patkit.audio_processing.audio_processing.MainsFilter.generate_mains_filter", "modulename": "patkit.audio_processing.audio_processing", "qualname": "MainsFilter.generate_mains_filter", "kind": "function", "doc": "<p>Generate a filter for removing the mains frequency from audio.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sampling_frequency</strong> (float):\nSampling frequency of the audio data.</li>\n<li><strong>mains_frequency</strong> (float):\nMains frequency of the recording location. In Europe usually 50Hz,\nin North America usually 60Hz.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sampling_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">mains_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.audio_processing.audio_processing.detect_beep_and_speech", "modulename": "patkit.audio_processing.audio_processing", "qualname": "detect_beep_and_speech", "kind": "function", "doc": "<p>Find a 1kHz 50ms beep at the beginning of a sound sample.</p>\n\n<pre><code>This function is for processing delayed naming data\nwhere the go-signal is a 1kHz 50ms beep. The algorithm assumes\nthat the signal is the first properly detectable sound in\nthe sample and also that it starts with a rising edge.\nThe detection is based on locating the first negative\nvalued half-wave (the second half-wave) and working backwards\nfrom that using zero crossings and wave duration to pinpoint\nthe onset.\n\nParameters:\nframes: the sound sample\nsampling_frequency: the sampling frequency of the sound sample\nb and a: high pass filter parameters to remove the electrical\n    mains' interference\nname: name identifying the sample. Usually the filename.\n</code></pre>\n\n<p>1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">frames</span>, </span><span class=\"param\"><span class=\"n\">sampling_frequency</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.cli", "modulename": "patkit.cli", "kind": "module", "doc": "<p>PATKIT Commandline main command.</p>\n"}, {"fullname": "patkit.cli.run_cli", "modulename": "patkit.cli", "qualname": "run_cli", "kind": "variable", "doc": "<p>patkit - Phonetic Analysis ToolKIT</p>\n\n<p>Patkit collects tools for phonetic analysis of speech data. It includes\ntools for analysing audio and articulatory data, a commandline interface, an\nannotator GUI, and a Python programming API. See documentation for more\ndetails.</p>\n\n<p>By default, patkit will open the given path in the annotator GUI.</p>\n", "default_value": "&lt;DefaultGroup run-cli&gt;"}, {"fullname": "patkit.cli_commands", "modulename": "patkit.cli_commands", "kind": "module", "doc": "<p>PATKIT command line commands.</p>\n"}, {"fullname": "patkit.cli_commands.open_in_annotator", "modulename": "patkit.cli_commands", "qualname": "open_in_annotator", "kind": "variable", "doc": "<p>Open the PATH in the annotator GUI.</p>\n\n<p>\b\nPATH to the data - maybe be a file or a directory.</p>\n", "default_value": "&lt;Command open&gt;"}, {"fullname": "patkit.cli_commands.interact", "modulename": "patkit.cli_commands", "qualname": "interact", "kind": "variable", "doc": "<p>Open the PATH in interactive commandline mode.</p>\n\n<p>\b\nPATH to the data - maybe be a file or a directory.</p>\n", "default_value": "&lt;Command interact&gt;"}, {"fullname": "patkit.cli_commands.publish", "modulename": "patkit.cli_commands", "qualname": "publish", "kind": "variable", "doc": "<p>Publish plots from the data in PATH.</p>\n\n<p>\b\nPATH to the data - maybe be a file or a directory.</p>\n\n<p>NOT IMPLEMENTED YET.</p>\n", "default_value": "&lt;Command publish&gt;"}, {"fullname": "patkit.cli_commands.simulate", "modulename": "patkit.cli_commands", "qualname": "simulate", "kind": "variable", "doc": "<p>Run a simulation experiment.</p>\n\n<p>\b\nPATH to a <code>.yaml</code> file which contains the parameters for running the\nsimulation.</p>\n", "default_value": "&lt;Command simulate&gt;"}, {"fullname": "patkit.computational", "modulename": "patkit.computational", "kind": "module", "doc": "<p>Computation helper functions.</p>\n"}, {"fullname": "patkit.computational.normalise_timeseries", "modulename": "patkit.computational", "qualname": "normalise_timeseries", "kind": "function", "doc": "<p>Apply the specified normalisation to the data and return it. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (np.ndarray):\nThe data to normalise. Currently assumed to be a 1D-array.</li>\n<li><strong>normalisation</strong> (Optional[TimeseriesNormalisation]):\nTimeseriesNormalisation object specifying the normalisation to apply.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Normalised data. Defaults to original data if no normalisation is\neither specified or the normalisation argument is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">normalisation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">TimeseriesNormalisation</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.computational.cartesian_to_polar", "modulename": "patkit.computational", "qualname": "cartesian_to_polar", "kind": "function", "doc": "<p>Transform an array of 2D Cartesian coordinates to polar coordinates.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>xy_array</strong> (np.ndarray):\naxes order is x-y, spline points</p>\n\n<p>This maybe passed in as 1D array which will then be reshaped into a 2*x\narray. This makes it possible to apply the transformation with\n<code>np.apply_along_axis</code>.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: axes order is r-phi, spline points</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xy_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.computational.polar_to_cartesian", "modulename": "patkit.computational", "qualname": "polar_to_cartesian", "kind": "function", "doc": "<p>Transform an array of 2D polar coordinates to Cartesian coordinates.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>r_phi_array</strong> (np.ndarray):\naxes order is r-phi, spline points </p>\n\n<p>This maybe passed in as 1D array which will then be reshaped into a 2*x\narray. This makes it possible to apply the transformation with </p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"n\">r_phi</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n    <span class=\"n\">r_phi</span> <span class=\"o\">=</span> <span class=\"n\">r_phi</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">apply_along_axis</span><span class=\"p\">(</span>\n        <span class=\"n\">polar_to_cartesian</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r_phi</span><span class=\"p\">)</span>\n</code></pre>\n</div></li>\n<li><p><strong>angle_offset</strong> (float):\nOffset for the angle in radians, by default 0.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: axes order is x-y, spline points</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r_phi_array</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">angle_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.computational.mean_squared_error", "modulename": "patkit.computational", "qualname": "mean_squared_error", "kind": "function", "doc": "<p>Compute the mean squared error of the two arrays.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>array_like_1</strong> (array_like):\nFirst array.</li>\n<li><strong>array_like_2</strong> (array_like):\nSecond array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The mean squared error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array_like_1</span>, </span><span class=\"param\"><span class=\"n\">array_like_2</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration", "modulename": "patkit.configuration", "kind": "module", "doc": "<p>This is the configuration interface for reading and saving configuration data.</p>\n\n<p>Direct use of config_dict, data_run_params, gui_params, and publish_params\n(from configuration_parsers) is deprecated since v0.8. Instead, use the\ninterface provided by Configuration.</p>\n"}, {"fullname": "patkit.configuration.PathValidator", "modulename": "patkit.configuration", "qualname": "PathValidator", "kind": "class", "doc": "<p>Validate yaml representing a Path.</p>\n\n<p>Please note that empty fields are interpreted as not available and\nrepresented by None. If you want to specify current working directory, use\n'.'</p>\n", "bases": "strictyaml.scalar.ScalarValidator"}, {"fullname": "patkit.configuration.PathValidator.validate_scalar", "modulename": "patkit.configuration", "qualname": "PathValidator.validate_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.ExclusionList", "modulename": "patkit.configuration", "qualname": "ExclusionList", "kind": "class", "doc": "<p>List of files, prompts, and parts of prompts to be excluded from analysis.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.ExclusionList.path", "modulename": "patkit.configuration", "qualname": "ExclusionList.path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path"}, {"fullname": "patkit.configuration.ExclusionList.files", "modulename": "patkit.configuration", "qualname": "ExclusionList.files", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "patkit.configuration.ExclusionList.prompts", "modulename": "patkit.configuration", "qualname": "ExclusionList.prompts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "patkit.configuration.ExclusionList.parts_of_prompts", "modulename": "patkit.configuration", "qualname": "ExclusionList.parts_of_prompts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "patkit.configuration.ExclusionList.model_config", "modulename": "patkit.configuration", "qualname": "ExclusionList.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.DataConfig", "modulename": "patkit.configuration", "qualname": "DataConfig", "kind": "class", "doc": "<p>A BaseModel which can be updated with new data.</p>\n\n<p>The update will trigger validation again.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.DataConfig.epsilon", "modulename": "patkit.configuration", "qualname": "DataConfig.epsilon", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.configuration.DataConfig.mains_frequency", "modulename": "patkit.configuration", "qualname": "DataConfig.mains_frequency", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.configuration.DataConfig.recorded_data_path", "modulename": "patkit.configuration", "qualname": "DataConfig.recorded_data_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path"}, {"fullname": "patkit.configuration.DataConfig.flags", "modulename": "patkit.configuration", "qualname": "DataConfig.flags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.DataFlags"}, {"fullname": "patkit.configuration.DataConfig.output_directory", "modulename": "patkit.configuration", "qualname": "DataConfig.output_directory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.DataConfig.aggregate_image_arguments", "modulename": "patkit.configuration", "qualname": "DataConfig.aggregate_image_arguments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.AggregateImageArguments | None"}, {"fullname": "patkit.configuration.DataConfig.pd_arguments", "modulename": "patkit.configuration", "qualname": "DataConfig.pd_arguments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.PdArguments | None"}, {"fullname": "patkit.configuration.DataConfig.spline_metric_arguments", "modulename": "patkit.configuration", "qualname": "DataConfig.spline_metric_arguments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SplineMetricArguments | None"}, {"fullname": "patkit.configuration.DataConfig.distance_matrix_arguments", "modulename": "patkit.configuration", "qualname": "DataConfig.distance_matrix_arguments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.DistanceMatrixArguments | None"}, {"fullname": "patkit.configuration.DataConfig.peaks", "modulename": "patkit.configuration", "qualname": "DataConfig.peaks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.PeakDetectionParams | None"}, {"fullname": "patkit.configuration.DataConfig.downsample", "modulename": "patkit.configuration", "qualname": "DataConfig.downsample", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.DownsampleParams | None"}, {"fullname": "patkit.configuration.DataConfig.cast", "modulename": "patkit.configuration", "qualname": "DataConfig.cast", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.CastParams | None"}, {"fullname": "patkit.configuration.DataConfig.model_config", "modulename": "patkit.configuration", "qualname": "DataConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.DownsampleParams", "modulename": "patkit.configuration", "qualname": "DownsampleParams", "kind": "class", "doc": "<p>Parameters for downsampling metrics.</p>\n\n<h6 id=\"members\">Members</h6>\n\n<p>modality_pattern : str\n    Simple search string to used to find the modalities.\ndownsampling_ratios : tuple[int]\n    Which downsampling ratios should be attempted. Depending on the next\n    parameter all might not actually be used.\nmatch_timestep : bool, optional\n    If the timestep of the Modality to be downsampled should match the\n    downsampling_ratio, by default True</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.DownsampleParams.modality_pattern", "modulename": "patkit.configuration", "qualname": "DownsampleParams.modality_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SearchPattern"}, {"fullname": "patkit.configuration.DownsampleParams.downsampling_ratios", "modulename": "patkit.configuration", "qualname": "DownsampleParams.downsampling_ratios", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int]"}, {"fullname": "patkit.configuration.DownsampleParams.match_timestep", "modulename": "patkit.configuration", "qualname": "DownsampleParams.match_timestep", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.configuration.DownsampleParams.model_config", "modulename": "patkit.configuration", "qualname": "DownsampleParams.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments", "kind": "class", "doc": "<p>A BaseModel which can be updated with new data.</p>\n\n<p>The update will trigger validation again.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.height", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.threshold", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.threshold", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.distance", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.distance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.prominence", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.prominence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.width", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.wlen", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.wlen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.rel_height", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.rel_height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.plateau_size", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.plateau_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.configuration.FindPeaksScipyArguments.model_config", "modulename": "patkit.configuration", "qualname": "FindPeaksScipyArguments.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.GuiConfig", "modulename": "patkit.configuration", "qualname": "GuiConfig", "kind": "class", "doc": "<p>A BaseModel which can be updated with new data.</p>\n\n<p>The update will trigger validation again.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.GuiConfig.data_and_tier_height_ratios", "modulename": "patkit.configuration", "qualname": "GuiConfig.data_and_tier_height_ratios", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.HeightRatios"}, {"fullname": "patkit.configuration.GuiConfig.general_axes_params", "modulename": "patkit.configuration", "qualname": "GuiConfig.general_axes_params", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.GeneralAxesParams"}, {"fullname": "patkit.configuration.GuiConfig.data_axes", "modulename": "patkit.configuration", "qualname": "GuiConfig.data_axes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, patkit.configuration.configuration_models.AxesDefinition]"}, {"fullname": "patkit.configuration.GuiConfig.pervasive_tiers", "modulename": "patkit.configuration", "qualname": "GuiConfig.pervasive_tiers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "patkit.configuration.GuiConfig.xlim", "modulename": "patkit.configuration", "qualname": "GuiConfig.xlim", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[patkit.configuration.configuration_models.FloatPair, str, NoneType]"}, {"fullname": "patkit.configuration.GuiConfig.auto_xlim", "modulename": "patkit.configuration", "qualname": "GuiConfig.auto_xlim", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool | None"}, {"fullname": "patkit.configuration.GuiConfig.default_font_size", "modulename": "patkit.configuration", "qualname": "GuiConfig.default_font_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.configuration.GuiConfig.color_scheme", "modulename": "patkit.configuration", "qualname": "GuiConfig.color_scheme", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.GuiColorScheme"}, {"fullname": "patkit.configuration.GuiConfig.plotted_modality_names", "modulename": "patkit.configuration", "qualname": "GuiConfig.plotted_modality_names", "kind": "function", "doc": "<p>Return a set of the plotted modalities' names.</p>\n\n<p>This is run across all of the data axes. If you want the names plotted\non a given axes, look them up from the <code>AxesDefinition</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>set[str]</strong>: Set of strings containing the plotted modalities' names.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.GuiConfig.number_of_data_axes", "modulename": "patkit.configuration", "qualname": "GuiConfig.number_of_data_axes", "kind": "variable", "doc": "<p>Number of data axes. </p>\n\n<p>DEPRECATED: This property will be removed as data axes list should not\ncontain any extra information like a <code>global</code> directive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The number of data axes.</li>\n</ul>\n", "annotation": ": int"}, {"fullname": "patkit.configuration.GuiConfig.model_config", "modulename": "patkit.configuration", "qualname": "GuiConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.PathStructure", "modulename": "patkit.configuration", "qualname": "PathStructure", "kind": "class", "doc": "<p>Path structure of a Session for reading and only reading.</p>\n\n<p>For saving and subsequent loading the structure should be saved in\nindividual DataObject's FileInformation fields.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.PathStructure.root", "modulename": "patkit.configuration", "qualname": "PathStructure.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path"}, {"fullname": "patkit.configuration.PathStructure.wav", "modulename": "patkit.configuration", "qualname": "PathStructure.wav", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.PathStructure.textgrid", "modulename": "patkit.configuration", "qualname": "PathStructure.textgrid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.PathStructure.ultrasound", "modulename": "patkit.configuration", "qualname": "PathStructure.ultrasound", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.PathStructure.spline_config", "modulename": "patkit.configuration", "qualname": "PathStructure.spline_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.PathStructure.model_config", "modulename": "patkit.configuration", "qualname": "PathStructure.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.PeakDetectionParams", "modulename": "patkit.configuration", "qualname": "PeakDetectionParams", "kind": "class", "doc": "<p>A BaseModel which can be updated with new data.</p>\n\n<p>The update will trigger validation again.</p>\n", "bases": "patkit.configuration.configuration_models.PointAnnotationParams"}, {"fullname": "patkit.configuration.PeakDetectionParams.modality_pattern", "modulename": "patkit.configuration", "qualname": "PeakDetectionParams.modality_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SearchPattern"}, {"fullname": "patkit.configuration.PeakDetectionParams.number_of_ignored_frames", "modulename": "patkit.configuration", "qualname": "PeakDetectionParams.number_of_ignored_frames", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.configuration.PeakDetectionParams.distance_in_seconds", "modulename": "patkit.configuration", "qualname": "PeakDetectionParams.distance_in_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float | None"}, {"fullname": "patkit.configuration.PeakDetectionParams.find_peaks_args", "modulename": "patkit.configuration", "qualname": "PeakDetectionParams.find_peaks_args", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.FindPeaksScipyArguments | None"}, {"fullname": "patkit.configuration.PeakDetectionParams.model_config", "modulename": "patkit.configuration", "qualname": "PeakDetectionParams.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.PointAnnotationParams", "modulename": "patkit.configuration", "qualname": "PointAnnotationParams", "kind": "class", "doc": "<p>A BaseModel which can be updated with new data.</p>\n\n<p>The update will trigger validation again.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.PointAnnotationParams.normalisation", "modulename": "patkit.configuration", "qualname": "PointAnnotationParams.normalisation", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.TimeseriesNormalisation | None"}, {"fullname": "patkit.configuration.PointAnnotationParams.time_min", "modulename": "patkit.configuration", "qualname": "PointAnnotationParams.time_min", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.TimeLimit | None"}, {"fullname": "patkit.configuration.PointAnnotationParams.time_max", "modulename": "patkit.configuration", "qualname": "PointAnnotationParams.time_max", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.TimeLimit | None"}, {"fullname": "patkit.configuration.PointAnnotationParams.model_config", "modulename": "patkit.configuration", "qualname": "PointAnnotationParams.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.SearchPattern", "modulename": "patkit.configuration", "qualname": "SearchPattern", "kind": "class", "doc": "<p>Representation for simple and regexp search patterns.</p>\n\n<h6 id=\"members\">Members</h6>\n\n<p>pattern : str\n    The pattern to search for\nis_regexp : bool, optional\n    If the pattern should be treated as a regexp or not. Defaults to False.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.SearchPattern.pattern", "modulename": "patkit.configuration", "qualname": "SearchPattern.pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.configuration.SearchPattern.is_regexp", "modulename": "patkit.configuration", "qualname": "SearchPattern.is_regexp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.configuration.SearchPattern.match", "modulename": "patkit.configuration", "qualname": "SearchPattern.match", "kind": "function", "doc": "<p>Match this pattern to the argument string.</p>\n\n<p>If this pattern is not a regexp then this method will return True only\nwhen the pattern is verbatim the argument string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>string</strong> (str):\nThe string to match to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this pattern matches the argument.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.SearchPattern.search", "modulename": "patkit.configuration", "qualname": "SearchPattern.search", "kind": "function", "doc": "<p>Search for this pattern in the argument string.</p>\n\n<p>If this pattern is not a regexp then this method will return True only\nwhen the pattern is found verbatim in the argument string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>string</strong> (str):\nThe string to match to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this pattern is found in the argument.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.SearchPattern.build", "modulename": "patkit.configuration", "qualname": "SearchPattern.build", "kind": "function", "doc": "<p>Build a SearchPattern from a dictionary or a string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong> (dict | str):\nThe dictionary or string to build the SearchPattern from. If the\nparameter is a string it is used as the pattern, if it is a dict\nit's passed as keyword arguments to the SearchPattern constructor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>SearchPattern</strong>: The constructed SearchPattern.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If the value is not a dict or a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SearchPattern</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.SearchPattern.model_config", "modulename": "patkit.configuration", "qualname": "SearchPattern.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.SessionConfig", "modulename": "patkit.configuration", "qualname": "SessionConfig", "kind": "class", "doc": "<p>Description of a Session for import into patkit.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.SessionConfig.data_source_name", "modulename": "patkit.configuration", "qualname": "SessionConfig.data_source_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.DatasourceNames"}, {"fullname": "patkit.configuration.SessionConfig.path_structure", "modulename": "patkit.configuration", "qualname": "SessionConfig.path_structure", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.PathStructure"}, {"fullname": "patkit.configuration.SessionConfig.spline_config", "modulename": "patkit.configuration", "qualname": "SessionConfig.spline_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SplineConfig | None"}, {"fullname": "patkit.configuration.SessionConfig.model_config", "modulename": "patkit.configuration", "qualname": "SessionConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.SimulationConfig", "modulename": "patkit.configuration", "qualname": "SimulationConfig", "kind": "class", "doc": "<p>A BaseModel which can be updated with new data.</p>\n\n<p>The update will trigger validation again.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.SimulationConfig.output_directory", "modulename": "patkit.configuration", "qualname": "SimulationConfig.output_directory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path"}, {"fullname": "patkit.configuration.SimulationConfig.overwrite_plots", "modulename": "patkit.configuration", "qualname": "SimulationConfig.overwrite_plots", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool | None"}, {"fullname": "patkit.configuration.SimulationConfig.logging_notice_base", "modulename": "patkit.configuration", "qualname": "SimulationConfig.logging_notice_base", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.configuration.SimulationConfig.sounds", "modulename": "patkit.configuration", "qualname": "SimulationConfig.sounds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "patkit.configuration.SimulationConfig.perturbations", "modulename": "patkit.configuration", "qualname": "SimulationConfig.perturbations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[float]"}, {"fullname": "patkit.configuration.SimulationConfig.contour_distance", "modulename": "patkit.configuration", "qualname": "SimulationConfig.contour_distance", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.ContourDistanceParams"}, {"fullname": "patkit.configuration.SimulationConfig.contour_shape", "modulename": "patkit.configuration", "qualname": "SimulationConfig.contour_shape", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SplineShapeParams"}, {"fullname": "patkit.configuration.SimulationConfig.demonstration_contour_plot", "modulename": "patkit.configuration", "qualname": "SimulationConfig.demonstration_contour_plot", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SimulationDemonstrationPlotParams | None"}, {"fullname": "patkit.configuration.SimulationConfig.mci_perturbation_series_plot", "modulename": "patkit.configuration", "qualname": "SimulationConfig.mci_perturbation_series_plot", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SimulationPlotParams | None"}, {"fullname": "patkit.configuration.SimulationConfig.distance_metric_ray_plot", "modulename": "patkit.configuration", "qualname": "SimulationConfig.distance_metric_ray_plot", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.RayPlotParams | None"}, {"fullname": "patkit.configuration.SimulationConfig.shape_metric_ray_plot", "modulename": "patkit.configuration", "qualname": "SimulationConfig.shape_metric_ray_plot", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.RayPlotParams | None"}, {"fullname": "patkit.configuration.SimulationConfig.model_config", "modulename": "patkit.configuration", "qualname": "SimulationConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.SplineConfig", "modulename": "patkit.configuration", "qualname": "SplineConfig", "kind": "class", "doc": "<p>Configuration options for both import and processing of splines.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.SplineConfig.import_config", "modulename": "patkit.configuration", "qualname": "SplineConfig.import_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SplineImportConfig"}, {"fullname": "patkit.configuration.SplineConfig.data_config", "modulename": "patkit.configuration", "qualname": "SplineConfig.data_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.SplineDataConfig"}, {"fullname": "patkit.configuration.SplineConfig.model_config", "modulename": "patkit.configuration", "qualname": "SplineConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.SplineDataConfig", "modulename": "patkit.configuration", "qualname": "SplineDataConfig", "kind": "class", "doc": "<p>Configuration options for processing and display of splines.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.SplineDataConfig.ignore_points", "modulename": "patkit.configuration", "qualname": "SplineDataConfig.ignore_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[int] | None"}, {"fullname": "patkit.configuration.SplineDataConfig.model_config", "modulename": "patkit.configuration", "qualname": "SplineDataConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.SplineImportConfig", "modulename": "patkit.configuration", "qualname": "SplineImportConfig", "kind": "class", "doc": "<p>Spline import csv file configuration.</p>\n\n<p>This describes how to interpret a csv file containing splines.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.SplineImportConfig.single_spline_file", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.single_spline_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.configuration.SplineImportConfig.headers", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.headers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.configuration.SplineImportConfig.coordinates", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.coordinates", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.CoordinateSystems"}, {"fullname": "patkit.configuration.SplineImportConfig.interleaved_coords", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.interleaved_coords", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.configuration.SplineImportConfig.meta_columns", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.meta_columns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[patkit.constants.SplineMetaColumn]"}, {"fullname": "patkit.configuration.SplineImportConfig.data_columns", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.data_columns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[patkit.constants.SplineDataColumn]"}, {"fullname": "patkit.configuration.SplineImportConfig.spline_file", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.spline_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.SplineImportConfig.spline_file_extension", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.spline_file_extension", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "patkit.configuration.SplineImportConfig.delimiter", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.delimiter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.configuration.SplineImportConfig.model_config", "modulename": "patkit.configuration", "qualname": "SplineImportConfig.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.TimeseriesNormalisation", "modulename": "patkit.configuration", "qualname": "TimeseriesNormalisation", "kind": "class", "doc": "<p>Selection between peak normalised, bottom normalised or both.</p>\n\n<p>Contains a boolean for each peak and bottom normalisation.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel"}, {"fullname": "patkit.configuration.TimeseriesNormalisation.peak", "modulename": "patkit.configuration", "qualname": "TimeseriesNormalisation.peak", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.configuration.TimeseriesNormalisation.bottom", "modulename": "patkit.configuration", "qualname": "TimeseriesNormalisation.bottom", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.configuration.TimeseriesNormalisation.build", "modulename": "patkit.configuration", "qualname": "TimeseriesNormalisation.build", "kind": "function", "doc": "<p>Construct a TimeseriesNormalisation object from a string value.</p>\n\n<p>The value usually comes from a config file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong> (str):\n'none': no normalisation\n'peak': divide all data points y-values by the largest y-value\n'bottom': deduct the lowest y-value from all data points y-values\n'both': do first bottom normalisation and then peak normalisation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>TimeseriesNormalisation</strong>: The new TimeseriesNormalisation with fields set as expected.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">TimeseriesNormalisation</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.TimeseriesNormalisation.model_config", "modulename": "patkit.configuration", "qualname": "TimeseriesNormalisation.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.configuration.Configuration", "modulename": "patkit.configuration", "qualname": "Configuration", "kind": "class", "doc": "<p>Main configuration class of patkit.</p>\n"}, {"fullname": "patkit.configuration.Configuration.__init__", "modulename": "patkit.configuration", "qualname": "Configuration.__init__", "kind": "function", "doc": "<p>Init the main configuration object. </p>\n\n<p>Run only once. Updates should be done with methods of the class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>configuration_paths</strong> (ConfigPaths):\nPaths to load the configuration from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">configuration_paths</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">ConfigPaths</span></span>)</span>"}, {"fullname": "patkit.configuration.Configuration.config_paths", "modulename": "patkit.configuration", "qualname": "Configuration.config_paths", "kind": "variable", "doc": "<p>Main config Paths.</p>\n", "annotation": ": patkit.configuration.configuration.ConfigPaths"}, {"fullname": "patkit.configuration.Configuration.data_config", "modulename": "patkit.configuration", "qualname": "Configuration.data_config", "kind": "variable", "doc": "<p>Config options for a data run.</p>\n", "annotation": ": patkit.configuration.configuration_models.DataConfig | None"}, {"fullname": "patkit.configuration.Configuration.gui_config", "modulename": "patkit.configuration", "qualname": "Configuration.gui_config", "kind": "variable", "doc": "<p>Gui config options.</p>\n", "annotation": ": patkit.configuration.configuration_models.GuiConfig"}, {"fullname": "patkit.configuration.Configuration.publish_config", "modulename": "patkit.configuration", "qualname": "Configuration.publish_config", "kind": "variable", "doc": "<p>Result publishing configuration options.</p>\n", "annotation": ": patkit.configuration.configuration_models.PublishConfig | None"}, {"fullname": "patkit.configuration.Configuration.simulation_config", "modulename": "patkit.configuration", "qualname": "Configuration.simulation_config", "kind": "variable", "doc": "<p>Simulation configuration options.</p>\n", "annotation": ": patkit.configuration.configuration_models.SimulationConfig"}, {"fullname": "patkit.configuration.Configuration.save_to_file", "modulename": "patkit.configuration", "qualname": "Configuration.save_to_file", "kind": "function", "doc": "<p>Save configuration to a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (Path | str):\nFile to save to.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: This hasn't been implemented yet.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.Configuration.update_data_config_from_file", "modulename": "patkit.configuration", "qualname": "Configuration.update_data_config_from_file", "kind": "function", "doc": "<p>Update the data run configuration from a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>configuration_file</strong> (Path | str):\nFile to read the new options from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">configuration_file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.Configuration.update_publish_from_file", "modulename": "patkit.configuration", "qualname": "Configuration.update_publish_from_file", "kind": "function", "doc": "<p>Update the publishing configuration from a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>configuration_file</strong> (Path | str):\nFile to read the new options from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">configuration_file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.Configuration.update_gui_from_file", "modulename": "patkit.configuration", "qualname": "Configuration.update_gui_from_file", "kind": "function", "doc": "<p>Update the GUI configuration from a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>configuration_file</strong> (Path | str):\nFile to read the new options from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">configuration_file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.Configuration.update_all_from_files", "modulename": "patkit.configuration", "qualname": "Configuration.update_all_from_files", "kind": "function", "doc": "<p>Update the configuration from a file.</p>\n\n<p>This first updates the main configuration and then recursively updates\nthe other configuration members.</p>\n\n<p>NOTE: comment round tripping may/will be broken by running any of the\nupdate methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>configuration_paths</strong> (ConfigPaths):\nPaths to load the configuration from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">configuration_paths</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">ConfigPaths</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.ConfigPaths", "modulename": "patkit.configuration", "qualname": "ConfigPaths", "kind": "class", "doc": "<p>Configuration paths of patkit.</p>\n"}, {"fullname": "patkit.configuration.ConfigPaths.__init__", "modulename": "patkit.configuration", "qualname": "ConfigPaths.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span>)</span>"}, {"fullname": "patkit.configuration.ConfigPaths.path", "modulename": "patkit.configuration", "qualname": "ConfigPaths.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.configuration.ConfigPaths.data_config", "modulename": "patkit.configuration", "qualname": "ConfigPaths.data_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.ConfigPaths.gui_config", "modulename": "patkit.configuration", "qualname": "ConfigPaths.gui_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.ConfigPaths.publish_config", "modulename": "patkit.configuration", "qualname": "ConfigPaths.publish_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.ConfigPaths.simulation_config", "modulename": "patkit.configuration", "qualname": "ConfigPaths.simulation_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.configuration.apply_exclusion_list", "modulename": "patkit.configuration", "qualname": "apply_exclusion_list", "kind": "function", "doc": "<p>Apply exclusion list to the list of Recordings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recordings</strong> (list[Recording]):\nthe list of Recordings</li>\n<li><strong>exclusion_list</strong> (ExclusionList):\n_description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">exclusion_list</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">ExclusionList</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.load_exclusion_list", "modulename": "patkit.configuration", "qualname": "load_exclusion_list", "kind": "function", "doc": "<p>If it exists, load the exclusion list from the given path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong> (Path | str):\nEither a Path object or a string. If a string is passed, it is assumed\nto be a relative path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ExclusionList</strong>: The exclusion list. If the file was a .csv file, there will be only\nfiles excluded, a .yaml gives more options.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">ExclusionList</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.configuration.remove_excluded_recordings", "modulename": "patkit.configuration", "qualname": "remove_excluded_recordings", "kind": "function", "doc": "<p>Filter a list of Recordings with the given exclusion list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recordings :</strong>: The list of Recordings to be filtered.</li>\n<li><strong>exclusion_list :</strong>: The ExclusionList to apply.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[Recording]</strong>: The filtered list of Recordings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">exclusion_list</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">ExclusionList</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.constants", "modulename": "patkit.constants", "kind": "module", "doc": "<p>This module contains all sorts of constants used by patkit.</p>\n\n<p>Enums are used for constants that need to be instantiated from other variables.\nThey maybe used as fields in other objects. Using an Enum limits the possible\nvalues and avoids typos and makes an IDE help in writing code.</p>\n\n<p>Frozen dataclasses are used for constants that only ever need to be accessed\nand never are stored. In effect, they function as look-up tables.</p>\n"}, {"fullname": "patkit.constants.PATKIT_VERSION", "modulename": "patkit.constants", "qualname": "PATKIT_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;0.16.0&#x27;"}, {"fullname": "patkit.constants.PATKIT_FILE_VERSION", "modulename": "patkit.constants", "qualname": "PATKIT_FILE_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;0.16.0&#x27;"}, {"fullname": "patkit.constants.DEFAULT_ENCODING", "modulename": "patkit.constants", "qualname": "DEFAULT_ENCODING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;utf-8&#x27;"}, {"fullname": "patkit.constants.PATKIT_CONFIG_DIR", "modulename": "patkit.constants", "qualname": "PATKIT_CONFIG_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;~/.patkit/&#x27;"}, {"fullname": "patkit.constants.PATKIT_HISTORY_FILE", "modulename": "patkit.constants", "qualname": "PATKIT_HISTORY_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;~/.patkit/history&#x27;"}, {"fullname": "patkit.constants.PATKIT_EPSILON", "modulename": "patkit.constants", "qualname": "PATKIT_EPSILON", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-05"}, {"fullname": "patkit.constants.AaaProbeType", "modulename": "patkit.constants", "qualname": "AaaProbeType", "kind": "class", "doc": "<p>Probe type codes saved by AAA.</p>\n\n<p>These are probe models, not 'fan' vs 'linear' or some such thing.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.AaaProbeType.UNKNOWN", "modulename": "patkit.constants", "qualname": "AaaProbeType.UNKNOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AaaProbeType.UNKNOWN: -1&gt;"}, {"fullname": "patkit.constants.AaaProbeType.ZERO", "modulename": "patkit.constants", "qualname": "AaaProbeType.ZERO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AaaProbeType.ZERO: 0&gt;"}, {"fullname": "patkit.constants.AaaProbeType.ONE", "modulename": "patkit.constants", "qualname": "AaaProbeType.ONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AaaProbeType.ONE: 1&gt;"}, {"fullname": "patkit.constants.AnnotationType", "modulename": "patkit.constants", "qualname": "AnnotationType", "kind": "class", "doc": "<p>Enum to differentiate Modality annotation types</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.AnnotationType.PEAKS", "modulename": "patkit.constants", "qualname": "AnnotationType.PEAKS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AnnotationType.PEAKS: &#x27;peaks&#x27;&gt;"}, {"fullname": "patkit.constants.AnnotationType.ARTICULATORY_ONSET", "modulename": "patkit.constants", "qualname": "AnnotationType.ARTICULATORY_ONSET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AnnotationType.ARTICULATORY_ONSET: &#x27;articulatory_onset&#x27;&gt;"}, {"fullname": "patkit.constants.AnnotationType.ACOUSTIC_ONSET", "modulename": "patkit.constants", "qualname": "AnnotationType.ACOUSTIC_ONSET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AnnotationType.ACOUSTIC_ONSET: &#x27;acoustic_onset&#x27;&gt;"}, {"fullname": "patkit.constants.ComparisonMember", "modulename": "patkit.constants", "qualname": "ComparisonMember", "kind": "class", "doc": "<p>Which comparison member the perturbations should be applied to.</p>\n", "bases": "patkit.external_class_extensions.enum_extensions.ListablePrintableEnum"}, {"fullname": "patkit.constants.ComparisonMember.FIRST", "modulename": "patkit.constants", "qualname": "ComparisonMember.FIRST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ComparisonMember.FIRST: &#x27;first&#x27;&gt;"}, {"fullname": "patkit.constants.ComparisonMember.SECOND", "modulename": "patkit.constants", "qualname": "ComparisonMember.SECOND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ComparisonMember.SECOND: &#x27;second&#x27;&gt;"}, {"fullname": "patkit.constants.CoordinateSystems", "modulename": "patkit.constants", "qualname": "CoordinateSystems", "kind": "class", "doc": "<p>Enum to differentiate coordinate systems.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.CoordinateSystems.CARTESIAN", "modulename": "patkit.constants", "qualname": "CoordinateSystems.CARTESIAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CoordinateSystems.CARTESIAN: &#x27;Cartesian&#x27;&gt;"}, {"fullname": "patkit.constants.CoordinateSystems.POLAR", "modulename": "patkit.constants", "qualname": "CoordinateSystems.POLAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;CoordinateSystems.POLAR: &#x27;polar&#x27;&gt;"}, {"fullname": "patkit.constants.DatasourceNames", "modulename": "patkit.constants", "qualname": "DatasourceNames", "kind": "class", "doc": "<p>Names of data sources PATKIT can handle.</p>\n\n<p>Used in saving and loading to identify the data source in config, as well\nas in meta. Used to skip the step of trying to figure the data source out\nfrom the type of files present.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.DatasourceNames.AAA", "modulename": "patkit.constants", "qualname": "DatasourceNames.AAA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DatasourceNames.AAA: &#x27;AAA&#x27;&gt;"}, {"fullname": "patkit.constants.DatasourceNames.RASL", "modulename": "patkit.constants", "qualname": "DatasourceNames.RASL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DatasourceNames.RASL: &#x27;RASL&#x27;&gt;"}, {"fullname": "patkit.constants.DatasourceNames.WAV", "modulename": "patkit.constants", "qualname": "DatasourceNames.WAV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DatasourceNames.WAV: &#x27;WAV&#x27;&gt;"}, {"fullname": "patkit.constants.GuiColorScheme", "modulename": "patkit.constants", "qualname": "GuiColorScheme", "kind": "class", "doc": "<p>GUI styles.</p>\n\n<p>FOLLOW_SYSTEM means patkit will try to follow the dark/light theme setting\nthe system uses.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.GuiColorScheme.DARK", "modulename": "patkit.constants", "qualname": "GuiColorScheme.DARK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GuiColorScheme.DARK: &#x27;dark&#x27;&gt;"}, {"fullname": "patkit.constants.GuiColorScheme.FOLLOW_SYSTEM", "modulename": "patkit.constants", "qualname": "GuiColorScheme.FOLLOW_SYSTEM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GuiColorScheme.FOLLOW_SYSTEM: &#x27;follow_system&#x27;&gt;"}, {"fullname": "patkit.constants.GuiColorScheme.LIGHT", "modulename": "patkit.constants", "qualname": "GuiColorScheme.LIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GuiColorScheme.LIGHT: &#x27;light&#x27;&gt;"}, {"fullname": "patkit.constants.GuiImageType", "modulename": "patkit.constants", "qualname": "GuiImageType", "kind": "class", "doc": "<p>GUI image types for specifying the type of image to be shown in a panel.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.GuiImageType.MEAN_IMAGE", "modulename": "patkit.constants", "qualname": "GuiImageType.MEAN_IMAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GuiImageType.MEAN_IMAGE: &#x27;mean_image&#x27;&gt;"}, {"fullname": "patkit.constants.GuiImageType.FRAME", "modulename": "patkit.constants", "qualname": "GuiImageType.FRAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GuiImageType.FRAME: &#x27;frame&#x27;&gt;"}, {"fullname": "patkit.constants.GuiImageType.RAW_FRAME", "modulename": "patkit.constants", "qualname": "GuiImageType.RAW_FRAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;GuiImageType.RAW_FRAME: &#x27;raw_frame&#x27;&gt;"}, {"fullname": "patkit.constants.AxesType", "modulename": "patkit.constants", "qualname": "AxesType", "kind": "class", "doc": "<p>Axes types in plotting.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.AxesType.DATA", "modulename": "patkit.constants", "qualname": "AxesType.DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AxesType.DATA: &#x27;data_axes&#x27;&gt;"}, {"fullname": "patkit.constants.AxesType.TIER", "modulename": "patkit.constants", "qualname": "AxesType.TIER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AxesType.TIER: &#x27;tier_axes&#x27;&gt;"}, {"fullname": "patkit.constants.ImageMask", "modulename": "patkit.constants", "qualname": "ImageMask", "kind": "class", "doc": "<p>Accepted image masking options in calculating PD.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.ImageMask.TOP", "modulename": "patkit.constants", "qualname": "ImageMask.TOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImageMask.TOP: &#x27;top&#x27;&gt;"}, {"fullname": "patkit.constants.ImageMask.BOTTOM", "modulename": "patkit.constants", "qualname": "ImageMask.BOTTOM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImageMask.BOTTOM: &#x27;bottom&#x27;&gt;"}, {"fullname": "patkit.constants.ImageMask.WHOLE", "modulename": "patkit.constants", "qualname": "ImageMask.WHOLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImageMask.WHOLE: &#x27;whole&#x27;&gt;"}, {"fullname": "patkit.constants.IntervalBoundary", "modulename": "patkit.constants", "qualname": "IntervalBoundary", "kind": "class", "doc": "<p>Begin and end for import type checking.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.IntervalBoundary.BEGIN", "modulename": "patkit.constants", "qualname": "IntervalBoundary.BEGIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;IntervalBoundary.BEGIN: &#x27;begin&#x27;&gt;"}, {"fullname": "patkit.constants.IntervalBoundary.END", "modulename": "patkit.constants", "qualname": "IntervalBoundary.END", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;IntervalBoundary.END: &#x27;end&#x27;&gt;"}, {"fullname": "patkit.constants.IntervalCategory", "modulename": "patkit.constants", "qualname": "IntervalCategory", "kind": "class", "doc": "<p>Rule-based interval selection categories for import type checking.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.IntervalCategory.FIRST_NON_EMPTY", "modulename": "patkit.constants", "qualname": "IntervalCategory.FIRST_NON_EMPTY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;IntervalCategory.FIRST_NON_EMPTY: &#x27;first non-empty&#x27;&gt;"}, {"fullname": "patkit.constants.IntervalCategory.LAST_NON_EMPTY", "modulename": "patkit.constants", "qualname": "IntervalCategory.LAST_NON_EMPTY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;IntervalCategory.LAST_NON_EMPTY: &#x27;last non-empty&#x27;&gt;"}, {"fullname": "patkit.constants.IntervalCategory.FIRST_LABELED", "modulename": "patkit.constants", "qualname": "IntervalCategory.FIRST_LABELED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;IntervalCategory.FIRST_LABELED: &#x27;first labeled&#x27;&gt;"}, {"fullname": "patkit.constants.IntervalCategory.LAST_LABELED", "modulename": "patkit.constants", "qualname": "IntervalCategory.LAST_LABELED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;IntervalCategory.LAST_LABELED: &#x27;last labeled&#x27;&gt;"}, {"fullname": "patkit.constants.PatkitConfigFile", "modulename": "patkit.constants", "qualname": "PatkitConfigFile", "kind": "class", "doc": "<p>Human written yaml files to control importing data.</p>\n\n<p>Please note, that while MAIN corresponds to <code>patkit.yaml</code> which is the\nconventional name for the file containing paths/names of other config files\nsuch as data, gui, publish, and simulation config, and those files have\nconventional names (<code>patkit_data.yaml</code> etc.), these filenames are only a\nconvention. The MAIN here is more of a guess of what we should look for\nthan a hard rule, and the rest should be specified in <code>patkit.yaml</code> instead\nof PATKIT trying to guess their names.</p>\n\n<p>DATA: specifications for processing data and deriving new Modalities and\n    Statistics. \nGUI: specifications for gui elements - which graphs to display, color\n    scheme etc.\nPUBLISH: specifications for publishing graphs\nSIMULATION: specifications for simulating data and running analysis on the\n    simulated data\nMANIFEST: list of Scenarios relating to a set of recorded data saved with\n    recorded data\nSESSION: how PATKIT should read a session based on recorded data\nSPLINE: spline formatting</p>\n"}, {"fullname": "patkit.constants.PatkitConfigFile.DATA", "modulename": "patkit.constants", "qualname": "PatkitConfigFile.DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;patkit-data.yaml&#x27;"}, {"fullname": "patkit.constants.PatkitConfigFile.GUI", "modulename": "patkit.constants", "qualname": "PatkitConfigFile.GUI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;patkit-gui.yaml&#x27;"}, {"fullname": "patkit.constants.PatkitConfigFile.PUBLISH", "modulename": "patkit.constants", "qualname": "PatkitConfigFile.PUBLISH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;patkit-publish.yaml&#x27;"}, {"fullname": "patkit.constants.PatkitConfigFile.SIMULATION", "modulename": "patkit.constants", "qualname": "PatkitConfigFile.SIMULATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;patkit-simulation.yaml&#x27;"}, {"fullname": "patkit.constants.PatkitConfigFile.MANIFEST", "modulename": "patkit.constants", "qualname": "PatkitConfigFile.MANIFEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;patkit-manifest.yaml&#x27;"}, {"fullname": "patkit.constants.PatkitConfigFile.SESSION", "modulename": "patkit.constants", "qualname": "PatkitConfigFile.SESSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;session-config.yaml&#x27;"}, {"fullname": "patkit.constants.PatkitConfigFile.SPLINE", "modulename": "patkit.constants", "qualname": "PatkitConfigFile.SPLINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;spline-config.yaml&#x27;"}, {"fullname": "patkit.constants.PatkitSuffix", "modulename": "patkit.constants", "qualname": "PatkitSuffix", "kind": "class", "doc": "<p>Suffixes for files saved by patkit.</p>\n\n<p>These exist as a convenient way of not needing to risk typos. To see the\nwhole layered scheme patkit uses see the 'Saving and Loading Data' section\nin the documentation.</p>\n"}, {"fullname": "patkit.constants.PatkitSuffix.CONFIG", "modulename": "patkit.constants", "qualname": "PatkitSuffix.CONFIG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.yaml&#x27;"}, {"fullname": "patkit.constants.PatkitSuffix.DATA", "modulename": "patkit.constants", "qualname": "PatkitSuffix.DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.npz&#x27;"}, {"fullname": "patkit.constants.PatkitSuffix.META", "modulename": "patkit.constants", "qualname": "PatkitSuffix.META", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.meta&#x27;"}, {"fullname": "patkit.constants.SavedObjectTypes", "modulename": "patkit.constants", "qualname": "SavedObjectTypes", "kind": "class", "doc": "<p>Represent type of a saved patkit object in .meta.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.SavedObjectTypes.DATASET", "modulename": "patkit.constants", "qualname": "SavedObjectTypes.DATASET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.DATASET: &#x27;Dataset&#x27;&gt;"}, {"fullname": "patkit.constants.SavedObjectTypes.MODALITY", "modulename": "patkit.constants", "qualname": "SavedObjectTypes.MODALITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.MODALITY: &#x27;Modality&#x27;&gt;"}, {"fullname": "patkit.constants.SavedObjectTypes.RECORDING", "modulename": "patkit.constants", "qualname": "SavedObjectTypes.RECORDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.RECORDING: &#x27;Recording&#x27;&gt;"}, {"fullname": "patkit.constants.SavedObjectTypes.SESSION", "modulename": "patkit.constants", "qualname": "SavedObjectTypes.SESSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.SESSION: &#x27;Session&#x27;&gt;"}, {"fullname": "patkit.constants.SavedObjectTypes.SOURCE", "modulename": "patkit.constants", "qualname": "SavedObjectTypes.SOURCE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.SOURCE: &#x27;Source&#x27;&gt;"}, {"fullname": "patkit.constants.SavedObjectTypes.STATISTIC", "modulename": "patkit.constants", "qualname": "SavedObjectTypes.STATISTIC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.STATISTIC: &#x27;Statistic&#x27;&gt;"}, {"fullname": "patkit.constants.SavedObjectTypes.TRIAL", "modulename": "patkit.constants", "qualname": "SavedObjectTypes.TRIAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.TRIAL: &#x27;Trial&#x27;&gt;"}, {"fullname": "patkit.constants.SourceSuffix", "modulename": "patkit.constants", "qualname": "SourceSuffix", "kind": "class", "doc": "<p>Suffixes for files imported by patkit.</p>\n\n<p>These exist as a convenient way of not needing to risk typos and for\nrecognising what patkit is being asked to import.</p>\n\n<p>Note that AAA_ULTRA_META_OLD is not a proper suffix and won't be recognised\nby pathlib and Path as such. Instead, do this</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">directory_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">from_some_source</span><span class=\"p\">)</span>\n<span class=\"n\">directory_path</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">name_string</span> <span class=\"o\">+</span> <span class=\"n\">SourceSuffix</span><span class=\"o\">.</span><span class=\"n\">AAA_ULTRA_META_OLD</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "patkit.constants.SourceSuffix.AAA_ULTRA", "modulename": "patkit.constants", "qualname": "SourceSuffix.AAA_ULTRA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.ult&#x27;"}, {"fullname": "patkit.constants.SourceSuffix.AAA_ULTRA_META_OLD", "modulename": "patkit.constants", "qualname": "SourceSuffix.AAA_ULTRA_META_OLD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;US.txt&#x27;"}, {"fullname": "patkit.constants.SourceSuffix.AAA_ULTRA_META_NEW", "modulename": "patkit.constants", "qualname": "SourceSuffix.AAA_ULTRA_META_NEW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.param&#x27;"}, {"fullname": "patkit.constants.SourceSuffix.AAA_PROMPT", "modulename": "patkit.constants", "qualname": "SourceSuffix.AAA_PROMPT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.txt&#x27;"}, {"fullname": "patkit.constants.SourceSuffix.AAA_SPLINES", "modulename": "patkit.constants", "qualname": "SourceSuffix.AAA_SPLINES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.spl&#x27;"}, {"fullname": "patkit.constants.SourceSuffix.AVI", "modulename": "patkit.constants", "qualname": "SourceSuffix.AVI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.avi&#x27;"}, {"fullname": "patkit.constants.SourceSuffix.CSV", "modulename": "patkit.constants", "qualname": "SourceSuffix.CSV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.csv&#x27;"}, {"fullname": "patkit.constants.SourceSuffix.TEXTGRID", "modulename": "patkit.constants", "qualname": "SourceSuffix.TEXTGRID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.TextGrid&#x27;"}, {"fullname": "patkit.constants.SourceSuffix.WAV", "modulename": "patkit.constants", "qualname": "SourceSuffix.WAV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.wav&#x27;"}, {"fullname": "patkit.constants.SplineDataColumn", "modulename": "patkit.constants", "qualname": "SplineDataColumn", "kind": "class", "doc": "<p>Basic data columns that any Spline should reasonably have.</p>\n\n<p>Accepted values: 'r' with 'phi', 'x' with 'y', and 'confidence'</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.SplineDataColumn.R", "modulename": "patkit.constants", "qualname": "SplineDataColumn.R", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDataColumn.R: &#x27;r&#x27;&gt;"}, {"fullname": "patkit.constants.SplineDataColumn.PHI", "modulename": "patkit.constants", "qualname": "SplineDataColumn.PHI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDataColumn.PHI: &#x27;phi&#x27;&gt;"}, {"fullname": "patkit.constants.SplineDataColumn.X", "modulename": "patkit.constants", "qualname": "SplineDataColumn.X", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDataColumn.X: &#x27;x&#x27;&gt;"}, {"fullname": "patkit.constants.SplineDataColumn.Y", "modulename": "patkit.constants", "qualname": "SplineDataColumn.Y", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDataColumn.Y: &#x27;y&#x27;&gt;"}, {"fullname": "patkit.constants.SplineDataColumn.CONFIDENCE", "modulename": "patkit.constants", "qualname": "SplineDataColumn.CONFIDENCE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDataColumn.CONFIDENCE: &#x27;confidence&#x27;&gt;"}, {"fullname": "patkit.constants.SplineMetaColumn", "modulename": "patkit.constants", "qualname": "SplineMetaColumn", "kind": "class", "doc": "<p>Basic metadata that any Spline should reasonably have.</p>\n\n<p>Accepted values:</p>\n\n<ul>\n<li>ignore: marks a column to be ignored, unlike the others below, \ncan be used several times</li>\n<li>id: used to identify the speaker, \noften contained in a csv field called 'family name'</li>\n<li>given names: appended to 'id' if not marked 'ignore'</li>\n<li>date and time: dat3 and time of recording</li>\n<li>prompt: prompt of recording, used to identify the recording with 'id'</li>\n<li>annotation label: optional field containing annotation information</li>\n<li>time in recording: timestamp of the frame this spline belongs to</li>\n<li>number of spline points: number of sample points in the spline used \nto parse the coordinates and possible confidence information</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.SplineMetaColumn.IGNORE", "modulename": "patkit.constants", "qualname": "SplineMetaColumn.IGNORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineMetaColumn.IGNORE: &#x27;ignore&#x27;&gt;"}, {"fullname": "patkit.constants.SplineMetaColumn.ID", "modulename": "patkit.constants", "qualname": "SplineMetaColumn.ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineMetaColumn.ID: &#x27;id&#x27;&gt;"}, {"fullname": "patkit.constants.SplineMetaColumn.GIVEN_NAMES", "modulename": "patkit.constants", "qualname": "SplineMetaColumn.GIVEN_NAMES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineMetaColumn.GIVEN_NAMES: &#x27;given names&#x27;&gt;"}, {"fullname": "patkit.constants.SplineMetaColumn.DATE_AND_TIME", "modulename": "patkit.constants", "qualname": "SplineMetaColumn.DATE_AND_TIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineMetaColumn.DATE_AND_TIME: &#x27;date and time&#x27;&gt;"}, {"fullname": "patkit.constants.SplineMetaColumn.PROMPT", "modulename": "patkit.constants", "qualname": "SplineMetaColumn.PROMPT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineMetaColumn.PROMPT: &#x27;prompt&#x27;&gt;"}, {"fullname": "patkit.constants.SplineMetaColumn.ANNOTATION_LABEL", "modulename": "patkit.constants", "qualname": "SplineMetaColumn.ANNOTATION_LABEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineMetaColumn.ANNOTATION_LABEL: &#x27;annotation label&#x27;&gt;"}, {"fullname": "patkit.constants.SplineMetaColumn.TIME_IN_RECORDING", "modulename": "patkit.constants", "qualname": "SplineMetaColumn.TIME_IN_RECORDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineMetaColumn.TIME_IN_RECORDING: &#x27;time in recording&#x27;&gt;"}, {"fullname": "patkit.constants.SplineMetaColumn.NUMBER_OF_SPLINE_POINTS", "modulename": "patkit.constants", "qualname": "SplineMetaColumn.NUMBER_OF_SPLINE_POINTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineMetaColumn.NUMBER_OF_SPLINE_POINTS: &#x27;number of spline points&#x27;&gt;"}, {"fullname": "patkit.constants.SplineDiffsEnum", "modulename": "patkit.constants", "qualname": "SplineDiffsEnum", "kind": "class", "doc": "<p>Spline metrics that use distance between corresponding points.</p>\n", "bases": "patkit.external_class_extensions.enum_extensions.ListablePrintableEnum"}, {"fullname": "patkit.constants.SplineDiffsEnum.APBPD", "modulename": "patkit.constants", "qualname": "SplineDiffsEnum.APBPD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDiffsEnum.APBPD: &#x27;apbpd&#x27;&gt;"}, {"fullname": "patkit.constants.SplineDiffsEnum.MPBPD", "modulename": "patkit.constants", "qualname": "SplineDiffsEnum.MPBPD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDiffsEnum.MPBPD: &#x27;mpbpd&#x27;&gt;"}, {"fullname": "patkit.constants.SplineDiffsEnum.SPLINE_L1", "modulename": "patkit.constants", "qualname": "SplineDiffsEnum.SPLINE_L1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDiffsEnum.SPLINE_L1: &#x27;spline_l1&#x27;&gt;"}, {"fullname": "patkit.constants.SplineDiffsEnum.SPLINE_L2", "modulename": "patkit.constants", "qualname": "SplineDiffsEnum.SPLINE_L2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineDiffsEnum.SPLINE_L2: &#x27;spline_l2&#x27;&gt;"}, {"fullname": "patkit.constants.SplineNNDsEnum", "modulename": "patkit.constants", "qualname": "SplineNNDsEnum", "kind": "class", "doc": "<p>Spline metrics that use nearest neighbour distance.</p>\n", "bases": "patkit.external_class_extensions.enum_extensions.ListablePrintableEnum"}, {"fullname": "patkit.constants.SplineNNDsEnum.ANND", "modulename": "patkit.constants", "qualname": "SplineNNDsEnum.ANND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineNNDsEnum.ANND: &#x27;annd&#x27;&gt;"}, {"fullname": "patkit.constants.SplineNNDsEnum.MNND", "modulename": "patkit.constants", "qualname": "SplineNNDsEnum.MNND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineNNDsEnum.MNND: &#x27;mnnd&#x27;&gt;"}, {"fullname": "patkit.constants.SplineShapesEnum", "modulename": "patkit.constants", "qualname": "SplineShapesEnum", "kind": "class", "doc": "<p>Spline metrics that characterise shape.</p>\n", "bases": "patkit.external_class_extensions.enum_extensions.ListablePrintableEnum"}, {"fullname": "patkit.constants.SplineShapesEnum.CURVATURE", "modulename": "patkit.constants", "qualname": "SplineShapesEnum.CURVATURE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineShapesEnum.CURVATURE: &#x27;curvature&#x27;&gt;"}, {"fullname": "patkit.constants.SplineShapesEnum.FOURIER", "modulename": "patkit.constants", "qualname": "SplineShapesEnum.FOURIER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineShapesEnum.FOURIER: &#x27;fourier&#x27;&gt;"}, {"fullname": "patkit.constants.SplineShapesEnum.MODIFIED_CURVATURE", "modulename": "patkit.constants", "qualname": "SplineShapesEnum.MODIFIED_CURVATURE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineShapesEnum.MODIFIED_CURVATURE: &#x27;modified_curvature&#x27;&gt;"}, {"fullname": "patkit.constants.SplineShapesEnum.PROCRUSTES", "modulename": "patkit.constants", "qualname": "SplineShapesEnum.PROCRUSTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SplineShapesEnum.PROCRUSTES: &#x27;procrustes&#x27;&gt;"}, {"fullname": "patkit.constants.SplineShapesEnum.short_name", "modulename": "patkit.constants", "qualname": "SplineShapesEnum.short_name", "kind": "function", "doc": "<p>Return the short name or abbreviation of this SplineShape metric.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The short name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.constants.SplineMetricEnum", "modulename": "patkit.constants", "qualname": "SplineMetricEnum", "kind": "variable", "doc": "<p>Enum of all valid spline metrics.</p>\n\n<p>This is formed as a UnionEnum of the subtypes.</p>\n", "default_value": "&lt;union enum of (&lt;enum &#x27;SplineDiffsEnum&#x27;&gt;, &lt;enum &#x27;SplineNNDsEnum&#x27;&gt;, &lt;enum &#x27;SplineShapesEnum&#x27;&gt;)&gt;"}, {"fullname": "patkit.constants.SimulationContourVowel", "modulename": "patkit.constants", "qualname": "SimulationContourVowel", "kind": "class", "doc": "<p>Currently available simulated vowel contours.</p>\n", "bases": "patkit.external_class_extensions.enum_extensions.ListablePrintableEnum"}, {"fullname": "patkit.constants.SimulationContourVowel.AE", "modulename": "patkit.constants", "qualname": "SimulationContourVowel.AE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SimulationContourVowel.AE: &#x27;\u00e6&#x27;&gt;"}, {"fullname": "patkit.constants.SimulationContourVowel.I", "modulename": "patkit.constants", "qualname": "SimulationContourVowel.I", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SimulationContourVowel.I: &#x27;i&#x27;&gt;"}, {"fullname": "patkit.constants.SimulationContourConsonant", "modulename": "patkit.constants", "qualname": "SimulationContourConsonant", "kind": "class", "doc": "<p>Currently available simulated consonant contours.</p>\n\n<p>Yes, at the moment there are none.</p>\n", "bases": "patkit.external_class_extensions.enum_extensions.ListablePrintableEnum"}, {"fullname": "patkit.constants.SimulationContourSoundEnum", "modulename": "patkit.constants", "qualname": "SimulationContourSoundEnum", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;union enum of (&lt;enum &#x27;SimulationContourVowel&#x27;&gt;, &lt;enum &#x27;SimulationContourConsonant&#x27;&gt;)&gt;"}, {"fullname": "patkit.constants.OverwriteConfirmation", "modulename": "patkit.constants", "qualname": "OverwriteConfirmation", "kind": "class", "doc": "<p>Codes for a user's response when asked if a file should be overwritten.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.constants.OverwriteConfirmation.YES", "modulename": "patkit.constants", "qualname": "OverwriteConfirmation.YES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;OverwriteConfirmation.YES: &#x27;yes&#x27;&gt;"}, {"fullname": "patkit.constants.OverwriteConfirmation.YES_TO_ALL", "modulename": "patkit.constants", "qualname": "OverwriteConfirmation.YES_TO_ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;OverwriteConfirmation.YES_TO_ALL: &#x27;yes to all&#x27;&gt;"}, {"fullname": "patkit.constants.OverwriteConfirmation.NO", "modulename": "patkit.constants", "qualname": "OverwriteConfirmation.NO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;OverwriteConfirmation.NO: &#x27;no&#x27;&gt;"}, {"fullname": "patkit.constants.OverwriteConfirmation.NO_TO_ALL", "modulename": "patkit.constants", "qualname": "OverwriteConfirmation.NO_TO_ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;OverwriteConfirmation.NO_TO_ALL: &#x27;no to all&#x27;&gt;"}, {"fullname": "patkit.data_import", "modulename": "patkit.data_import", "kind": "module", "doc": "<p>Data and metadata importing.</p>\n"}, {"fullname": "patkit.data_import.modality_adders", "modulename": "patkit.data_import", "qualname": "modality_adders", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;MonoAudio&#x27;: &lt;function add_audio&gt;, &#x27;RawUltrasound&#x27;: &lt;function add_aaa_raw_ultrasound&gt;, &#x27;ThreeD_Ultrasound&#x27;: &lt;function add_rasl_3D_ultrasound&gt;, &#x27;Video&#x27;: &lt;function add_video&gt;}"}, {"fullname": "patkit.data_import.AAA_raw_ultrasound", "modulename": "patkit.data_import.AAA_raw_ultrasound", "kind": "module", "doc": "<p>Importer for AAA raw ultrasound.</p>\n"}, {"fullname": "patkit.data_import.AAA_raw_ultrasound.parse_recording_meta_from_aaa_prompt_file", "modulename": "patkit.data_import.AAA_raw_ultrasound", "qualname": "parse_recording_meta_from_aaa_prompt_file", "kind": "function", "doc": "<p>Read an AAA .txt (not US.txt or .param) file and save prompt, \nrecording date and time, and participant name into the RecordingMetaData.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">RecordingMetaData</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_raw_ultrasound.parse_ultrasound_meta_aaa", "modulename": "patkit.data_import.AAA_raw_ultrasound", "qualname": "parse_ultrasound_meta_aaa", "kind": "function", "doc": "<p>Parse metadata from an AAA export file into a dictionary.</p>\n\n<p>This is either a 'US.txt' or a '.param' file. They have\nthe same format.</p>\n\n<p>Arguments:\nfilename -- path and name of file to be parsed.</p>\n\n<p>Returns a dictionary which should contain the following keys:\n    num_vectors -- number of scanlines in a frame\n    pix_Ver_vector -- number of pixels in a scanline\n    zero_offset -- number non-existing of pixels between probe origin and\n        first existing pixel\n    bits_per_pixel -- byte length of a single pixel in the .ult file\n    angle -- angle in radians between two scanlines\n    kind -- type of probe used\n    pixels_per_mm -- depth resolution of a scanline\n    frames_per_sec -- frame rate of ultrasound recording\n    time_in_secs_of_first_frame -- time from recording start to first frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_raw_ultrasound.add_aaa_raw_ultrasound", "modulename": "patkit.data_import.AAA_raw_ultrasound", "qualname": "add_aaa_raw_ultrasound", "kind": "function", "doc": "<p>Create a RawUltrasound Modality and add it to the Recording.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording</strong> (Recording):\n_description_</li>\n<li><strong>preload</strong> (bool):\nShould we load the data when creating the modality or not. Defaults to\nFalse to prevent massive memory consumption. See also error below.</li>\n<li><strong>path</strong> (Optional[Path], optional):\n_description_, by default None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: Preloading ultrasound data has not been implemented yet. If you really,\nreally want to, this is the function where to do that.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_recordings", "modulename": "patkit.data_import.AAA_recordings", "kind": "module", "doc": "<p>Import data exported by AAA.</p>\n"}, {"fullname": "patkit.data_import.AAA_recordings.generate_aaa_recording_list", "modulename": "patkit.data_import.AAA_recordings", "qualname": "generate_aaa_recording_list", "kind": "function", "doc": "<p>Produce an array of Recordings from an AAA export directory.</p>\n\n<p>Prepare a list of Recording objects from the files exported by AAA into the\nnamed directory. File existence is tested for, and if crucial files are\nmissing from a given recording it will be excluded.</p>\n\n<p>Each recording meta file (.txt, not US.txt) will be represented by a\nRecording object regardless of whether a complete set of files was found\nfor the recording. Exclusion is marked with <code>recording.excluded</code> rather\nthan not listing the recording. Log file will show reasons of exclusion.</p>\n\n<p>The processed files are recording meta: .txt, ultrasound meta: US.txt or\n.param, ultrasound: .ult, and audio waveform: .wav.</p>\n\n<p>If there is a <code>patkit_spline_import_config.yaml</code> present Splines modalities\nwill be added to the Recordings, but any missing ones (or even all missing)\nare considered non-fatal.</p>\n\n<p>Additionally, these will be added, but missing files are considered\nnon-fatal avi video: .avi, and TextGrid: .textgrid.</p>\n\n<p>directory -- the path to the directory to be processed. Returns an array of\nRecording objects sorted by date and time\n    of recording.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">import_config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SessionConfig</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">detect_beep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_recordings.generate_ultrasound_recording", "modulename": "patkit.data_import.AAA_recordings", "qualname": "generate_ultrasound_recording", "kind": "function", "doc": "<p>Generate an UltrasoundRecording without Modalities.</p>\n\n<p>Arguments:\nbasename -- name of the files to be read without type extensions but\n    with path.</p>\n\n<p>KeywordArguments:\ndirectory -- path to files</p>\n\n<p>Returns an AaaUltrasoundRecording without any modalities.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">basename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_recordings.add_modalities", "modulename": "patkit.data_import.AAA_recordings", "qualname": "add_modalities", "kind": "function", "doc": "<p>Add audio and raw ultrasound data to the recording.</p>\n\n<p>Keyword arguments:\nwavPreload -- boolean indicating if the .wav file is to be read into\n    memory on initialising. Defaults to True.\nultPreload -- boolean indicating if the .ult file is to be read into\n    memory on initialising. Defaults to False. Note: these\n    files are, roughly one to two orders of magnitude\n    larger than .wav files.\nvideoPreload -- boolean indicating if the .avi file is to be read into\n    memory on initialising. Defaults to False. Note: these\n    files are, yet again, roughly one to two orders of magnitude\n    larger than .ult files.</p>\n\n<p>Throws KeyError if TimeInSecsOfFirstFrame is missing from the\nmeta file: [directory]/basename + .txt.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">wav_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">detect_beep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ult_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">video_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_splines", "modulename": "patkit.data_import.AAA_splines", "kind": "module", "doc": "<p>Routines for loading splines exported from AAA.</p>\n"}, {"fullname": "patkit.data_import.AAA_splines.parse_splines", "modulename": "patkit.data_import.AAA_splines", "qualname": "parse_splines", "kind": "function", "doc": "<p>Construct a ModalityData from a list of lines representing Splines.</p>\n\n<p>Note that currently splines with varying number of sample points are not\nsupported and that confidence values generated by AAA are not imported.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lines</strong> (list):\nLines from a csv file.</li>\n<li><strong>spline_config</strong> (SplineImportConfig):\npatkit spline configuration which explains how to parse the lines.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ModalityData</strong>: ModalityData which contains the splines. Sampling rate will be set to\nzero, because splines may not exist for all frames rendering any value\ncalculated from spline timestamps unreliable.</li>\n</ul>\n\n<p>Note that the sampling rate of the returned modality data will only be\nset to non-zero, if <code>np.amax(time_diffs) &lt; 1.1*np.amin(time_diffs</code>\nwhere <code>time_diffs = np.diffs(timevector_of_splines)</code>. This is so that,\nif the splines are sparse in time, we won't set a weird sampling rate.\nHowever, this may cause problems when trying to calculate time-wise\ncomparisons of splines and determine that metric's sampling rate.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lines</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">spline_config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SplineImportConfig</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_splines.retrieve_splines", "modulename": "patkit.data_import.AAA_splines", "qualname": "retrieve_splines", "kind": "function", "doc": "<p>Read all splines from the file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">splinefile</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">spline_config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SplineImportConfig</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_splines.add_splines_from_batch_export", "modulename": "patkit.data_import.AAA_splines", "qualname": "add_splines_from_batch_export", "kind": "function", "doc": "<p>Add a Splines Modality to each recording from a batch file.</p>\n\n<p>The splines are read from a single AAA export file and added to the correct\nRecording by identifying the Recordings based on the date and time of the\noriginal recording and the prompt (because several recordings may have been\nsaved during the same minute). </p>\n\n<p>If no splines are found for a given Recording, an empty Spline object will\nbe attached to it.</p>\n\n<p>Note that Recordings are modified in place.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording_list</strong> (list[Recording]):\na list of Recording objects</li>\n<li><strong>spline_config</strong> (SplineImportConfig):\na parsed spline import configuration file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">spline_config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SplineImportConfig</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_splines.add_splines_from_individual_files", "modulename": "patkit.data_import.AAA_splines", "qualname": "add_splines_from_individual_files", "kind": "function", "doc": "<p>Add a Splines Modality to each Recording a corresponding file.</p>\n\n<p>If no splines are found for a given Recording, an empty Spline object will\nbe attached to it.</p>\n\n<p>Note that Recordings are modified in place.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording_list</strong> (list[Recording]):\na list of Recording objects</li>\n<li><strong>spline_config</strong> (SplineImportConfig):\na parsed spline import configuration file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">spline_config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SplineImportConfig</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.AAA_splines.add_splines", "modulename": "patkit.data_import.AAA_splines", "qualname": "add_splines", "kind": "function", "doc": "<p>Load and add Splines to the Recordings if available.</p>\n\n<p>Note that a patkitConfigFile.CSV_SPLINE_IMPORT file needs to be present in\nthe directory. Otherwise nothing gets loaded because patkit doesn't know\nhow to handle arbitrary spline files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording_list</strong> (list[Recording]):\nThe Recordings.</li>\n<li><strong>directory</strong> (Path):\nPath to the directory where the splines (and most likely other\nRecording files) are.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.RASL_3D_ultrasound_recordings", "modulename": "patkit.data_import.RASL_3D_ultrasound_recordings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.data_import.RASL_3D_ultrasound_recordings.generate_rasl_recording_list", "modulename": "patkit.data_import.RASL_3D_ultrasound_recordings", "qualname": "generate_rasl_recording_list", "kind": "function", "doc": "<p>Produce an array of Recordings from a 3D4D ultrasound directory.</p>\n\n<p>Prepare a list of Recording objects from the files exported by AAA into the\nnamed directory. File existence is tested for, and if crucial files are\nmissing from a given recording it will be excluded.</p>\n\n<p>If problems are found with a recording, exclusion is marked with\n<code>recordingObject.excluded</code> rather than not listing the recording. Log file\nwill show reasons of exclusion.</p>\n\n<p>The processed files are ultrasound and corresponding meta: .DCM, and audio\nwaveform: .dat or .wav.</p>\n\n<p>Additionally, this will be added, but missing files are considered\nnon-fatal: TextGrid: .textgrid.</p>\n\n<p>Positional argument: directory -- the path to the directory to be\nprocessed. Returns an array of Recording objects sorted by date and time\n    of recording.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SessionConfig</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclusion_list</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">ExclusionList</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">detect_beep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.RASL_3D_ultrasound_recordings.generate_recording_list_old_style", "modulename": "patkit.data_import.RASL_3D_ultrasound_recordings", "qualname": "generate_recording_list_old_style", "kind": "function", "doc": "<p>Produce an array of Recordings from a directory without .mat notes file.</p>\n\n<p>Prepare a list of Recording objects from the files exported by AAA\ninto the named directory. File existence is tested for,\nand if crucial files are missing from a given recording it will be\nexcluded.</p>\n\n<p>If problems are found with a recording, exclusion is marked with\n<code>recordingObjet.excluded</code> rather than not listing the recording. Log\nfile will show reasons of exclusion.</p>\n\n<p>The processed files are\nultrasound and corresponding meta: .DCM, and\naudio waveform: .dat or .wav.</p>\n\n<p>Additionally, this will be added, but missing files are considered\nnon-fatal:\nTextGrid: .textgrid.</p>\n\n<p>Positional argument:\ndirectory -- the path to the directory to be processed.\nReturns an array of Recording objects sorted by date and time\n    of recording.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.RASL_3D_ultrasound_recordings.generate_3D_ultrasound_recording", "modulename": "patkit.data_import.RASL_3D_ultrasound_recordings", "qualname": "generate_3D_ultrasound_recording", "kind": "function", "doc": "<p>Generate an UltrasoundRecording without Modalities.</p>\n\n<p>Arguments:\ndicom_name -- name of the DICOM files to be read without type \n    extensions but with path.\nsound_name -- name of the sound files (.dat and .wav) to be read \n    without type extensions but with path.</p>\n\n<p>KeywordArguments:\ndirectory -- path to files</p>\n\n<p>Returns an ThreeD_UltrasoundRecording without any modalities.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dicom_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sound_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">directories</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.RASL_3D_ultrasound_recordings.add_modalities", "modulename": "patkit.data_import.RASL_3D_ultrasound_recordings", "qualname": "add_modalities", "kind": "function", "doc": "<p>Add audio and raw ultrasound data to the recording.</p>\n\n<p>Keyword arguments:\nwavPreload -- boolean indicating if the .wav file is to be read into\n    memory on initialising. Defaults to True.\nultPreload -- boolean indicating if the ultrasound in .dicom files \n    should be read into memory on initialising. \n    Defaults to False. Note: these\n    files are roughly one to two orders of magnitude\n    larger than .wav files.\nvideoPreload -- boolean indicating if the .avi file is to be read into\n    memory on initialising. Defaults to False. Note: these\n    files are, yet again, roughly one to two orders of magnitude\n    larger than .dicom files.</p>\n\n<p>Throws KeyError if TimeInSecsOfFirstFrame is missing from the\nmeta file: [directory]/basename + .txt.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">wav_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">detect_beep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ult_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">video_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.audio", "modulename": "patkit.data_import.audio", "kind": "module", "doc": "<p>Adding MonoAudio to a Recording.</p>\n"}, {"fullname": "patkit.data_import.audio.add_audio", "modulename": "patkit.data_import.audio", "qualname": "add_audio", "kind": "function", "doc": "<p>Create a MonoAudio Modality and add it to the Recording.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording</strong> (Recording):\n_description_</li>\n<li><strong>preload</strong> (bool, optional):\n_description_, by default True</li>\n<li><strong>detect_beep</strong> (bool, optional):\nShould (1kHz) beep be detected in the recording, by default False</li>\n<li><strong>path</strong> (Optional[Path], optional):\n_description_, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">detect_beep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.session_import_config", "modulename": "patkit.data_import.session_import_config", "kind": "module", "doc": "<p>Facilities for reading session import configuration.</p>\n"}, {"fullname": "patkit.data_import.session_import_config.DatasourceValidator", "modulename": "patkit.data_import.session_import_config", "qualname": "DatasourceValidator", "kind": "class", "doc": "<p>Validate yaml representing a Datasource.</p>\n", "bases": "strictyaml.scalar.ScalarValidator"}, {"fullname": "patkit.data_import.session_import_config.DatasourceValidator.validate_scalar", "modulename": "patkit.data_import.session_import_config", "qualname": "DatasourceValidator.validate_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.session_import_config.load_session_config", "modulename": "patkit.data_import.session_import_config", "qualname": "load_session_config", "kind": "function", "doc": "<p>Read a Session config file from filepath.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_root</strong> (Path):\nPath to the root directory for the data. If all data is in the same\ndirectory, this is that directory. Otherwise, this is the deepest\ncommon path among data types.</li>\n<li><strong>filepath</strong> (Path | str):\nPath or str to the Session import configuration file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[PathStructure, SessionConfig]</strong>: A tuple of PathStructure and SessionConfig</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_root</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SessionConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.spline_import_config", "modulename": "patkit.data_import.spline_import_config", "kind": "module", "doc": "<p>How to load and validate spline import configuration files.</p>\n"}, {"fullname": "patkit.data_import.spline_import_config.CoordinateSystemValidator", "modulename": "patkit.data_import.spline_import_config", "qualname": "CoordinateSystemValidator", "kind": "class", "doc": "<p>Validate yaml representing a CoordinateType.</p>\n", "bases": "strictyaml.scalar.ScalarValidator"}, {"fullname": "patkit.data_import.spline_import_config.CoordinateSystemValidator.validate_scalar", "modulename": "patkit.data_import.spline_import_config", "qualname": "CoordinateSystemValidator.validate_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.spline_import_config.SplineMetaValidator", "modulename": "patkit.data_import.spline_import_config", "qualname": "SplineMetaValidator", "kind": "class", "doc": "<p>Validate yaml representing a Spline's meta columns.</p>\n", "bases": "strictyaml.scalar.ScalarValidator"}, {"fullname": "patkit.data_import.spline_import_config.SplineMetaValidator.validate_scalar", "modulename": "patkit.data_import.spline_import_config", "qualname": "SplineMetaValidator.validate_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.spline_import_config.DataColumnValidator", "modulename": "patkit.data_import.spline_import_config", "qualname": "DataColumnValidator", "kind": "class", "doc": "<p>Validate yaml representing a Spline's data columns.</p>\n", "bases": "strictyaml.scalar.ScalarValidator"}, {"fullname": "patkit.data_import.spline_import_config.DataColumnValidator.validate_scalar", "modulename": "patkit.data_import.spline_import_config", "qualname": "DataColumnValidator.validate_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.spline_import_config.make_spline_config", "modulename": "patkit.data_import.spline_import_config", "qualname": "make_spline_config", "kind": "function", "doc": "<p>Construct a SplineConfig out of a dict read by <code>load_spline_config</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>raw_config</strong> (dict):\nThe dict</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>SplineConfig</strong>: The new SplineConfig.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">raw_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SplineConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.spline_import_config.load_spline_config", "modulename": "patkit.data_import.spline_import_config", "qualname": "load_spline_config", "kind": "function", "doc": "<p>Read a spline config file from filepath.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong> (Union[Path, str]):\nPath or str to the spline import configuration file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>SplineImportConfig</strong>: The loaded configuration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SplineConfig</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.three_dim_ultrasound", "modulename": "patkit.data_import.three_dim_ultrasound", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.data_import.three_dim_ultrasound.read_3D_meta_from_mat_file", "modulename": "patkit.data_import.three_dim_ultrasound", "qualname": "read_3D_meta_from_mat_file", "kind": "function", "doc": "<p>Read a RASL .mat file and return relevant contents as a dict.</p>\n\n<p>Positional argument:\nmat_file -- either a pathlib Path object representing the .mat \n    file or a string of the same.</p>\n\n<p>Returns -- an array of dicts that contain the following fields:\n    'trial_number': number of the recording within this session,\n    'prompt': prompt displayed to the participant,\n    'date_and_time': a datetime object of the time recording \n        started, and\n    'dat_filename': string representing the name of the .dat \n        sound file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.three_dim_ultrasound.generateMeta", "modulename": "patkit.data_import.three_dim_ultrasound", "qualname": "generateMeta", "kind": "function", "doc": "<p>Parse a RASL .mat file's rows and return relevant contents as a dict.</p>\n\n<p>Positional argument:\nmat_file -- either a pathlib Path object representing the .mat\n    file or a string of the same.</p>\n\n<p>Returns -- an array of dicts that contain the following fields:\n    'trial_number': number of the recording within this session,\n    'prompt': prompt displayed to the participant,\n    'date_and_time': a datetime object of the time recording\n        started, and\n    'dat_filename': string representing the name of the .dat\n        sound file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rows</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.three_dim_ultrasound.add_rasl_3D_ultrasound", "modulename": "patkit.data_import.three_dim_ultrasound", "qualname": "add_rasl_3D_ultrasound", "kind": "function", "doc": "<p>Create a RawUltrasound Modality and add it to the Recording.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_import.video", "modulename": "patkit.data_import.video", "kind": "module", "doc": "<p>Read and add a video Modality to Recordings.</p>\n"}, {"fullname": "patkit.data_import.video.add_video", "modulename": "patkit.data_import.video", "qualname": "add_video", "kind": "function", "doc": "<p>Create a RawUltrasound Modality and add it to the Recording.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording</strong> (Recording):\n_description_</li>\n<li><strong>preload</strong> (bool, optional):\nShould we load the data when creating the modality or not. Defaults to\nFalse to prevent massive memory consumption. See also error below.</li>\n<li><strong>path</strong> (Optional[Path], optional):\n_description_, by default None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: Preloading video data has not been implemented yet. If you really,\nreally want to, this is the function where to do that.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">datasource</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">DatasourceNames</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_loader", "modulename": "patkit.data_loader", "kind": "module", "doc": "<p>Import or load a Session from a directory.</p>\n"}, {"fullname": "patkit.data_loader.load_data", "modulename": "patkit.data_loader", "qualname": "load_data", "kind": "function", "doc": "<p>Handle loading data from individual files or a previously saved session.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>configuration</strong> (Configuration):\npatkit configuration.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Session</strong>: The generated Session object with the exclusion list applied.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">configuration</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">Configuration</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_loader.read_recorded_session_from_dir", "modulename": "patkit.data_loader", "qualname": "read_recorded_session_from_dir", "kind": "function", "doc": "<p>Read recorded data from a directory.</p>\n\n<p>This function tries to guess which importer to use.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recorded_data_path</strong> (Path):\nPath to the recorded data.</li>\n<li><strong>detect_beep</strong> (bool, optional):\nShould the 1kHz beep detection be run on audio data, by default False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Session</strong>: The Session object containing the recorded data. Derived data should be\nadded with a separate function call.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: RASL data is not yet loadable.</li>\n<li><strong>NotImplementedError</strong>: Unrecognised data sources will raise an error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recorded_data_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">detect_beep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_processor", "modulename": "patkit.data_processor", "kind": "module", "doc": "<p>Process data: Add metrics and statistics.</p>\n\n<p>This is the mechanism for avoiding reading and re-reading raw data like\nultrasound or video data that should only be read once, processed in as many\nways as needed, and then expunged from memory to avoid running out of memory.</p>\n"}, {"fullname": "patkit.data_processor.Operation", "modulename": "patkit.data_processor", "qualname": "Operation", "kind": "class", "doc": "<p>An operation to be applied to a Modality with given arguments.</p>\n"}, {"fullname": "patkit.data_processor.Operation.__init__", "modulename": "patkit.data_processor", "qualname": "Operation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">processing_function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "patkit.data_processor.Operation.processing_function", "modulename": "patkit.data_processor", "qualname": "Operation.processing_function", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable"}, {"fullname": "patkit.data_processor.Operation.modality", "modulename": "patkit.data_processor", "qualname": "Operation.modality", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.data_structures.data_structures.Modality"}, {"fullname": "patkit.data_processor.Operation.arguments", "modulename": "patkit.data_processor", "qualname": "Operation.arguments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "patkit.data_processor.process_modalities", "modulename": "patkit.data_processor", "qualname": "process_modalities", "kind": "function", "doc": "<p>Apply processing functions to Modalities.</p>\n\n<p>Arguments: \nrecordings is a list of Recordings to be processed. The results of applying\n    the functions get added to the Recordings as new Modalities and\n    Statistics.\nprocessing_functions is a dictionary containing three keys:1\n    'function' is a callable used to process a Recording,\n    'modality' is the Modality passed to the function, and \n    'arguments' is a dict of arguments for the function.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">processing_functions</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_processor.process_statistics_in_recordings", "modulename": "patkit.data_processor", "qualname": "process_statistics_in_recordings", "kind": "function", "doc": "<p>Apply processing functions to Statistics.</p>\n\n<p>Arguments:\nrecordings is a list of Recordings to be processed. The results of applying\n    the functions get added to the Recordings as new Statistics.\nprocessing_functions is a dictionary containing three keys:\n    'function' is a callable used to process a Recording,\n    'statistic' is the Statistic passed to the function, and\n    'arguments' is a dict of arguments for the function.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">processing_functions</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_processor.multi_process_data", "modulename": "patkit.data_processor", "qualname": "multi_process_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_processor</span><span class=\"o\">.</span><span class=\"n\">Operation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures", "modulename": "patkit.data_structures", "kind": "module", "doc": "<p>patkit's core datastructures.</p>\n\n<p>This module contains some abstract classes that are used as base classes for\npatkit's datastructures and are not meant to be directly inherited from.</p>\n"}, {"fullname": "patkit.data_structures.base_classes", "modulename": "patkit.data_structures.base_classes", "kind": "module", "doc": "<p>Base classes of the core datastructures.</p>\n"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject", "kind": "class", "doc": "<p>Abstract base class for patkit data objects.</p>\n\n<p>Almost no class should directly inherit from this class. Exceptions are\nAbstractDataContainer and AbstractData. The latter is the abstract baseclass for\nModality and Statistic and the former for all data base classes: Recording,\nSession, DataSet and any others that contain either DataContainers and/or\nAbstractDataContainers.</p>\n", "bases": "abc.ABC"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.container", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.container", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.name", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.name", "kind": "variable", "doc": "<p>Name of this instance.</p>\n\n<p>In most cases name is supposed to be implemented with the following\nidiom:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">return</span> <span class=\"n\">NAME_OF_THIS_CLASS</span><span class=\"o\">.</span><span class=\"n\">generate_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>For example, for PD:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">return</span> <span class=\"n\">PD</span><span class=\"o\">.</span><span class=\"n\">generate_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name of this instance.</li>\n</ul>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.file_info", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.file_info", "kind": "variable", "doc": "<p>The paths and filenames of this AbstractDataObject as a FileInformation object.</p>\n\n<p>NOTE: Regularly you should not need to access this directly. Instead,\nuse the <code>[recorded|patkit]_path</code>, <code>[recorded|patkit]_data_file</code>, and\n<code>[recorded|patkit]_meta_file</code> properties.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>FileInformation</strong>: The FileInformation.</li>\n</ul>\n", "annotation": ": patkit.data_structures.metadata_classes.FileInformation"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.metadata", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.metadata", "kind": "variable", "doc": "<p>Metadata of this AbstractDataObject.</p>\n\n<p>This will be of appropriate type for the subclasses and has been hidden\nbehind a property to make it possible to change the internal\nrepresentation without breaking the API.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>PatkitBaseModel</strong>: The meta data as a Pydantic model.</li>\n</ul>\n", "annotation": ": patkit.external_class_extensions.base_model_extensions.PatkitBaseModel"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.recorded_data_path", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.recorded_data_path", "kind": "variable", "doc": "<p>Path of the recorded raw data file of this AbstractDataObject.</p>\n\n<p>May not be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: The path or None if no path was set.</li>\n</ul>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.recorded_data_name", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.recorded_data_name", "kind": "variable", "doc": "<p>Name the recorded raw data file of this AbstractDataObject.</p>\n\n<p>May not be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The name or None if no name was set.</li>\n</ul>\n", "annotation": ": str | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.recorded_meta_path", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.recorded_meta_path", "kind": "variable", "doc": "<p>Path to the recorded meta data file of this AbstractDataObject.</p>\n\n<p>This file will exist only for some recorded data. For example, wav\nfiles do not have a corresponding recorded meta data file. </p>\n\n<p>This file may also cover more than one recorded data file - usually a\nwhole Session if not just a single recorded data file.</p>\n\n<p>May not be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: The path or None if no path was set.</li>\n</ul>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.recorded_meta_name", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.recorded_meta_name", "kind": "variable", "doc": "<p>Name the recorded meta data file of this AbstractDataObject.</p>\n\n<p>May not be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The name or None if no name was set.</li>\n</ul>\n", "annotation": ": str | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.recorded_path", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.recorded_path", "kind": "variable", "doc": "<p>Path to the recorded raw data files of this AbstractDataObject.</p>\n\n<p>This path will exist only for recorded data.</p>\n\n<p>May not be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: The path or None if no path was set.</li>\n</ul>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.patkit_data_path", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.patkit_data_path", "kind": "variable", "doc": "<p>Path to the patkit (derived) data file of this AbstractDataObject.</p>\n\n<p>This file will exist only for saved derived data.</p>\n\n<p>May be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: The path or None if no path was set.</li>\n</ul>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.patkit_data_name", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.patkit_data_name", "kind": "variable", "doc": "<p>Name the patkit data file of this AbstractDataObject.</p>\n\n<p>May be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The name or None if no name was set.</li>\n</ul>\n", "annotation": ": str | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.patkit_meta_path", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.patkit_meta_path", "kind": "variable", "doc": "<p>Path to the patkit meta data file of this AbstractDataObject.</p>\n\n<p>After saving this file will exist even for recorded data.</p>\n\n<p>May be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: The path or None if no path was set.</li>\n</ul>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.patkit_meta_name", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.patkit_meta_name", "kind": "variable", "doc": "<p>Name the patkit meta data file of this AbstractDataObject.</p>\n\n<p>May be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The name or None if no name was set.</li>\n</ul>\n", "annotation": ": str | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.patkit_path", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.patkit_path", "kind": "variable", "doc": "<p>Path to the patkit files of this AbstractDataObject.</p>\n\n<p>May be overwritten.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: The path or None if no path was set.</li>\n</ul>\n", "annotation": ": pathlib._local.Path | None"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.is_fully_initialised", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.is_fully_initialised", "kind": "variable", "doc": "<p>Check if this AbstractData has been fully initialised.</p>\n\n<p>This property will be false, if any required fields of the\nAbstractData are None.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if this AbstractData is fully initialised.</li>\n</ul>\n", "annotation": ": bool"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataObject.get_meta", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataObject.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation. </p>\n\n<p>Subclasses should override this method if any of their fields require\nspecial handling such as derived Enums needing to be converted to plain\ntext etc. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataContainer", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataContainer", "kind": "class", "doc": "<p>Abstract baseclass for Recording, Session, and DataSet. </p>\n\n<p>This class collects behaviors that are shared by the data base classes i.e.\nclasses which collect DataContainers and/or AbstractDataContainers.</p>\n", "bases": "AbstractDataObject"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataContainer.__init__", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataContainer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">external_class_extensions</span><span class=\"o\">.</span><span class=\"n\">base_model_extensions</span><span class=\"o\">.</span><span class=\"n\">PatkitBaseModel</span>,</span><span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">AbstractDataContainer</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">statistics</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">Statistic</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataContainer.statistics", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataContainer.statistics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataContainer.name", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataContainer.name", "kind": "variable", "doc": "<p>Name of this instance.</p>\n\n<p>AbstractDataContainers get their names mainly from the file system. DataSets\nare named after the root directory name, Sessions for the session\ndirectories and Trials for the trial file names. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The name as string.</li>\n</ul>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.base_classes.AbstractDataContainer.add_statistic", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractDataContainer.add_statistic", "kind": "function", "doc": "<p>Add a Statistic to this Session.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>statistic</strong> (Statistic):\nStatistic to be added.</li>\n<li><strong>replace</strong> (bool, optional):\nShould we replace any existing Statistic by the same name, by\ndefault False</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>OverwriteError</strong>: In case replace was False and there exists already a Statistic with\nthe same name in this Session.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">statistic</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">Statistic</span>,</span><span class=\"param\">\t<span class=\"n\">replace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.base_classes.AbstractData", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractData", "kind": "class", "doc": "<p>Abstract baseclass for Modality and Statistic. </p>\n\n<p>This class collects behaviors shared by the classes that contain data:\nModalities contain time varying data and Statistics contain time\nindependent data.</p>\n", "bases": "AbstractDataObject"}, {"fullname": "patkit.data_structures.base_classes.AbstractData.generate_name", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractData.generate_name", "kind": "function", "doc": "<p>Abstract version of generating a RecordingMetric name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">external_class_extensions</span><span class=\"o\">.</span><span class=\"n\">base_model_extensions</span><span class=\"o\">.</span><span class=\"n\">PatkitBaseModel</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.base_classes.AbstractData.name", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractData.name", "kind": "variable", "doc": "<p>Name of this instance.</p>\n\n<p>In most cases name is supposed to be overridden with the following\nidiom:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">return</span> <span class=\"n\">NAME_OF_THIS_CLASS</span><span class=\"o\">.</span><span class=\"n\">generate_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>For example, for PD:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">return</span> <span class=\"n\">PD</span><span class=\"o\">.</span><span class=\"n\">generate_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name of this instance.</li>\n</ul>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.base_classes.AbstractData.name_underscored", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractData.name_underscored", "kind": "variable", "doc": "<p>Name of this instance with spaces replaced with underscores.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name of this instance with spaces replaced with underscores.</li>\n</ul>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.base_classes.AbstractData.data", "modulename": "patkit.data_structures.base_classes", "qualname": "AbstractData.data", "kind": "variable", "doc": "<p>The data contained in this AbstractData as a numpy ndarray.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.data_structures.base_classes.Statistic", "modulename": "patkit.data_structures.base_classes", "qualname": "Statistic", "kind": "class", "doc": "<p>Abstract baseclass for statistics generated from members of a container. </p>\n\n<p>Specifically Statistics are time independent data while Modalities are\ntime-dependent data.</p>\n", "bases": "AbstractData"}, {"fullname": "patkit.data_structures.base_classes.Statistic.__init__", "modulename": "patkit.data_structures.base_classes", "qualname": "Statistic.__init__", "kind": "function", "doc": "<p>Build a Statistic.       </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metadata</strong> (PatkitBaseModel):\nParameters used in calculating this Statistic.</li>\n<li><strong>container</strong> (AbstractDataContainer):\nThe container of this Statistic. Usually this will be the object whose\ncontents this Statistic was calculated on. By default, None, to\nfacilitate mass generation and setting the container after wards.</li>\n<li><strong>file_info</strong> (FileInformation):\nThe patkit load path and names for this Statistic. Recorded path\nand names should usually be empty. Defaults to None, when the\nStatistic hasn't been saved yet.</li>\n<li><strong>parsed_data</strong> (Optional[np.ndarray], optional):\nthe actual statistic, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">external_class_extensions</span><span class=\"o\">.</span><span class=\"n\">base_model_extensions</span><span class=\"o\">.</span><span class=\"n\">PatkitBaseModel</span>,</span><span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">AbstractDataContainer</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.data_structures.base_classes.Statistic.generate_name", "modulename": "patkit.data_structures.base_classes", "qualname": "Statistic.generate_name", "kind": "function", "doc": "<p>Abstract version of generating a Statistic name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">StatisticMetaData</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.base_classes.Statistic.data", "modulename": "patkit.data_structures.base_classes", "qualname": "Statistic.data", "kind": "variable", "doc": "<p>The data contained in this AbstractData as a numpy ndarray.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.data_structures.data_structures", "modulename": "patkit.data_structures.data_structures", "kind": "module", "doc": "<p>PATKIT's main datastructures.</p>\n"}, {"fullname": "patkit.data_structures.data_structures.Manifest", "modulename": "patkit.data_structures.data_structures", "qualname": "Manifest", "kind": "class", "doc": "<p>Manifest is a list of Scenario paths as strings.</p>\n", "bases": "collections.UserList"}, {"fullname": "patkit.data_structures.data_structures.Manifest.__init__", "modulename": "patkit.data_structures.data_structures", "qualname": "Manifest.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.data_structures.data_structures.Manifest.read_manifest", "modulename": "patkit.data_structures.data_structures", "qualname": "Manifest.read_manifest", "kind": "function", "doc": "<p>Static method for reading a Manifest files contents.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path):\nPath of the file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str] | None</strong>: Either the contents of the file or None if the file was empty.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Manifest.path", "modulename": "patkit.data_structures.data_structures", "qualname": "Manifest.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.data_structures.Manifest.scenarios", "modulename": "patkit.data_structures.data_structures", "qualname": "Manifest.scenarios", "kind": "variable", "doc": "<p>The contents of this Manifest as a list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: The contents.</li>\n</ul>\n", "annotation": ": list[str]"}, {"fullname": "patkit.data_structures.data_structures.Manifest.save", "modulename": "patkit.data_structures.data_structures", "qualname": "Manifest.save", "kind": "function", "doc": "<p>Write this manifest into its file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Session", "modulename": "patkit.data_structures.data_structures", "qualname": "Session", "kind": "class", "doc": "<p>The metadata and Recordings of a recording session.</p>\n\n<p>This class behaves exactly like a list of Recordings with some extra\nfields. While some legacy code may be left behind, the preferred idiom for\niterating over the recordings is <code>for recording in recording_session:</code>.</p>\n\n<p>Sessions can also hold aggregate data in the form of Statistics.</p>\n", "bases": "patkit.data_structures.base_classes.AbstractDataContainer, collections.UserList"}, {"fullname": "patkit.data_structures.data_structures.Session.__init__", "modulename": "patkit.data_structures.data_structures", "qualname": "Session.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SessionConfig</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">statistics</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">Statistic</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.data_structures.data_structures.Session.config", "modulename": "patkit.data_structures.data_structures", "qualname": "Session.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.data_structures.Session.recordings", "modulename": "patkit.data_structures.data_structures", "qualname": "Session.recordings", "kind": "variable", "doc": "<p>Property to access the list of Recordings directly.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[Recording]</strong>: The list of this Session's Recordings.</li>\n</ul>\n", "annotation": ": list[patkit.data_structures.data_structures.Recording]"}, {"fullname": "patkit.data_structures.data_structures.Recording", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording", "kind": "class", "doc": "<p>A Recording is a dictionary of 0-n synchronised Modalities.</p>\n\n<p>Adding modalities can be done by <code>recording[name] = modality</code>, but\n<code>recording.add_modality</code> is preferred as a safer way which checks for\noverwriting. The reason Recording is a dictionary is to make it possible to\niterate with the idiom <code>for modality_name in recording</code>.</p>\n\n<p>The recording also contains the non-modality-specific metadata\n(participant, speech content, etc.) as a dictionary, as well as the\ntextgrid for the whole recording.</p>\n\n<p>In general, inheriting should not be necessary, but if it is, inheriting\nclasses should call <code>self._read_textgrid()</code> after calling\n<code>super.__init__()</code> (with correct arguments) and doing any updates to\n<code>self.meta['textgrid']</code> that are necessary.</p>\n", "bases": "patkit.data_structures.base_classes.AbstractDataContainer, collections.UserDict"}, {"fullname": "patkit.data_structures.data_structures.Recording.__init__", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.__init__", "kind": "function", "doc": "<p>Construct a mainly empty recording without modalities.</p>\n\n<p>Modalities and annotations get added after constructions with their own\nadd_[modality or annotation] functions.</p>\n\n<p>NOTE: <code>after_modalities_init</code> should be called on each new Recording\nafter modalities have been loaded. It ensures that there is at least a\nminimal TextGrid in place to facilitate GUI functions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metadata</strong> (RecordingMetaData):\nSome of the contents of the meta data are available as properties.</li>\n<li><strong>excluded</strong> (bool, optional):\n_description_, by default False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">RecordingMetaData</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">excluded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "patkit.data_structures.data_structures.Recording.container", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.container", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.data_structures.data_structures.Session"}, {"fullname": "patkit.data_structures.data_structures.Recording.excluded", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.excluded", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.data_structures.Recording.textgrid_path", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.textgrid_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.data_structures.Recording.textgrid", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.textgrid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.data_structures.Recording.patgrid", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.patgrid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.data_structures.Recording.annotations", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.annotations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.data_structures.data_structures.Recording.modalities", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.modalities", "kind": "variable", "doc": "<p>Dictionary of the modalities of this Recording.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str, Modality]</strong>: The dictionary of the Modalities.</li>\n</ul>\n", "annotation": ": dict[str, patkit.data_structures.data_structures.Modality]"}, {"fullname": "patkit.data_structures.data_structures.Recording.basename", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.basename", "kind": "variable", "doc": "<p>Filename of this Recording without extensions.</p>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.data_structures.Recording.identifier", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.identifier", "kind": "function", "doc": "<p>Generate a unique identifier for this Recording from metadata.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: prompt followed by time of recording.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Recording.exclude", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.exclude", "kind": "function", "doc": "<p>Set <code>self.excluded</code> to True with a method.</p>\n\n<p>This method exists to facilitate list comprehensions being used\nfor excluding recordings e.g. \n[recording.exclude() for recording in recordings if in some_list].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Recording.write_textgrid", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.write_textgrid", "kind": "function", "doc": "<p>Save this recording's textgrid to file.</p>\n\n<p>Keyword argument:\nfilepath -- string specifying the path and name of the \n    file to be written. If filepath is not specified, this \n    method will try to overwrite the textgrid specified in \n    self.meta.</p>\n\n<pre><code>If filepath is specified, subsequent calls to this \nfunction will write into the new path rather than \nthe original one.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Recording.add_modality", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.add_modality", "kind": "function", "doc": "<p>This method adds a new Modality object to the Recording.</p>\n\n<p>Replacing a modality has to be specified otherwise if a\nModality with the same name already exists in this Recording\nand the <code>replace</code> argument is not True, an Error is raised.</p>\n\n<p>Arguments:\nmodality -- object of type Modality to be added to \n    this Recording.</p>\n\n<p>Keyword arguments:\nreplace -- a boolean indicating if an existing Modality should\n    be replaced.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">replace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Recording.after_modalities_init", "modulename": "patkit.data_structures.data_structures", "qualname": "Recording.after_modalities_init", "kind": "function", "doc": "<p>Ensure everything is properly in place after loading modalities.</p>\n\n<p>Currently, this is only used to create placeholder TextGrids when\nneeded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Modality", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality", "kind": "class", "doc": "<p>Abstract superclass for all data Modality classes.</p>\n\n<p>Any annotations associated with a Modality instance are accessible directly\nby <code>modality[annotation_type]</code>, because a Modality is also a OrderedDict of\nits Annotations.</p>\n", "bases": "patkit.data_structures.base_classes.AbstractData, collections.OrderedDict"}, {"fullname": "patkit.data_structures.data_structures.Modality.__init__", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.__init__", "kind": "function", "doc": "<p>Modality constructor.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.</p>\n\n<p>Keyword arguments:\ndata_path -- path of the data file\nload_path -- path of data when saved by patkit - both data and metadata\nparent -- the Modality this one was derived from. None means this \n    is a recorded data Modality.\nparsed_data -- ModalityData object containing waveform, sampling rate,\n    and either timevector and/or time_offset. \nparsed_data -- a ModalityData object containing parsed data \n    that's been either read from file, loaded from file \n    (previously saved by patkit), or calculated from another modality.\n    Providing a timevector \n    overrides any time_offset value given, but in absence of a \n    timevector the time_offset will be applied on reading the data \n    from file. \ntime_offset -- offset of this modality in relation to the Recordings\n    baseline - usually the audio track. This will be ignored if \n    parsed_data exists and effectively overridden by \n    parsed_data.timevector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">point_annotations</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">AnnotationType</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">PointAnnotations</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.data_structures.data_structures.Modality.container", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.container", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.data_structures.data_structures.Recording"}, {"fullname": "patkit.data_structures.data_structures.Modality.generate_name", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.generate_name", "kind": "function", "doc": "<p>Abstract version of generating a Modality name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Modality.excluded", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.excluded", "kind": "variable", "doc": "<p>Boolean property for excluding this Modality from processing.</p>\n\n<p>Setting this to <code>True</code> will result in the whole Recording being\nexcluded by setting <code>self.parent.excluded = True</code>.</p>\n", "annotation": ": None"}, {"fullname": "patkit.data_structures.data_structures.Modality.annotations", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.annotations", "kind": "variable", "doc": "<p>Property which is the annotations dictionary of this Modality.</p>\n\n<p>This is currently the Modality itself.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[AnnotationType, PointAnnotations]</strong>: The dictionary.</li>\n</ul>\n", "annotation": ": dict[patkit.constants.AnnotationType, patkit.data_structures.metadata_classes.PointAnnotations]"}, {"fullname": "patkit.data_structures.data_structures.Modality.recording", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.recording", "kind": "variable", "doc": "<p>This modality's container available also with this alias for ease of use.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Recording</strong>: The Recording which contains this Modality.</li>\n</ul>\n", "annotation": ": patkit.data_structures.data_structures.Recording | None"}, {"fullname": "patkit.data_structures.data_structures.Modality.add_point_annotations", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.add_point_annotations", "kind": "function", "doc": "<p>Add the PointAnnotations object to this Modality.</p>\n\n<p>If there were previous annotations in this Modality with the same\nAnnotationType, they will be overwritten.</p>\n\n<p>To add single annotation points, use the add_annotation method in\nPointAnnotations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>point_annotations</strong> (PointAnnotations):\nThe annotations to be added.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">point_annotations</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">PointAnnotations</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.data_structures.Modality.modality_data", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.modality_data", "kind": "variable", "doc": "<p>The data of this Modality as a NumPy array. </p>\n\n<p>The data refers to the actual data this modality represents\nand for DerivedModality it is the result of running the \nmodality's algorithm on the original data.</p>\n\n<p>The dimensions of the array are in the \norder of [time, others]</p>\n\n<p>If this modality is not preloaded, accessing this property will\ncause data to be loaded on the fly _and_ saved in memory. To \nrelease the memory, assign None to this Modality's data.</p>\n", "annotation": ": patkit.data_structures.metadata_classes.ModalityData"}, {"fullname": "patkit.data_structures.data_structures.Modality.data", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.data", "kind": "variable", "doc": "<p>The data of this Modality as a NumPy array. </p>\n\n<p>The data refers to the actual data this modality represents\nand for DerivedModality it is the result of running the \nmodality's algorithm on the original data.</p>\n\n<p>The dimensions of the array are in the \norder of [time, others]</p>\n\n<p>If this modality is not preloaded, accessing this property will\ncause data to be loaded on the fly _and_ saved in memory. To \nrelease the memory, assign None to this Modality's data.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.data_structures.data_structures.Modality.sampling_rate", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.sampling_rate", "kind": "variable", "doc": "<p>Sampling rate of this Modality in Hz.</p>\n", "annotation": ": float"}, {"fullname": "patkit.data_structures.data_structures.Modality.parent_name", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.parent_name", "kind": "variable", "doc": "<p>Name of the Modality this Modality was derived from, if any.</p>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.data_structures.Modality.time_offset", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.time_offset", "kind": "variable", "doc": "<p>The time offset of this modality.</p>\n\n<p>Assigning a value to this property is implemented so that\n<code>self.timevector[0]</code> stays equal to <code>self._time_offset</code>.</p>\n\n<p>If shape of the timevector were to change then also shape of the data\nshould change. Unlikely that we'd try to deal that in any other way but\nto create a new Modality or even Recording.</p>\n"}, {"fullname": "patkit.data_structures.data_structures.Modality.time_precision", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.time_precision", "kind": "variable", "doc": "<p>Timevector precision: the maximum of absolute deviations.</p>\n\n<p>Essentially this means that we are guesstimating the timevector to be\nno more precise than the largest deviation from the average timestep.</p>\n", "annotation": ": float"}, {"fullname": "patkit.data_structures.data_structures.Modality.timevector", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.timevector", "kind": "variable", "doc": "<p>The timevector corresponding to <code>self.data</code> as a NumPy array.</p>\n\n<p>If the data has not been previously loaded, accessing this \nproperty will cause data to be loaded on the fly _and_ saved \nin memory. To release the memory, assign None to this \nModality's data. If the data has been previously \nloaded and after that released, the timevector still persists and<br />\naccessing it does not trigger a new loading operation.</p>\n\n<p>Assigning a value to this property is implemented so \nthat <code>self.timevector[0]</code> stays equal to <code>self._timeOffset</code>.</p>\n"}, {"fullname": "patkit.data_structures.data_structures.Modality.min_time", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.min_time", "kind": "variable", "doc": "<p>Minimum time stamp.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The minimum time stamp in seconds.</li>\n</ul>\n", "annotation": ": float"}, {"fullname": "patkit.data_structures.data_structures.Modality.max_time", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.max_time", "kind": "variable", "doc": "<p>Maximum time stamp.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The maximum time stamp in seconds.</li>\n</ul>\n", "annotation": ": float"}, {"fullname": "patkit.data_structures.data_structures.Modality.is_derived", "modulename": "patkit.data_structures.data_structures", "qualname": "Modality.is_derived", "kind": "variable", "doc": "<p>Is this Modality a result of processing another.</p>\n\n<p>This cannot be set from the outside.</p>\n", "annotation": ": bool"}, {"fullname": "patkit.data_structures.metadata_classes", "modulename": "patkit.data_structures.metadata_classes", "kind": "module", "doc": "<p>Meta data classes for use by core data structures.</p>\n"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation", "kind": "class", "doc": "<p>File and Path information for patkit DataObjects. </p>\n\n<p>recorded_data_file: str | None = None\n    Name of the file containing the raw recorded data.\nrecorded_meta_file: str | None = None\n    Name of the file containing the meta data of the recording.\nrecorded_path : Path | None = None\n    Path to the recorded data of this DataObject - if there is original\n    recorded data associated with this instance/type. Defaults to None\npatkit_data_file : str | None\n    Name of the patkit data file, if it exists. Defaults to None.\npatkit_meta_file : str | None\n    Name of the patkit meta file, if it exists. Defaults to None.\npatkit_path : Path | None\n    Path to the saved patkit data, if it exists. Defaults to None.</p>\n"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.__init__", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recorded_data_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recorded_meta_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recorded_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">patkit_data_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">patkit_meta_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">patkit_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.recorded_data_file", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.recorded_data_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.recorded_meta_file", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.recorded_meta_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.recorded_path", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.recorded_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None", "default_value": "None"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.patkit_data_file", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.patkit_data_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.patkit_meta_file", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.patkit_meta_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.patkit_path", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.patkit_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path | None", "default_value": "None"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.basename", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.basename", "kind": "variable", "doc": "<p>Name of either the recorded or patkit data.</p>\n\n<p>Recorded takes precedence if for some reason both exist.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name without suffix</li>\n</ul>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.metadata_classes.FileInformation.basepath", "modulename": "patkit.data_structures.metadata_classes", "qualname": "FileInformation.basepath", "kind": "variable", "doc": "<p>Path of the recorded or patkit data without the suffix.</p>\n\n<p>This is a concatenation of the local path part (does not contain e.g. a\nModality's parent's path) and the name with the suffix(es) dropped.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: Data Path without suffix.</li>\n</ul>\n", "annotation": ": pathlib._local.Path"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityData", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityData", "kind": "class", "doc": "<p>Data passed from Modality generation into Modality.</p>\n\n<p>None of the fields are optional. This class represents already loaded data.</p>\n\n<p>Axes order for the data field is [time, coordinate axes and datatypes,\ndata points] and further structure. For example stereo audio data would be\n[time, channels] or just [time] for mono audio. For a more complex example,\nsplines from AAA have [time, x-y-confidence, spline points] or [time,\nr-phi-confidence, spline points] for data in polar coordinates.</p>\n"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityData.__init__", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">sampling_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">timevector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityData.data", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityData.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityData.sampling_rate", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityData.sampling_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityData.timevector", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityData.timevector", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityMetaData", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityMetaData", "kind": "class", "doc": "<p>Baseclass of Modalities' metadata classes.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.PatkitBaseModel"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityMetaData.parent_name", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityMetaData.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityMetaData.is_downsampled", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityMetaData.is_downsampled", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityMetaData.downsampling_ratio", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityMetaData.downsampling_ratio", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Annotated[int, Gt(gt=0)], str, NoneType]"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityMetaData.timestep_matched_downsampling", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityMetaData.timestep_matched_downsampling", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.data_structures.metadata_classes.ModalityMetaData.model_config", "modulename": "patkit.data_structures.metadata_classes", "qualname": "ModalityMetaData.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations", "kind": "class", "doc": "<p>Time point annotations for a Modality.</p>\n\n<p>For each modality there should be only one of these for each kind of\nannotation type. </p>\n\n<p>annotation_type : AnnotationType\n    unique identifier for the annotation type\nindeces : np.ndarray\n    indeces of the annotation points. <code>modality_data.data[indeces[i]]</code> and\n    <code>modality_data.timevector[indeces[i]]</code> correspond to the annotation at\n    <code>i</code>.\ntimes : np.ndarray \n    timestamps of the annotation points\ngenerating_parameters : dict \n    the function call arguments and other parameters used in generating\n    these annotations.\nproperties : dict\n    a dictionary containing arrays of each of the annotation properties\n    expected for this annotation type.</p>\n"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.__init__", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">annotation_type</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">AnnotationType</span>,</span><span class=\"param\">\t<span class=\"n\">indeces</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">times</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">generating_parameters</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">PointAnnotationParams</span>,</span><span class=\"param\">\t<span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.annotation_type", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.annotation_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.AnnotationType"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.indeces", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.indeces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.times", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.times", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.generating_parameters", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.generating_parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.PointAnnotationParams"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.properties", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.properties", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.add_annotation", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.add_annotation", "kind": "function", "doc": "<p>This method has not been implemented yet.</p>\n\n<p>Index and time should be mutually exclusive.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\nindex at which the annotation is to be added</li>\n<li><strong>time</strong> (float):\ntime at which the annotation is to be added</li>\n<li><strong>properties</strong> (dict):\nthe annotation properties that will be added to the arrays in this\nPointAnnotations' properties dict.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: This method has not been implemented yet.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.apply_lower_time_limit", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.apply_lower_time_limit", "kind": "function", "doc": "<p>Apply a lower time limit to the annotations.</p>\n\n<p>This removes the annotation points before the given time limit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_min</strong> (float):\nThe time limit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.metadata_classes.PointAnnotations.apply_upper_time_limit", "modulename": "patkit.data_structures.metadata_classes", "qualname": "PointAnnotations.apply_upper_time_limit", "kind": "function", "doc": "<p>Apply an upper time limit to the annotations.</p>\n\n<p>This removes the annotation points after the given time limit.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_max</strong> (float):\nThe time limit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.data_structures.metadata_classes.RecordingMetaData", "modulename": "patkit.data_structures.metadata_classes", "qualname": "RecordingMetaData", "kind": "class", "doc": "<p>Basic metadata that any Recording should reasonably have.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.PatkitBaseModel"}, {"fullname": "patkit.data_structures.metadata_classes.RecordingMetaData.prompt", "modulename": "patkit.data_structures.metadata_classes", "qualname": "RecordingMetaData.prompt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.metadata_classes.RecordingMetaData.time_of_recording", "modulename": "patkit.data_structures.metadata_classes", "qualname": "RecordingMetaData.time_of_recording", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "patkit.data_structures.metadata_classes.RecordingMetaData.participant_id", "modulename": "patkit.data_structures.metadata_classes", "qualname": "RecordingMetaData.participant_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.data_structures.metadata_classes.RecordingMetaData.model_config", "modulename": "patkit.data_structures.metadata_classes", "qualname": "RecordingMetaData.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.data_structures.metadata_classes.StatisticMetaData", "modulename": "patkit.data_structures.metadata_classes", "qualname": "StatisticMetaData", "kind": "class", "doc": "<p>Baseclass of Statistics' metadata classes.</p>\n", "bases": "patkit.external_class_extensions.base_model_extensions.PatkitBaseModel"}, {"fullname": "patkit.data_structures.metadata_classes.StatisticMetaData.parent_name", "modulename": "patkit.data_structures.metadata_classes", "qualname": "StatisticMetaData.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "patkit.data_structures.metadata_classes.StatisticMetaData.model_config", "modulename": "patkit.data_structures.metadata_classes", "qualname": "StatisticMetaData.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.errors", "modulename": "patkit.errors", "kind": "module", "doc": "<p>Error classes for patkit.</p>\n"}, {"fullname": "patkit.errors.patkitError", "modulename": "patkit.errors", "qualname": "patkitError", "kind": "class", "doc": "<p>Base class of patkit Errors.</p>\n", "bases": "builtins.Exception"}, {"fullname": "patkit.errors.MissingDataError", "modulename": "patkit.errors", "qualname": "MissingDataError", "kind": "class", "doc": "<p>Data requested from Modality but is unavailable.</p>\n\n<p>This Error signifies that a Modality was created without providing either a\npath to files to load or an algorithm for deriving the Modality from another\nModality.</p>\n", "bases": "patkitError"}, {"fullname": "patkit.errors.OverwriteError", "modulename": "patkit.errors", "qualname": "OverwriteError", "kind": "class", "doc": "<p>Modality or Statistic already exists in container.</p>\n", "bases": "patkitError"}, {"fullname": "patkit.errors.DimensionMismatchError", "modulename": "patkit.errors", "qualname": "DimensionMismatchError", "kind": "class", "doc": "<p>Trying to replace the data or timevector in a Modality with non-matching dtype, size, or shape.</p>\n", "bases": "patkitError"}, {"fullname": "patkit.errors.UnrecognisedNormError", "modulename": "patkit.errors", "qualname": "UnrecognisedNormError", "kind": "class", "doc": "<p>Did not have an implementation for requested norm.</p>\n", "bases": "patkitError"}, {"fullname": "patkit.errors.UltrasoundInterpolationError", "modulename": "patkit.errors", "qualname": "UltrasoundInterpolationError", "kind": "class", "doc": "<p>Interpolated ultrasound image could not be produced.</p>\n", "bases": "patkitError"}, {"fullname": "patkit.export", "modulename": "patkit.export", "kind": "module", "doc": "<p>Export functions for extracting parts of the data.</p>\n"}, {"fullname": "patkit.export.images", "modulename": "patkit.export.images", "kind": "module", "doc": "<p>Export various images.</p>\n\n<p>Raw and interpolated ultrasound frames, AggregateImages. and DistanceMatrices.</p>\n"}, {"fullname": "patkit.export.images.export_aggregate_image_and_meta", "modulename": "patkit.export.images", "qualname": "export_aggregate_image_and_meta", "kind": "function", "doc": "<p>Export AggregateImage to an image file and meta to a text file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image</strong> (AggregateImage):\nThe AggregateImage to be exported.</li>\n<li><strong>session</strong> (Session):\nSession the AggregateImage belongs to.</li>\n<li><strong>recording</strong> (Recording):\nRecording that the AggregateImage belongs to.</li>\n<li><strong>path</strong> (Path):\nPath to save the image and meta file.</li>\n<li><strong>image_format</strong> (str, optional):\nFile format to save the image in, by default \".png\"</li>\n<li><strong>interpolation_params</strong> (dict | None):\nDictionary of interpolation parameters to be passed to <code>to_fan_2d</code>, by\ndefault None. If none, export raw image instead.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">aggregate_image</span><span class=\"o\">.</span><span class=\"n\">AggregateImage</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">image_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">interpolation_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.images.export_distance_matrix_and_meta", "modulename": "patkit.export.images", "qualname": "export_distance_matrix_and_meta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">distance_matrix</span><span class=\"o\">.</span><span class=\"n\">DistanceMatrix</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">image_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.png&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.images.export_ultrasound_frame_and_meta", "modulename": "patkit.export.images", "qualname": "export_ultrasound_frame_and_meta", "kind": "function", "doc": "<p>Write ultrasound frame metadata to a human-readable text file.</p>\n\n<p>The purpose of this function is to generate a file documenting an extracted\nultrasound frame, so that it can be found again in its original context.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong> (str | Path):\nFilename or path for the ultrasound frame to export. Format is deduced\nfrom the file suffix.</li>\n<li><strong>session</strong> (Session):\nSession that the frame belongs to.</li>\n<li><strong>recording</strong> (Recording):\nRecording that the frame belongs to.</li>\n<li><strong>selection_index</strong> (int):\nIndex of the frame within the ultrasound video.</li>\n<li><strong>selection_time</strong> (float):\nTime in seconds of the frame within the <strong>recording</strong>. This is relative\nto what ever -- most likely the beginning of audio -- is being used as\nt=0s.</li>\n<li><strong>ultrasound</strong> (RawUltrasound):\nThe RawUltrasound from which a frame is to be exported.</li>\n<li><strong>image_format</strong> (str, optional):\nFile format to save the image in, by default \".png\"</li>\n<li><strong>interpolation_params</strong> (dict | None):\nDictionary of interpolation parameters to be passed to <code>to_fan_2d</code>, by\ndefault None. If none, export raw image instead.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">selection_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">selection_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">ultrasound</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">modalities</span><span class=\"o\">.</span><span class=\"n\">recorded_modalities</span><span class=\"o\">.</span><span class=\"n\">RawUltrasound</span>,</span><span class=\"param\">\t<span class=\"n\">image_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">interpolation_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.metadata", "modulename": "patkit.export.metadata", "kind": "module", "doc": "<p>Export various metadata.</p>\n"}, {"fullname": "patkit.export.metadata.export_aggregate_image_meta", "modulename": "patkit.export.metadata", "qualname": "export_aggregate_image_meta", "kind": "function", "doc": "<p>Write ultrasound frame metadata to a human-readable text file.</p>\n\n<p>The purpose of this function is to generate a file documenting an exported\nultrasound frame, so that it can be found again in its original context.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str | Path):\nFilename or path of the exported ultrasound frame.</li>\n<li><strong>session</strong> (Session):\nSession that the frame belongs to.</li>\n<li><strong>recording</strong> (Recording):\nRecording that the frame belongs to.</li>\n<li><strong>aggregate_meta</strong> (AggregateImageParameters):\nThe parameters of the AggregateImage to be dumped in a file along with\nthe session and recording information.</li>\n<li><strong>interpolation_params</strong> (dict | None):\nDictionary of interpolation parameters to be passed to <code>to_fan_2d</code>, by\ndefault None. If none, export raw image instead.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">aggregate_meta</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">aggregate_image</span><span class=\"o\">.</span><span class=\"n\">AggregateImageParameters</span>,</span><span class=\"param\">\t<span class=\"n\">interpolation_params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.metadata.export_distance_matrix_meta", "modulename": "patkit.export.metadata", "qualname": "export_distance_matrix_meta", "kind": "function", "doc": "<p>Export the meta data for a DistanceMatrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str | Path):\nFile to export to.</li>\n<li><strong>session</strong> (Session):\nThe session whose DistanceMatrix is to be exported.</li>\n<li><strong>distance_matrix_meta :</strong>: The meta data to be exported.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">distance_matrix_meta</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">distance_matrix</span><span class=\"o\">.</span><span class=\"n\">DistanceMatrixParameters</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.metadata.export_modality_meta", "modulename": "patkit.export.metadata", "qualname": "export_modality_meta", "kind": "function", "doc": "<p>Export meta data for a Modality.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (Path | str):\nFile to export to.</li>\n<li><strong>modality</strong> (Modality):\nModality whose meta data is to be exported.</li>\n<li><strong>description</strong> (str):\nDescription added to the header of the export file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.metadata.export_derived_modalities_meta", "modulename": "patkit.export.metadata", "qualname": "export_derived_modalities_meta", "kind": "function", "doc": "<p>Export meta data for derived Modalities.</p>\n\n<p>NOTE: There is no meta data exporter for recorded modalities as we keep that\nin the original format as written by what ever software recorded the data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (Path | str):\nFile to export to.</li>\n<li><strong>recording</strong> (Recording):\nRecording that the Modalities belong to.</li>\n<li><strong>description</strong> (str):\nDescription to be added to the header of the export file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.metadata.export_session_and_recording_meta", "modulename": "patkit.export.metadata", "qualname": "export_session_and_recording_meta", "kind": "function", "doc": "<p>Export meta data for A Session and  a Recording.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (Path | str):\nFile to export to.</li>\n<li><strong>session</strong> (Session):\nThe Session whose meta data is to be exported.</li>\n<li><strong>recording</strong> (Recording):\nThe Recording whose meta data is to be exported.</li>\n<li><strong>description</strong> (str):\nDescription to be added to the header of the export file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.metadata.export_ultrasound_frame_meta", "modulename": "patkit.export.metadata", "qualname": "export_ultrasound_frame_meta", "kind": "function", "doc": "<p>Write ultrasound frame metadata to a human-readable text file.</p>\n\n<p>The purpose of this function is to generate a file documenting an exported\nultrasound frame, so that it can be found again in its original context.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str | Path):\nFilename or path of the exported ultrasound frame.</li>\n<li><strong>session</strong> (Session):\nSession that the frame belongs to.</li>\n<li><strong>recording</strong> (Recording):\nRecording that the frame belongs to.</li>\n<li><strong>selection_index</strong> (int):\nIndex of the frame within the ultrasound video.</li>\n<li><strong>selection_time</strong> (float):\nTime in seconds of the frame within the <strong>recording</strong>. This is relative\nto what ever -- most likely the beginning of audio -- is being used as\nt=0s.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">selection_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">selection_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.modality_data", "modulename": "patkit.export.modality_data", "kind": "module", "doc": "<p>Transformers and exporters for Modality data.</p>\n"}, {"fullname": "patkit.export.modality_data.modality_data_to_dataframe", "modulename": "patkit.export.modality_data", "qualname": "modality_data_to_dataframe", "kind": "function", "doc": "<p>Transforms Modality data to a Pandas dataframe.</p>\n\n<p>Use with care as a long recording with a complex TextGrid may end up being\nquite large when represented as a DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nModality whose data is to be transformed.</li>\n<li><strong>use_long_time_name</strong> (bool, optional):\nShould the column name for used for time include the Modality name, by\ndefault False.</li>\n<li><strong>save_segmentation</strong> (bool, optional):\nShould we include columns for each Tier of the corresponding TextGrid,\nby default False. If these are included they will contain the\ncorresponding label at each time stamp.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pd.DataFrame</strong>: The dataframe with columns for at least time stamps and the modality\ndata, but also columns for each tier if <code>save_segmentation</code> is True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">use_long_time_name</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_segmentation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.modality_data.modality_to_csv", "modulename": "patkit.export.modality_data", "qualname": "modality_to_csv", "kind": "function", "doc": "<p>Save the Modality to a csv file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path | str):\nPath to the export to.</li>\n<li><strong>modality</strong> (Modality):\nModality to export.</li>\n<li><strong>save_segmentation</strong> (bool, optional):\nShould we include columns for each Tier of the corresponding TextGrid,\nby default False.</li>\n<li><strong>separator</strong> (str, optional):\nSeparator to use in the csv file, by default '  '.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">save_segmentation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">separator</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.export.modality_data.derived_modalities_to_csv", "modulename": "patkit.export.modality_data", "qualname": "derived_modalities_to_csv", "kind": "function", "doc": "<p>Export all derived Modalities of a Recording to a csv file.</p>\n\n<p>NOTE: Exporting modalities with different lengths is untested and exporting\nmodalities whose data is not 1-D will raise an Error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path | str):\nPath to export to.</li>\n<li><strong>recording</strong> (Recording):\nRecording whose derived Modalities to export.</li>\n<li><strong>save_segmentation</strong> (bool, optional):\nShould we include columns for each Tier of the corresponding TextGrid,\nby default False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">save_segmentation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.external_class_extensions", "modulename": "patkit.external_class_extensions", "kind": "module", "doc": "<p>external_class_extensions is a module for various tools used by various parts of patkit.</p>\n\n<p>Anything that is generic and not specific to a given part of patkit lives here.\nSo tools that relate to Modalities will be where Modalities are, but tools that\nrelate to for example Python base modules -- like enum_union does -- are here.</p>\n"}, {"fullname": "patkit.external_class_extensions.base_model_extensions", "modulename": "patkit.external_class_extensions.base_model_extensions", "kind": "module", "doc": "<p>Extensions to Pydantic BaseModel.</p>\n"}, {"fullname": "patkit.external_class_extensions.base_model_extensions.PatkitBaseModel", "modulename": "patkit.external_class_extensions.base_model_extensions", "qualname": "PatkitBaseModel", "kind": "class", "doc": "<p>A BaseModel which accepts empty strings for any field as None.</p>\n\n<p>Additionally, trying to parse undefined fields will raise an exception.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "patkit.external_class_extensions.base_model_extensions.PatkitBaseModel.model_config", "modulename": "patkit.external_class_extensions.base_model_extensions", "qualname": "PatkitBaseModel.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.external_class_extensions.base_model_extensions.PatkitBaseModel.empty_str_to_none", "modulename": "patkit.external_class_extensions.base_model_extensions", "qualname": "PatkitBaseModel.empty_str_to_none", "kind": "function", "doc": "<p>Validate empty strings to None, but non-empties to themselves.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_string</strong> (str):\nString to be validated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Optional[str]</strong>: None for empty string, otherwise the string itself.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">input_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel", "modulename": "patkit.external_class_extensions.base_model_extensions", "qualname": "UpdatableBaseModel", "kind": "class", "doc": "<p>A BaseModel which can be updated with new data.</p>\n\n<p>The update will trigger validation again.</p>\n", "bases": "PatkitBaseModel"}, {"fullname": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel.update", "modulename": "patkit.external_class_extensions.base_model_extensions", "qualname": "UpdatableBaseModel.update", "kind": "function", "doc": "<p>Update the BaseModel with the contents of data and validate.</p>\n\n<p>The update does not happen in place but rather a new updated object is\nreturned and updating triggers validation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (dict):\nOnly valid key, value pairs are accepted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>UpdatableBaseModel</strong>: The updated BaseModel.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">external_class_extensions</span><span class=\"o\">.</span><span class=\"n\">base_model_extensions</span><span class=\"o\">.</span><span class=\"n\">UpdatableBaseModel</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.external_class_extensions.base_model_extensions.UpdatableBaseModel.model_config", "modulename": "patkit.external_class_extensions.base_model_extensions", "qualname": "UpdatableBaseModel.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.external_class_extensions.enum_extensions", "modulename": "patkit.external_class_extensions.enum_extensions", "kind": "module", "doc": "<p>Enum extensions that are compatible with the standard library's <code>enum</code>. </p>\n\n<p>Original UnionEnum implementation licensed with</p>\n\n<h1 id=\"mit-license\">MIT License</h1>\n\n<p>#</p>\n\n<h1 id=\"copyright-c-2020-paolo-lammens\">Copyright (c) 2020 Paolo Lammens</h1>\n\n<p>#</p>\n\n<h1 id=\"permission-is-hereby-granted-free-of-charge-to-any-person-obtaining-a-copy\">Permission is hereby granted, free of charge, to any person obtaining a copy</h1>\n\n<h1 id=\"of-this-software-and-associated-documentation-files-the-software-to-deal\">of this software and associated documentation files (the \"Software\"), to deal</h1>\n\n<h1 id=\"in-the-software-without-restriction-including-without-limitation-the-rights\">in the Software without restriction, including without limitation the rights</h1>\n\n<h1 id=\"to-use-copy-modify-merge-publish-distribute-sublicense-andor-sell\">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</h1>\n\n<h1 id=\"copies-of-the-software-and-to-permit-persons-to-whom-the-software-is\">copies of the Software, and to permit persons to whom the Software is</h1>\n\n<h1 id=\"furnished-to-do-so-subject-to-the-following-conditions\">furnished to do so, subject to the following conditions:</h1>\n\n<p>#</p>\n\n<h1 id=\"the-above-copyright-notice-and-this-permission-notice-shall-be-included-in\">The above copyright notice and this permission notice shall be included in</h1>\n\n<h1 id=\"all-copies-or-substantial-portions-of-the-software\">all copies or substantial portions of the Software.</h1>\n\n<p>#</p>\n\n<h1 id=\"the-software-is-provided-as-is-without-warranty-of-any-kind-express-or\">THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</h1>\n\n<h1 id=\"implied-including-but-not-limited-to-the-warranties-of-merchantability\">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</h1>\n\n<h1 id=\"fitness-for-a-particular-purpose-and-noninfringement-in-no-event-shall-the\">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</h1>\n\n<h1 id=\"authors-or-copyright-holders-be-liable-for-any-claim-damages-or-other\">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</h1>\n\n<h1 id=\"liability-whether-in-an-action-of-contract-tort-or-otherwise-arising-from\">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</h1>\n\n<h1 id=\"out-of-or-in-connection-with-the-software-or-the-use-or-other-dealings-in-the\">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</h1>\n\n<h1 id=\"software\">SOFTWARE.</h1>\n\n<p>All other parts licensed with the usual patkit license.</p>\n"}, {"fullname": "patkit.external_class_extensions.enum_extensions.ListablePrintableEnum", "modulename": "patkit.external_class_extensions.enum_extensions", "qualname": "ListablePrintableEnum", "kind": "class", "doc": "<p>Enum whose values can be listed and which returns its value as a string.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.external_class_extensions.enum_extensions.ListablePrintableEnum.values", "modulename": "patkit.external_class_extensions.enum_extensions", "qualname": "ListablePrintableEnum.values", "kind": "function", "doc": "<p>Classmethod which returns a list of the Enum's values.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: list of the Enum's values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.external_class_extensions.enum_extensions.ValueComparedEnumMeta", "modulename": "patkit.external_class_extensions.enum_extensions", "qualname": "ValueComparedEnumMeta", "kind": "class", "doc": "<p>EnumMeta where <code>in</code> matches also value of member matching compared item.</p>\n\n<p>Usage:</p>\n\n<pre><code>class MyEnum(Enum, metaclass=ValueComparedEnumMeta):\n    FOO = 'bar'\n\nsearch_value = 'bar'\nif search_value in MyEnum:\n    print('It is!')\n</code></pre>\n", "bases": "enum.EnumType"}, {"fullname": "patkit.external_class_extensions.enum_extensions.UnionEnumMeta", "modulename": "patkit.external_class_extensions.enum_extensions", "qualname": "UnionEnumMeta", "kind": "class", "doc": "<p>The metaclass for enums which are the union of several sub-enums.</p>\n\n<p>Union enums have the _subenums_ attribute which is a tuple of the enums\nforming the union.</p>\n", "bases": "ValueComparedEnumMeta"}, {"fullname": "patkit.external_class_extensions.enum_extensions.UnionEnumMeta.make_union", "modulename": "patkit.external_class_extensions.enum_extensions", "qualname": "UnionEnumMeta.make_union", "kind": "function", "doc": "<p>Create an enum from the union of members of several enums.</p>\n\n<p>Order matters: where two members in the union have the same value, they\nwill be considered as aliases of each other, and the one appearing in\nthe first enum in the sequence will be used as the canonical member\n(the aliases will be associated to this enum member).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subenums</strong>:  Sequence of sub-enums to make a union of.</li>\n<li><strong>name</strong>:  Name to use for the enum class. AUTO will result in a\ncombination of the names of all subenums, None will result\nin \"UnionEnum\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An enum class which is the union of the given subenums.</p>\n</blockquote>\n\n<p>Example (using the <code>enum_union()</code> alias defined below):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">EnumA</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>   <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">EnumB</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>   <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">... </span>   <span class=\"n\">ALIAS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UnionAB</span> <span class=\"o\">=</span> <span class=\"n\">enum_union</span><span class=\"p\">(</span><span class=\"n\">EnumA</span><span class=\"p\">,</span> <span class=\"n\">EnumB</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UnionAB</span><span class=\"o\">.</span><span class=\"n\">__members__</span>\n<span class=\"go\">mappingproxy({&#39;A&#39;: &lt;EnumA.A: 1&gt;, &#39;B&#39;: &lt;EnumB.B: 2&gt;, &#39;ALIAS&#39;: &lt;EnumA.A: 1&gt;})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;EnumA.A: 1&gt;, &lt;EnumB.B: 2&gt;]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">EnumA</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">UnionAB</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">EnumB</span><span class=\"o\">.</span><span class=\"n\">ALIAS</span> <span class=\"ow\">in</span> <span class=\"n\">UnionAB</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">EnumB</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">UnionAB</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">,</span> <span class=\"n\">Enum</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">EnumC</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>   <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">enum_union</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">,</span> <span class=\"n\">EnumC</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">enum_union</span><span class=\"p\">(</span><span class=\"n\">EnumA</span><span class=\"p\">,</span> <span class=\"n\">EnumB</span><span class=\"p\">,</span> <span class=\"n\">EnumC</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UnionABC</span> <span class=\"o\">=</span> <span class=\"n\">enum_union</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">,</span> <span class=\"n\">EnumC</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UnionABC</span><span class=\"o\">.</span><span class=\"n\">__members__</span>\n<span class=\"go\">mappingproxy({&#39;A&#39;: &lt;EnumA.A: 1&gt;,</span>\n<span class=\"go\">              &#39;B&#39;: &lt;EnumB.B: 2&gt;,</span>\n<span class=\"go\">              &#39;ALIAS&#39;: &lt;EnumA.A: 1&gt;,</span>\n<span class=\"go\">              &#39;C&#39;: &lt;EnumC.C: 3&gt;})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">issubset</span><span class=\"p\">(</span><span class=\"n\">UnionABC</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">subenums</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">EnumType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">EnumType</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.external_class_extensions.enum_extensions.enum_union", "modulename": "patkit.external_class_extensions.enum_extensions", "qualname": "enum_union", "kind": "function", "doc": "<p>Create an enum from the union of members of several enums.</p>\n\n<p>Order matters: where two members in the union have the same value, they\nwill be considered as aliases of each other, and the one appearing in\nthe first enum in the sequence will be used as the canonical member\n(the aliases will be associated to this enum member).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subenums</strong>:  Sequence of sub-enums to make a union of.</li>\n<li><strong>name</strong>:  Name to use for the enum class. AUTO will result in a\ncombination of the names of all subenums, None will result\nin \"UnionEnum\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An enum class which is the union of the given subenums.</p>\n</blockquote>\n\n<p>Example (using the <code>enum_union()</code> alias defined below):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">EnumA</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>   <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">EnumB</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>   <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">... </span>   <span class=\"n\">ALIAS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UnionAB</span> <span class=\"o\">=</span> <span class=\"n\">enum_union</span><span class=\"p\">(</span><span class=\"n\">EnumA</span><span class=\"p\">,</span> <span class=\"n\">EnumB</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UnionAB</span><span class=\"o\">.</span><span class=\"n\">__members__</span>\n<span class=\"go\">mappingproxy({&#39;A&#39;: &lt;EnumA.A: 1&gt;, &#39;B&#39;: &lt;EnumB.B: 2&gt;, &#39;ALIAS&#39;: &lt;EnumA.A: 1&gt;})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;EnumA.A: 1&gt;, &lt;EnumB.B: 2&gt;]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">EnumA</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">UnionAB</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">EnumB</span><span class=\"o\">.</span><span class=\"n\">ALIAS</span> <span class=\"ow\">in</span> <span class=\"n\">UnionAB</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">EnumB</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">UnionAB</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">,</span> <span class=\"n\">Enum</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">EnumC</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>   <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">enum_union</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">,</span> <span class=\"n\">EnumC</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">enum_union</span><span class=\"p\">(</span><span class=\"n\">EnumA</span><span class=\"p\">,</span> <span class=\"n\">EnumB</span><span class=\"p\">,</span> <span class=\"n\">EnumC</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UnionABC</span> <span class=\"o\">=</span> <span class=\"n\">enum_union</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">,</span> <span class=\"n\">EnumC</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UnionABC</span><span class=\"o\">.</span><span class=\"n\">__members__</span>\n<span class=\"go\">mappingproxy({&#39;A&#39;: &lt;EnumA.A: 1&gt;,</span>\n<span class=\"go\">              &#39;B&#39;: &lt;EnumB.B: 2&gt;,</span>\n<span class=\"go\">              &#39;ALIAS&#39;: &lt;EnumA.A: 1&gt;,</span>\n<span class=\"go\">              &#39;C&#39;: &lt;EnumC.C: 3&gt;})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">UnionAB</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">issubset</span><span class=\"p\">(</span><span class=\"n\">UnionABC</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">subenums</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">EnumType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">EnumType</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.external_class_extensions.enum_extensions.extend_enum", "modulename": "patkit.external_class_extensions.enum_extensions", "qualname": "extend_enum", "kind": "function", "doc": "<p>Decorator to \"extend\" an enum by computing the union with the given enum.</p>\n\n<p>This is equivalent to <code>ExtendedEnum = enum_union(BaseEnum, Extension)</code>,\nwhere <code>BaseEnum</code> is the <code>base_enum</code> parameter and <code>Extension</code> is the\ndecorated enum.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>base_enum</strong>:  The base enum to be extended.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The union of <code>base_enum</code> and the decorated enum.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">BaseEnum</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@extend_enum</span><span class=\"p\">(</span><span class=\"n\">BaseEnum</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">ExtendedEnum</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">ALIAS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>    <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ExtendedEnum</span><span class=\"o\">.</span><span class=\"n\">__members__</span>\n<span class=\"go\">mappingproxy({&#39;A&#39;: &lt;BaseEnum.A: 1&gt;,</span>\n<span class=\"go\">              &#39;ALIAS&#39;: &lt;BaseEnum.A: 1&gt;,</span>\n<span class=\"go\">              &#39;B&#39;: &lt;ExtendedEnum.B: 2&gt;})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_enum</span><span class=\"p\">:</span> <span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">EnumType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui", "modulename": "patkit.gui", "kind": "module", "doc": "<p>GUI elements.</p>\n"}, {"fullname": "patkit.gui.annotator_window", "modulename": "patkit.gui.annotator_window", "kind": "module", "doc": "<p>This is the main window of the PATKIT annotator.</p>\n"}, {"fullname": "patkit.gui.annotator_window.Ui_MainWindow", "modulename": "patkit.gui.annotator_window", "qualname": "Ui_MainWindow", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.annotator_window.Ui_MainWindow.setupUi", "modulename": "patkit.gui.annotator_window", "qualname": "Ui_MainWindow.setupUi", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">MainWindow</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.annotator_window.Ui_MainWindow.retranslateUi", "modulename": "patkit.gui.annotator_window", "qualname": "Ui_MainWindow.retranslateUi", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">MainWindow</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.boundary_animation", "modulename": "patkit.gui.boundary_animation", "kind": "module", "doc": "<p>Classes for animating TextGrid boundaries.</p>\n"}, {"fullname": "patkit.gui.boundary_animation.AnimatableBoundary", "modulename": "patkit.gui.boundary_animation", "qualname": "AnimatableBoundary", "kind": "class", "doc": "<p>GUI/matplotlib elements of a rendered boundary.</p>\n\n<p>These are: one line and the previous and following label.</p>\n"}, {"fullname": "patkit.gui.boundary_animation.AnimatableBoundary.__init__", "modulename": "patkit.gui.boundary_animation", "qualname": "AnimatableBoundary.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span>,</span><span class=\"param\">\t<span class=\"n\">prev_text</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">next_text</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.gui.boundary_animation.AnimatableBoundary.axes", "modulename": "patkit.gui.boundary_animation", "qualname": "AnimatableBoundary.axes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": matplotlib.axes._axes.Axes"}, {"fullname": "patkit.gui.boundary_animation.AnimatableBoundary.line", "modulename": "patkit.gui.boundary_animation", "qualname": "AnimatableBoundary.line", "kind": "variable", "doc": "<p></p>\n", "annotation": ": matplotlib.lines.Line2D"}, {"fullname": "patkit.gui.boundary_animation.AnimatableBoundary.prev_text", "modulename": "patkit.gui.boundary_animation", "qualname": "AnimatableBoundary.prev_text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[matplotlib.text.Text]", "default_value": "None"}, {"fullname": "patkit.gui.boundary_animation.AnimatableBoundary.next_text", "modulename": "patkit.gui.boundary_animation", "qualname": "AnimatableBoundary.next_text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[matplotlib.text.Text]", "default_value": "None"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator", "kind": "class", "doc": "<p>Draggable annotation boundary with blitting.</p>\n\n<p>The class allows only one boundary to be moved at a time. If another\nboundary is crossed then this boundary will return to its original position\non mouse release. Otherwise, the boundary will stay where it is at mouse\nrelease and  the underlying Interval gets updated with the new position.</p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.__init__", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">main_window</span>,</span><span class=\"param\">\t<span class=\"n\">boundaries</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">boundary_animation</span><span class=\"o\">.</span><span class=\"n\">AnimatableBoundary</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">segment</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">patgrid</span><span class=\"o\">.</span><span class=\"n\">PatInterval</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.lock", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.lock", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.main_window", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.main_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.boundaries", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.segment", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.segment", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.epsilon", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.time_offset", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.time_offset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.press", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.press", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.backgrounds", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.backgrounds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.shift_is_held", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.shift_is_held", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.coincident_boundaries", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.coincident_boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.cidpress", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.cidpress", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.cidmotion", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.cidmotion", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.cidrelease", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.cidrelease", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.connect", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.connect", "kind": "function", "doc": "<p>Connect to all the events we need.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.disconnect", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.disconnect", "kind": "function", "doc": "<p>Disconnect all callbacks.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.on_press", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.on_press", "kind": "function", "doc": "<p>Check whether mouse is over us; if so, store some data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.on_motion", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.on_motion", "kind": "function", "doc": "<p>Move the boundary if the mouse is over us.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.boundary_animation.BoundaryAnimator.on_release", "modulename": "patkit.gui.boundary_animation", "qualname": "BoundaryAnimator.on_release", "kind": "function", "doc": "<p>Clear button press information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.dialog_template", "modulename": "patkit.gui.dialog_template", "kind": "module", "doc": "<p>This is not a functional dialog window, only a template.</p>\n"}, {"fullname": "patkit.gui.dialog_template.DialogTemplate", "modulename": "patkit.gui.dialog_template", "qualname": "DialogTemplate", "kind": "class", "doc": "<p>Template for making dialog windows. Have a look at ReplaceDialog for a\ndifferent way of handling button presses.</p>\n\n<p>This file can be run by itself for ease of testing out the dialog design.</p>\n", "bases": "PyQt6.QtWidgets.QDialog"}, {"fullname": "patkit.gui.dialog_template.DialogTemplate.__init__", "modulename": "patkit.gui.dialog_template", "qualname": "DialogTemplate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.gui.dialog_template.DialogTemplate.question", "modulename": "patkit.gui.dialog_template", "qualname": "DialogTemplate.question", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.dialog_template.DialogTemplate.dateTime", "modulename": "patkit.gui.dialog_template", "qualname": "DialogTemplate.dateTime", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.dialog_template.DialogTemplate.getDateTime", "modulename": "patkit.gui.dialog_template", "qualname": "DialogTemplate.getDateTime", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.dialog_template.app", "modulename": "patkit.gui.dialog_template", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PyQt6.QtWidgets.QApplication object&gt;"}, {"fullname": "patkit.gui.image_save_dialog", "modulename": "patkit.gui.image_save_dialog", "kind": "module", "doc": "<p>Dialog for asking which items should be saved and where.</p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog", "kind": "class", "doc": "<p>QDialog(parent: Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QDialog"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.__init__", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QIcon</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.chosen_item_names", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.chosen_item_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.name", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.save_path", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.save_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.options", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.path_label", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.path_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.path_field", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.path_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.browse_button", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.browse_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.ok_cancel_buttons", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.ok_cancel_buttons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.image_save_dialog.ImageSaveDialog.get_selection", "modulename": "patkit.gui.image_save_dialog", "qualname": "ImageSaveDialog.get_selection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QIcon</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.list_save_dialog", "modulename": "patkit.gui.list_save_dialog", "kind": "module", "doc": "<p>Dialog for asking which items should be saved and where.</p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog", "kind": "class", "doc": "<p>QDialog(parent: Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QDialog"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.__init__", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">item_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">checked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QIcon</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">option_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.chosen_item_names", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.chosen_item_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.name", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.save_path", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.save_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.option", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.option", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.list_view", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.list_view", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.model", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.reverse_selection_button", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.reverse_selection_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.select_button", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.select_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.unselect_button", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.unselect_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.path_label", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.path_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.path_field", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.path_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.browse_button", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.browse_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.ok_cancel_buttons", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.ok_cancel_buttons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.list_save_dialog.ListSaveDialog.get_selection", "modulename": "patkit.gui.list_save_dialog", "qualname": "ListSaveDialog.get_selection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">item_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">checked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QIcon</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">option_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.ofbrowse", "modulename": "patkit.gui.ofbrowse", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.__init__", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.__init__", "kind": "function", "doc": "<p>class initializer</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span>)</span>"}, {"fullname": "patkit.gui.ofbrowse.GUI.ultra_interp", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ultra_interp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.ofdisp", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ofdisp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.ult_no_frames", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ult_no_frames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.ult_time", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ult_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.ult_period", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ult_period", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.scaling", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.scaling", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.fig", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.fig", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.ax", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ax", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.im", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.im", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.quiver", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.quiver", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.vel", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.vel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.pos", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.ax_vel", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ax_vel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.line_vel", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.line_vel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.ax_pos", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ax_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.line_pos", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.line_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.ax_audio", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.ax_audio", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.frame_index", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.frame_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.cid_scroll", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.cid_scroll", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.ofbrowse.GUI.mouse_scroll", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.mouse_scroll", "kind": "function", "doc": "<p>create mousewheel callback function for updating the plot to a new frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.ofbrowse.GUI.update_gui", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.update_gui", "kind": "function", "doc": "<p>update the gui by changing the state according to the current frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.ofbrowse.GUI.compute_kinematics", "modulename": "patkit.gui.ofbrowse", "qualname": "GUI.compute_kinematics", "kind": "function", "doc": "<p>compute the velocity and position from the displacement field</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.ofbrowse.main", "modulename": "patkit.gui.ofbrowse", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.gui.replace_dialog", "modulename": "patkit.gui.replace_dialog", "kind": "module", "doc": "<p>Dialog for asking if we should overwrite an existing file or files.</p>\n"}, {"fullname": "patkit.gui.replace_dialog.ReplaceDialog", "modulename": "patkit.gui.replace_dialog", "qualname": "ReplaceDialog", "kind": "class", "doc": "<p>QDialog(parent: Optional[QWidget] = None, flags: Qt.WindowType = Qt.WindowFlags())</p>\n", "bases": "PyQt6.QtWidgets.QDialog"}, {"fullname": "patkit.gui.replace_dialog.ReplaceDialog.__init__", "modulename": "patkit.gui.replace_dialog", "qualname": "ReplaceDialog.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.gui.replace_dialog.ReplaceDialog.question", "modulename": "patkit.gui.replace_dialog", "qualname": "ReplaceDialog.question", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.replace_dialog.ReplaceDialog.pressed_button", "modulename": "patkit.gui.replace_dialog", "qualname": "ReplaceDialog.pressed_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.gui.replace_dialog.ReplaceDialog.confirm_overwrite", "modulename": "patkit.gui.replace_dialog", "qualname": "ReplaceDialog.confirm_overwrite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.import_formats", "modulename": "patkit.import_formats", "kind": "module", "doc": "<p>Reading functions for the imported formats.</p>\n"}, {"fullname": "patkit.import_formats.avi_read", "modulename": "patkit.import_formats.avi_read", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.import_formats.avi_read.read_avi", "modulename": "patkit.import_formats.avi_read", "qualname": "read_avi", "kind": "function", "doc": "<p>Read wavfile from path.</p>\n\n<p>Positional arguments:\npath -- Path of the wav file\nmeta -- a dict containing the following keys:\n    NumVectors -- number of scanlines in the data\n    PixPerVector -- number of pixels on a scanline</p>\n\n<p>Keyword argument:\ndetect_beep -- Should 1kHz beep detection be run. Changes return values (see below).</p>\n\n<p>Returns a ModalityData instance that contains the wav frames, a timevector, and\nthe sampling rate. </p>\n\n<p>Also adds the 'no_frames', 'width', and 'height' keys and values to the meta dict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.import_formats.dicom_ultra_read", "modulename": "patkit.import_formats.dicom_ultra_read", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.import_formats.dicom_ultra_read.read_3d_ultrasound_dicom", "modulename": "patkit.import_formats.dicom_ultra_read", "qualname": "read_3d_ultrasound_dicom", "kind": "function", "doc": "<p>Read 3D ultrasound dicom from path.</p>\n\n<p>Positional arguments:\npath -- Path of the wav file\nmeta -- a dict containing the following keys:\n    NumVectors -- number of scanlines in the data\n    PixPerVector -- number of pixels on a scanline</p>\n\n<p>Returns a ModalityData instance that contains the wav frames, \na timevector, and the sampling rate. </p>\n\n<p>Also adds the 'no_frames' key and value to the meta dict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.import_formats.rasl_dat_to_wav", "modulename": "patkit.import_formats.rasl_dat_to_wav", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.import_formats.rasl_dat_to_wav.dat_to_wav", "modulename": "patkit.import_formats.rasl_dat_to_wav", "qualname": "dat_to_wav", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datpath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">wavpath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.import_formats.splines_read", "modulename": "patkit.import_formats.splines_read", "kind": "module", "doc": "<p>Functions for reading splines from different formats.</p>\n"}, {"fullname": "patkit.import_formats.splines_read.read_splines", "modulename": "patkit.import_formats.splines_read", "qualname": "read_splines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.import_formats.ult_read", "modulename": "patkit.import_formats.ult_read", "kind": "module", "doc": "<p>Read AAA raw ultrasound files.</p>\n"}, {"fullname": "patkit.import_formats.ult_read.read_ult", "modulename": "patkit.import_formats.ult_read", "qualname": "read_ult", "kind": "function", "doc": "<p>Read raw ultrasound from path.</p>\n\n<p>Positional arguments:\npath -- Path of the ultrasound file\nmeta -- a dict containing the following keys:\n    NumVectors -- number of scanlines in the data\n    PixPerVector -- number of pixels on a scanline</p>\n\n<p>Returns a ModalityData instance that contains the ultrasound frames, \na timevector, and the sampling rate. </p>\n\n<p>Also adds the 'no_frames' key and value to the meta dict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">modalities</span><span class=\"o\">.</span><span class=\"n\">recorded_metadata_classes</span><span class=\"o\">.</span><span class=\"n\">RawUltrasoundMeta</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.import_formats.wav_read", "modulename": "patkit.import_formats.wav_read", "kind": "module", "doc": "<p>Functions for reading wav files with or without some preprocessing.</p>\n"}, {"fullname": "patkit.import_formats.wav_read.read_wav", "modulename": "patkit.import_formats.wav_read", "qualname": "read_wav", "kind": "function", "doc": "<p>Read a wave file from path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path):\nPath of the wav file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ModalityData</strong>: The sound data, its timevector and sampling rate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.import_formats.wav_read.read_wav_and_detect_beep", "modulename": "patkit.import_formats.wav_read", "qualname": "read_wav_and_detect_beep", "kind": "function", "doc": "<p>Read a wave file from path and detect beep on it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path):\nPath of the wav file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[ModalityData, float, bool]</strong>: Tuple of a ModalityData instance that contains the wav frames, a\ntimevector and the sampling rate, the time of a 1kHz go-signal and a\nguess about if the file contains speech.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.initialise", "modulename": "patkit.initialise", "kind": "module", "doc": "<p>Initialisation routines for PATKIT.</p>\n"}, {"fullname": "patkit.initialise.get_config_dir", "modulename": "patkit.initialise", "qualname": "get_config_dir", "kind": "function", "doc": "<p>Get configuration directory from a Path which is a file.</p>\n\n<p>As a side effect will exit the program if the file type can not be handled.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path):\nPath to a file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: Path of the configuration directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.initialise.initialise_config", "modulename": "patkit.initialise", "qualname": "initialise_config", "kind": "function", "doc": "<p>Initialise PATKIT configuration and set logging level.</p>\n\n<p>Configuration file's existence will be checked according to the flag\narguments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path):\nPath to the configuration directory or a file that PATKIT can handle.</li>\n<li><strong>require_data</strong> (bool, optional):\nDo we need data configuration, by default False. This can come in the\nform of either a <code>patkit_data.yaml</code> file or a manifest or a session\n<code>.meta</code>. The PATKIT will try to back track the latter two to the\n<code>patkit_data.yaml</code>.</li>\n<li><strong>require_gui</strong> (bool, optional):\nIf the annotator GUI is going to be opened, we should have\n<code>patkit_gui.yaml</code>, by default False</li>\n<li><strong>require_publish</strong> (bool, optional):\nIf we are running a publish script, <code>patkit_publish.yaml</code>, by default\nFalse</li>\n<li><strong>require_simulation</strong> (bool, optional):\nIf this is a simulation run, we need <code>patkit_simulation.yaml</code>, by\ndefault False</li>\n<li><strong>logging_level</strong> (int | None, optional):\nLogging level, by default None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>[Configuration, Logger]</strong>: Configuration for PATKIT and the logger for use with other functions in\n<code>initialise.py</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">require_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">require_gui</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">require_publish</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">require_simulation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">logging_level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">Configuration</span><span class=\"p\">,</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.initialise.initialise_patkit", "modulename": "patkit.initialise", "qualname": "initialise_patkit", "kind": "function", "doc": "<p>Initialise the basic structures for running patkit.</p>\n\n<p>This sets up the argument parser, reads the basic configuration, and loads\nthe recorded and saved data into a Session. To initialise derived data run\n<code>add_derived_data</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path):\nPath to load data from.</li>\n<li><strong>config_file</strong> (Path | str | None):\nPath to load configuration from, by default None.</li>\n<li><strong>exclusion_file</strong> (Path | str | None):\nPath to exclusion list, by default None.</li>\n<li><strong>logging_level</strong> (int | None):\nLogging level, by default None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Session</strong>: Data in a Session.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">Configuration</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.initialise.add_derived_data", "modulename": "patkit.initialise", "qualname": "add_derived_data", "kind": "function", "doc": "<p>Add derived data to the Session according to the Configuration.</p>\n\n<p>NOTE: This function will not delete existing data unless it is being\nreplaced (and the corresponding <code>replace</code> parameter is <code>True</code>). This means\nthat already existing derived data is retained.</p>\n\n<p>Added data types include Modalities, Statistics and Annotations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong> (Session):\nThe Session to add derived data to.</li>\n<li><strong>config</strong> (Configuration):\nThe configuration parameters to use in deriving the new derived data.</li>\n<li><strong>logger</strong> (Logger):\nThe logger is passed as an argument since the initialise module is the\none responsible for setting it up.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">Configuration</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.interpolate_raw_uti", "modulename": "patkit.interpolate_raw_uti", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.interpolate_raw_uti.to_fan", "modulename": "patkit.interpolate_raw_uti", "qualname": "to_fan", "kind": "function", "doc": "<p>Generate interpolated images from scanline ultrasound data.</p>\n\n<p>Positional argument:\nscanline_data - numpy array containing each frame as a vector,\n    but in case of RGB data, each color as its own vector.</p>\n\n<p>Keyword arguments:\nangle - angle between scanlines in radians\nzero_offset - distance between probe center and first pixel of a scanline\npix_per_mm - pixels per mm in the depth direction of a scanline\nnum_vectors - number of scanlines per frame</p>\n\n<p>Returns a numpy array containing the generated image(s).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scanline_data</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zero_offset</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pixels_per_mm</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_vectors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">magnify</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">reserve</span><span class=\"o\">=</span><span class=\"mi\">1800</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.interpolate_raw_uti.to_fan_2d", "modulename": "patkit.interpolate_raw_uti", "qualname": "to_fan_2d", "kind": "function", "doc": "<p>Transform a raw ultrasound image to a fanshaped image.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zero_offset</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pixels_per_mm</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_vectors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">magnify</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">reserve</span><span class=\"o\">=</span><span class=\"mi\">1800</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.interpolate_raw_uti.ult_cart2pol", "modulename": "patkit.interpolate_raw_uti", "qualname": "ult_cart2pol", "kind": "function", "doc": "<p>Transform an ultrasound image from cartesian to polar coordinates.</p>\n\n<p>More specifically map a raw image onto a scanline fan and interpolate the\nresult for viewing by humans.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_coordinates</span>,</span><span class=\"param\">\t<span class=\"n\">origin</span>,</span><span class=\"param\">\t<span class=\"n\">num_of_vectors</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span>,</span><span class=\"param\">\t<span class=\"n\">zero_offset</span>,</span><span class=\"param\">\t<span class=\"n\">pix_per_mm</span>,</span><span class=\"param\">\t<span class=\"n\">grayscale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.interpolate_raw_uti.trim_picture", "modulename": "patkit.interpolate_raw_uti", "qualname": "trim_picture", "kind": "function", "doc": "<p>TODO: docstring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.interpreter", "modulename": "patkit.interpreter", "kind": "module", "doc": "<p>patkit interactive interpreter.</p>\n"}, {"fullname": "patkit.interpreter.run_interpreter", "modulename": "patkit.interpreter", "qualname": "run_interpreter", "kind": "function", "doc": "<p>Run the patkit interactive interpreter on the command line.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong> (Session):\nThe loaded Session.</li>\n<li><strong>configuration</strong> (Configuration):\nThe Configuration for this run.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">configuration</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">Configuration</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics", "modulename": "patkit.metrics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.metrics.metrics", "modulename": "patkit.metrics", "qualname": "metrics", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;PD&#x27;: (&lt;class &#x27;patkit.metrics.pd.PD&#x27;&gt;, &lt;class &#x27;patkit.metrics.pd.PdParameters&#x27;&gt;), &#x27;SplineMetric&#x27;: (&lt;class &#x27;patkit.metrics.spline_metric.SplineMetric&#x27;&gt;, &lt;class &#x27;patkit.metrics.spline_metric.SplineMetricParameters&#x27;&gt;)}"}, {"fullname": "patkit.metrics.statistics", "modulename": "patkit.metrics", "qualname": "statistics", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;AggregateImage&#x27;: (&lt;class &#x27;patkit.metrics.aggregate_image.AggregateImage&#x27;&gt;, &lt;class &#x27;patkit.metrics.aggregate_image.AggregateImageParameters&#x27;&gt;), &#x27;DistanceMatrix&#x27;: (&lt;class &#x27;patkit.metrics.distance_matrix.DistanceMatrix&#x27;&gt;, &lt;class &#x27;patkit.metrics.distance_matrix.DistanceMatrixParameters&#x27;&gt;)}"}, {"fullname": "patkit.metrics.aggregate_image", "modulename": "patkit.metrics.aggregate_image", "kind": "module", "doc": "<p>AggregateImage Statistic and its Parameter class.</p>\n"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImageParameters", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImageParameters", "kind": "class", "doc": "<p>Parameters used in generating the parent AggregateImage modality.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_name</strong> (str):\nName of the Modality this instance of AggregateImage was calculated on.</li>\n<li><strong>metric</strong> (str, optional):\nMetric used in aggregation. By default, 'mean'.</li>\n<li><strong>interpolated</strong> (bool, optional):\nShould this AggregateImage be calculated on interpolated images.\nDefaults to False for calculating AggregateImage on raw data. This one\nreally can only be used on 2D ultrasound data.</li>\n<li><strong>release_data_memory</strong> (bool, optional):\nWhether to assign None to <code>parent.data</code> after deriving this Metric from\nthe data. Currently, has no effect as deriving AggregateImage at\nruntime is not yet supported.</li>\n</ul>\n", "bases": "patkit.data_structures.metadata_classes.StatisticMetaData"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImageParameters.parent_name", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImageParameters.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImageParameters.metric", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImageParameters.metric", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImageParameters.interpolated", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImageParameters.interpolated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImageParameters.release_data_memory", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImageParameters.release_data_memory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImageParameters.model_config", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImageParameters.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImage", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImage", "kind": "class", "doc": "<p>Represent an AggregateImage as a Statistic.</p>\n\n<p>Currently only allowed metric is mean, but median, mode and others could be\nadded.</p>\n", "bases": "patkit.data_structures.base_classes.Statistic"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImage.__init__", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImage.__init__", "kind": "function", "doc": "<p>Build a AggregateImage Statistic.       </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>owner</strong> (Recording | Session):\nthe Recording or Session that this AggregateImage was calculated\non.</li>\n<li><strong>metadata</strong> (AggregateImageParameters):\nParameters used in calculating this instance of AggregateImage.</li>\n<li><strong>file_info</strong> (FileInformation):\nFileInformation -- if any -- for this AggregateImage.</li>\n<li><strong>parsed_data</strong> (np.ndarray | None, optional):\nthe actual aggregate image, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span> <span class=\"o\">|</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">aggregate_image</span><span class=\"o\">.</span><span class=\"n\">AggregateImageParameters</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImage.generate_name", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImage.generate_name", "kind": "function", "doc": "<p>Generate a name to be used as this  AggregateImage's unique identifier.</p>\n\n<p>This static method <strong>defines</strong> what the names are. This implementation\npattern (AggregateImage.name calls this and anywhere that needs to\nguess what a name would be calls this) is how all derived Modalities\nshould work.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params</strong> (AggregateImageParameters):\nThe parameters of the AggregateImage instance. Note that this\nAggregateImageParameters instance does not need to be attached to a\nAggregateImage instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name of the AverageImage instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">aggregate_image</span><span class=\"o\">.</span><span class=\"n\">AggregateImageParameters</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImage.get_names_and_meta", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImage.get_names_and_meta", "kind": "function", "doc": "<p>Generate AggregateImage modality names and metadata.</p>\n\n<p>This method will generate the full cartesian product of the possible\ncombinations. If only some of them are needed, make more than one call\nor weed the results afterwards.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nparent modality that AggregateImage would be derived from</li>\n<li><strong>metric</strong> (list[str] | None, optional):\nlist of the names of metrics to use in name generation, by default\nNone which will result in 'mean' being used.</li>\n<li><strong>mean_image_on_interpolated_data</strong> (bool, optional):\nindicates if interpolated data should be used for instead of\nRawUltrasound, by default False</li>\n<li><strong>release_data_memory</strong> (bool, optional):\nShould parent Modality's data be assigned to None after\ncalculations are complete, by default True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str</strong> (AggregateImageParameters]):\nDictionary where the names of the AggregateImage Statistics index\nthe AggregateImageParameter objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mean_image_on_interpolated_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> dict[slice(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;patkit.metrics.aggregate_image.AggregateImageParameters&#x27;&gt;, None)]:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.aggregate_image.AggregateImage.name", "modulename": "patkit.metrics.aggregate_image", "qualname": "AggregateImage.name", "kind": "variable", "doc": "<p>Identity, metric, and parent data class.</p>\n\n<p>The name will be of the form\n'AggregateImage [metric name] on [data modality class name]'.</p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.calculate_aggregate_images", "modulename": "patkit.metrics.calculate_aggregate_images", "kind": "module", "doc": "<p>Calculate AggregateImages for Modalities.</p>\n"}, {"fullname": "patkit.metrics.calculate_aggregate_images.calculate_aggregate_image", "modulename": "patkit.metrics.calculate_aggregate_images", "qualname": "calculate_aggregate_image", "kind": "function", "doc": "<p>Calculate aggregate image from a Modality.</p>\n\n<p>This method does not really care if the Modality contains images, as long\nas it contains time varying data (which all Modalities do). It will\ncalculate the time aggregate with the given method in params.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nModality to calculate the aggregate on.</li>\n<li><strong>params</strong> (AggregateImageParameters):\nParameters for calculating the aggregate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>AggregateImage</strong>: The new AggregateImage Statistic.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">aggregate_image</span><span class=\"o\">.</span><span class=\"n\">AggregateImageParameters</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">aggregate_image</span><span class=\"o\">.</span><span class=\"n\">AggregateImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_aggregate_images.add_aggregate_images", "modulename": "patkit.metrics.calculate_aggregate_images", "qualname": "add_aggregate_images", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">run_on_interpolated_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_distance_matrices", "modulename": "patkit.metrics.calculate_distance_matrices", "kind": "module", "doc": "<p>Calculate DistanceMatrices between a Session's Recordings.</p>\n"}, {"fullname": "patkit.metrics.calculate_distance_matrices.calculate_mse", "modulename": "patkit.metrics.calculate_distance_matrices", "qualname": "calculate_mse", "kind": "function", "doc": "<p>Calculate mean squared errors between all pairs in the list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>images</strong> (list[np.ndarray]):\nImages of some sort as plain 2D np.ndarrays.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Matrix where matrix[i,j] is the MSE between the ith and jth image in\nthe list. The matrix is symmetric: matrix[i,j] = matrix[j,i].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">images</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_distance_matrices.calculate_distance_matrix", "modulename": "patkit.metrics.calculate_distance_matrices", "qualname": "calculate_distance_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">parent_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">distance_matrix</span><span class=\"o\">.</span><span class=\"n\">DistanceMatrixParameters</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">distance_matrix</span><span class=\"o\">.</span><span class=\"n\">DistanceMatrix</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_distance_matrices.add_distance_matrices", "modulename": "patkit.metrics.calculate_distance_matrices", "qualname": "add_distance_matrices", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">slice_max_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slice_step_to</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sort_criteria</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclusion_list</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">ExclusionList</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_intensity", "modulename": "patkit.metrics.calculate_intensity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.metrics.calculate_intensity.calculate_intensity", "modulename": "patkit.metrics.calculate_intensity", "qualname": "calculate_intensity", "kind": "function", "doc": "<p>Calculate overall intensity on the Modality as a function of time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_modality</strong> (Modality):\nModality containing grayscale data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Overall intensity as a function of time.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent_modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_pd", "modulename": "patkit.metrics.calculate_pd", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.metrics.calculate_pd.calculate_metric", "modulename": "patkit.metrics.calculate_pd", "qualname": "calculate_metric", "kind": "function", "doc": "<p>Module internal method for the actual PD calculation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>abs_diff</strong> (np.ndarray):\nPre-calculated absolute differences</li>\n<li><strong>norm</strong> (str):\nWhich norm to calculate</li>\n<li><strong>mask</strong> (Optional[ImageMask], optional):\nShould the data be masked, by default None</li>\n<li><strong>interpolated</strong> (bool, optional):\n_description_, by default False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The PD curve</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>UnrecognisedNormError</strong>: If the norm is not an lp norm where p belongs in [0, inf], an error is\nraised.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">abs_diff</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">norm</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">ImageMask</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_pd.calculate_slwpd", "modulename": "patkit.metrics.calculate_pd", "qualname": "calculate_slwpd", "kind": "function", "doc": "<p>_summary_</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>raw_diff</strong> (_type_):\n_description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>_type_</strong>: _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_diff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_pd.calculate_pd", "modulename": "patkit.metrics.calculate_pd", "qualname": "calculate_pd", "kind": "function", "doc": "<p>_summary_</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_modality</strong> (Modality):\n_description_</li>\n<li><strong>to_be_computed</strong> (dict[str, PdParameters]):\n_description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[PD]</strong>: _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent_modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">to_be_computed</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PdParameters</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PD</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_pd.add_pd", "modulename": "patkit.metrics.calculate_pd", "qualname": "add_pd", "kind": "function", "doc": "<p>Calculate PD on dataModality and add it to recording.</p>\n\n<p>Positional arguments:\nrecording -- a Recording object\nmodality -- the type of the Modality to be processed. The access will \n    be by recording[modality.__name__]</p>\n\n<p>Keyword arguments:\npreload -- boolean indicating if PD should be calculated on creation \n    (preloaded) or only on access.\nrelease_data_memory -- boolean indicating if the data attribute of the \n    data modality should be set to None after access. Only set this \n    to False, if you know that you have enough memory to hold all \n    of the data in RAM.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">norms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timesteps</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">pd_on_interpolated_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mask_images</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_spline_metric", "modulename": "patkit.metrics.calculate_spline_metric", "kind": "module", "doc": "<p>Functions for producing spline metrics.</p>\n"}, {"fullname": "patkit.metrics.calculate_spline_metric.spline_diff_metric", "modulename": "patkit.metrics.calculate_spline_metric", "qualname": "spline_diff_metric", "kind": "function", "doc": "<p>Calculate difference based spline metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (np.ndarray):\nthe spline data</li>\n<li><strong>time_points</strong> (np.ndarray):\nnumber of time points in the result</li>\n<li><strong>metric</strong> (SplineMetricEnum):\nwhich metric to calculate</li>\n<li><strong>timestep</strong> (int):\nwhich timestep to take</li>\n<li><strong>notice_base</strong> (str):\ntext prepended to logging messages</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: an array of analysis values where array.shape[0] == time_points</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">external_class_extensions</span><span class=\"o\">.</span><span class=\"n\">enum_extensions</span><span class=\"o\">.</span><span class=\"n\">UnionEnumMeta</span><span class=\"o\">.</span><span class=\"n\">make_union</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">UnionEnum</span>,</span><span class=\"param\">\t<span class=\"n\">timestep</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">notice_base</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_spline_metric.spline_nnd_metric", "modulename": "patkit.metrics.calculate_spline_metric", "qualname": "spline_nnd_metric", "kind": "function", "doc": "<p>Calculate nearest neighbour distance based spline metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (np.ndarray):\nthe spline data</li>\n<li><strong>metric</strong> (SplineMetricEnum):\nwhich metric to calculate</li>\n<li><strong>timestep</strong> (int):\nwhich timestep to take</li>\n<li><strong>notice_base</strong> (str):\ntext prepended to logging messages</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: an array of analysis values where <code>array.shape[0] == time_points</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">external_class_extensions</span><span class=\"o\">.</span><span class=\"n\">enum_extensions</span><span class=\"o\">.</span><span class=\"n\">UnionEnumMeta</span><span class=\"o\">.</span><span class=\"n\">make_union</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">UnionEnum</span>,</span><span class=\"param\">\t<span class=\"n\">timestep</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">notice_base</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_spline_metric.calculate_spline_metric", "modulename": "patkit.metrics.calculate_spline_metric", "qualname": "calculate_spline_metric", "kind": "function", "doc": "<p>Calculate SplineMetrics on the Splines. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>splines</strong> (Splines):\nsplines to process</li>\n<li><strong>params</strong> (SplineMetricParameters):\nProcessing options.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Union[SplineMetric, None]</strong>: Returns the new Modality or None if the Modality could not be\ncalculated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">splines</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">modalities</span><span class=\"o\">.</span><span class=\"n\">splines</span><span class=\"o\">.</span><span class=\"n\">Splines</span>,</span><span class=\"param\">\t<span class=\"n\">to_be_computed</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">spline_metric</span><span class=\"o\">.</span><span class=\"n\">SplineMetricParameters</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">spline_metric</span><span class=\"o\">.</span><span class=\"n\">SplineMetric</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.calculate_spline_metric.add_spline_metric", "modulename": "patkit.metrics.calculate_spline_metric", "qualname": "add_spline_metric", "kind": "function", "doc": "<p>Calculate missing spline metrics and add them to the recording.</p>\n\n<p>Positional arguments:\nrecording -- a Recording object\nmodality -- the type of the Modality to be processed. The access will \n    be by recording[modality.__name__]</p>\n\n<p>Keyword arguments:\npreload -- boolean indicating if PD should be calculated on creation \n    (preloaded) or only on access.\nreleaseDataMemory -- boolean indicating if the data attribute of the \n    data modality should be set to None after access. Only set this \n    to False, if you know that you have enough memory to hold all \n    of the data in RAM.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">splines</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">modalities</span><span class=\"o\">.</span><span class=\"n\">splines</span><span class=\"o\">.</span><span class=\"n\">Splines</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timesteps</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_points</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.distance_matrix", "modulename": "patkit.metrics.distance_matrix", "kind": "module", "doc": "<p>DistanceMatrix Statistic and its Parameter class.</p>\n"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters", "kind": "class", "doc": "<p>Parameters used in generating the parent DistanceMatrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_name</strong> (str):\nName of the Modality or Statistic this instance of DistanceMatrix was\ncalculated on.</li>\n<li><strong>metric</strong> (str):\nA string specifying this DistanceMatrix's metric. Defaults to mean\nsquared error.</li>\n<li><strong>release_data_memory</strong> (bool):\nWhether to assign None to <code>parent.data</code> after deriving this Modality\nfrom the data. Currently, has no effect as deriving a DistanceMatrix at\nruntime is not yet supported.</li>\n<li><strong>slice_max_step</strong> (PositiveInt | None):\nSimulate rotating the probe by slicing incrementally so that the sector\nis always the same size. This parameter determines how many steps of\nsize one to take, by default None.</li>\n<li><strong>slice_step_to</strong> (PositiveInt | None):\nInstead of incrementally stepping with same size sectors, generate a\npair of maximally distant sectors for each step size ranging from one\nto <code>slice_step_to</code>, by default None.</li>\n<li><strong>sort</strong> (bool):\nSort the rows and columns of the matrix in order corresponding to the\nalphabetical order of the prompts or according to <code>sort_criteria</code> if it\nis defined. By default, False.</li>\n<li><strong>sort_criteria</strong> (list[str] | None):\nList of substrings to sort the rows and columns by, by default None.\nThe result will consist of blocks where in first block\n<code>sort_criteria[0] in prompt</code> is True, and so on. Final block will\nconsist of any Recordings left after the list has been exhausted.</li>\n</ul>\n", "bases": "patkit.data_structures.metadata_classes.StatisticMetaData"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.parent_name", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.metric", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.metric", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.release_data_memory", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.release_data_memory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.slice_max_step", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.slice_max_step", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Annotated[int, Gt(gt=0)]]"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.slice_step_to", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.slice_step_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Annotated[int, Gt(gt=0)]]"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.sort", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.sort", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.sort_criteria", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.sort_criteria", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.sorted_indeces", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.sorted_indeces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int] | None"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.sorted_prompts", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.sorted_prompts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.sorted_filenames", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.sorted_filenames", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str] | None"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.exclusion_list", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.exclusion_list", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.ExclusionList | None"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrixParameters.model_config", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrixParameters.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrix", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrix", "kind": "class", "doc": "<p>DistanceMatrix gives the distances between the Recordings.</p>\n\n<p>The distances can be e.g. mean squared errors between mean ultrasound\nimages, same for a selected period, etc.</p>\n", "bases": "patkit.data_structures.base_classes.Statistic"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrix.__init__", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrix.__init__", "kind": "function", "doc": "<p>Build a DistanceMatrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>owner</strong> (Session):\nContaining Session.</li>\n<li><strong>metadata</strong> (DistanceMatrixParameters):\nParameters used in calculating this instance of DistanceMatrix.</li>\n<li><strong>file_info</strong> (FileInformation):\nFileInformation -- if any -- for this DistanceMatrix.</li>\n<li><strong>parsed_data</strong> (Optional[np.ndarray], optional):\nThe distance matrix itself, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">distance_matrix</span><span class=\"o\">.</span><span class=\"n\">DistanceMatrixParameters</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrix.accepted_metrics", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrix.accepted_metrics", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;mean_squared_error&#x27;]"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrix.generate_name", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrix.generate_name", "kind": "function", "doc": "<p>Generate a DistanceMatrix name to be used as its unique identifier.</p>\n\n<p>This static method <strong>defines</strong> what the names are. This implementation\npattern (DistanceMatrix.name calls this and anywhere that needs to\nguess what a name would be calls this) is how all derived Modalities\nshould work.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params</strong> (DistanceMatrixParameters):\nThe parameters of the DistanceMatrix instance. Note that this\nDistanceMatrixParameters instance does not need to be attached to a\nDistanceMatrix instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name of the DistanceMatrix instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">distance_matrix</span><span class=\"o\">.</span><span class=\"n\">DistanceMatrixParameters</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrix.get_names_and_meta", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrix.get_names_and_meta", "kind": "function", "doc": "<p>Generate DistanceMatrix names and metadata.</p>\n\n<p>This method will generate the full cartesian product of the possible\ncombinations. If only some of them are needed, make more than one call\nor weed the results afterwards.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent</strong> (Modality | Statistic):\nparent Modality or Statistic that DistanceMatrix would be derived\nfrom.</li>\n<li><strong>metric</strong> (list[str] | None, optional):\nlist of the names of metrics to use in name generation, by default\nNone which will result in 'mean_squared_error' being used.</li>\n<li><strong>release_data_memory</strong> (bool):\nShould parent Modality's data be assigned to None after\ncalculations are complete, by default True.</li>\n<li><strong>slice_max_step</strong> (PositiveInt | None):\nSimulate rotating the probe by slicing incrementally so that the\nsector is always the same size. This parameter determines how many\nsteps of size one to take, by default None.</li>\n<li><strong>slice_step_to</strong> (PositiveInt | None):\nInstead of incrementally stepping with same size sectors, generate\na pair of maximally distant sectors for each step size ranging from\none to <code>slice_step_to</code>, by default None.</li>\n<li><strong>sort</strong> (bool):\nSort the rows and columns of the matrix in order corresponding to\nthe alphabetical order of the prompts or according to\n<code>sort_criteria</code> if it is defined. By default, False.</li>\n<li><strong>sort_criteria</strong> (list[str] | None):\nList of substrings to sort the rows and columns by, by default\nNone. The result will consist of blocks where in first block\n<code>sort_criteria[0] in prompt</code> is True, and so on. Final block will\nconsist of any Recordings left after the list has been exhausted.</li>\n<li><strong>exclusion_list</strong> (ExclusionList | None):\nThe ExclusionList to apply when generating the DistanceMatrices. By\ndefault, None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str</strong> (DistanceMatrixParameters]):\nDictionary where the names of the DistanceMatrices index the\nDistanceMatrixParameter objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span> <span class=\"o\">|</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">Statistic</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">slice_max_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slice_step_to</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sort_criteria</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclusion_list</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">ExclusionList</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> dict[slice(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;patkit.metrics.distance_matrix.DistanceMatrixParameters&#x27;&gt;, None)]:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrix.get_meta", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrix.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.distance_matrix.DistanceMatrix.name", "modulename": "patkit.metrics.distance_matrix", "qualname": "DistanceMatrix.name", "kind": "variable", "doc": "<p>Identity, metric, and parent data class.</p>\n\n<p>The name will be of the form\n'DistanceMatrix [metric name] on [data modality class name]'.</p>\n\n<p>This overrides the default behaviour of Modality.name.</p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.downsample_metric", "modulename": "patkit.metrics.downsample_metric", "kind": "module", "doc": "<p>Downsampling of metrics and possibly other timeseries data.</p>\n"}, {"fullname": "patkit.metrics.downsample_metric.downsample_modality", "modulename": "patkit.metrics.downsample_metric", "qualname": "downsample_modality", "kind": "function", "doc": "<p>Downsample the Modality by the given ratio and return results as a new\nModality. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nThe original Modality.</li>\n<li><strong>downsampling_ratio</strong> (int):\nRatio by which to downsample.</li>\n<li><strong>metadata</strong> (ModalityMetaData):\nMetadata for the new downsampled Modality.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Modality</strong>: This Modality will match the type and metadata of the original, but\nwill have the metadata fields that describe downsampling updated\ncorrectly. The Modality's data and timevector will have been\ndownsampled and its name will show the downsampling ratio used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">downsampling_ratio</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.downsample_metric.downsample_metrics", "modulename": "patkit.metrics.downsample_metric", "qualname": "downsample_metrics", "kind": "function", "doc": "<p>Apply downsampling to Modalities matching the pattern and add them back to\nthe Recording.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording</strong> (Recording):\nThe Recording which contains the Modalities and to which the new\ndownsampled modalities will be added.</li>\n<li><strong>downsampling_parameters</strong> (DownsampleParams):\nParameters for the downsampling. See the DownsampleParams class for\ndetails.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: For now only match_timestep = True is allowed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">downsampling_parameters</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">DownsampleParams</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.downsample_metric.downsample_metrics_in_session", "modulename": "patkit.metrics.downsample_metric", "qualname": "downsample_metrics_in_session", "kind": "function", "doc": "<p>Downsample metrics in the session.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording_session</strong> (Session):\n_description_</li>\n<li><strong>data_run_config</strong> (DataConfig):\n_description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording_session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">data_run_config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">DataConfig</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.metrics_helpers", "modulename": "patkit.metrics.metrics_helpers", "kind": "module", "doc": "<p>Functions used by several metrics in their calculation.</p>\n"}, {"fullname": "patkit.metrics.metrics_helpers.calculate_timevector", "modulename": "patkit.metrics.metrics_helpers", "qualname": "calculate_timevector", "kind": "function", "doc": "<p>Calculater the timevector of a derived Modality.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>original_timevector</strong> (np.ndarray):\nTimevector of the Modality that the metric is calculated on.</li>\n<li><strong>timestep</strong> (int):\nTimestep used in calculating the metric.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The calculated timevector which will be shorter than the original.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If timestep is smaller than 1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">original_timevector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">timestep</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.ofreg", "modulename": "patkit.metrics.ofreg", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.metrics.ofreg.ofreg_logger", "modulename": "patkit.metrics.ofreg", "qualname": "ofreg_logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger patkit.ofreg (DEBUG)&gt;"}, {"fullname": "patkit.metrics.ofreg.parallel_register", "modulename": "patkit.metrics.ofreg", "qualname": "parallel_register", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ns</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">num_frames</span>, </span><span class=\"param\"><span class=\"n\">storage</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.ofreg.of", "modulename": "patkit.metrics.ofreg", "qualname": "of", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.pd", "modulename": "patkit.metrics.pd", "kind": "module", "doc": "<p>Modality for PD (Pixel Difference) and its parameter class.</p>\n"}, {"fullname": "patkit.metrics.pd.PdParameters", "modulename": "patkit.metrics.pd", "qualname": "PdParameters", "kind": "class", "doc": "<p>Parameters used in generating the parent PD modality.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_name</strong> (str):\nName of the Modality this instance of PD was calculated on.</li>\n<li><strong>metric</strong> (str):\nA string specifying this Modality's metric. Defaults to the l1 norm.</li>\n<li><strong>timestep</strong> (int):\nA  positive integer used as the timestep in calculating this Modality's\ndata. Defaults to 1, which means comparison of consecutive frames.</li>\n<li><strong>release_data_memory</strong> (bool):\nWhether to assign None to <code>parent.data</code> after deriving this Modality\nfrom the data. Currently, has no effect as deriving PD at runtime is not\nyet supported.</li>\n<li><strong>interpolated</strong> (bool):\nShould this PD be calculated on interpolated images. Defaults to False\nfor calculating PD on raw data. This one really can only be used on 2D\nultrasound data. For other data raw data is the regular data.</li>\n<li><strong>image_mask</strong> (ImageMask):\nShould this PD be calculated on a masked image. Defaults to None to\ncalculate PD on the whole image.</li>\n</ul>\n", "bases": "patkit.data_structures.metadata_classes.ModalityMetaData"}, {"fullname": "patkit.metrics.pd.PdParameters.parent_name", "modulename": "patkit.metrics.pd", "qualname": "PdParameters.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.pd.PdParameters.metric", "modulename": "patkit.metrics.pd", "qualname": "PdParameters.metric", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.pd.PdParameters.timestep", "modulename": "patkit.metrics.pd", "qualname": "PdParameters.timestep", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Annotated[int, Gt(gt=0)]"}, {"fullname": "patkit.metrics.pd.PdParameters.image_mask", "modulename": "patkit.metrics.pd", "qualname": "PdParameters.image_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[patkit.constants.ImageMask]"}, {"fullname": "patkit.metrics.pd.PdParameters.interpolated", "modulename": "patkit.metrics.pd", "qualname": "PdParameters.interpolated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.metrics.pd.PdParameters.release_data_memory", "modulename": "patkit.metrics.pd", "qualname": "PdParameters.release_data_memory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.metrics.pd.PdParameters.model_config", "modulename": "patkit.metrics.pd", "qualname": "PdParameters.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.metrics.pd.PD", "modulename": "patkit.metrics.pd", "qualname": "PD", "kind": "class", "doc": "<p>Represent Pixel Difference (PD) as a Modality.</p>\n", "bases": "patkit.data_structures.data_structures.Modality"}, {"fullname": "patkit.metrics.pd.PD.__init__", "modulename": "patkit.metrics.pd", "qualname": "PD.__init__", "kind": "function", "doc": "<p>Build a Pixel Difference (PD) Modality       </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>owner</strong> (Recording):\nthe containing Recording.</li>\n<li><strong>metadata</strong> (PdParameters):\nParameters used in calculating this instance of PD.</li>\n<li><strong>file_info</strong> (FileInformation):\nSave paths for numerical and meta data.</li>\n<li><strong>parsed_data</strong> (Optional[ModalityData], optional):\nModalityData object, by default None. Contains PD values,\nsampling rate, and either timevector and/or time_offset. Providing\na timevector overrides any time_offset value given, but in absence\nof a timevector the time_offset will be applied on reading the data\nfrom file.</li>\n<li><strong>time_offset</strong> (Optional[float], optional):\nIf not specified or 0, timeOffset will be copied from dataModality,\nby default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PdParameters</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.metrics.pd.PD.accepted_metrics", "modulename": "patkit.metrics.pd", "qualname": "PD.accepted_metrics", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;l3&#x27;, &#x27;l4&#x27;, &#x27;l5&#x27;, &#x27;l6&#x27;, &#x27;l7&#x27;, &#x27;l8&#x27;, &#x27;l9&#x27;, &#x27;l10&#x27;, &#x27;inf&#x27;]"}, {"fullname": "patkit.metrics.pd.PD.generate_name", "modulename": "patkit.metrics.pd", "qualname": "PD.generate_name", "kind": "function", "doc": "<p>Generate a PD modality name to be used as its unique identifier.</p>\n\n<p>This static method <strong>defines</strong> what the names are. This implementation\npattern (PD.name calls this and anywhere that needs to guess what a\nname would be calls this) is how all derived Modalities should work.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params</strong> (PdParameters):\nThe parameters of the PD instance. Note that this PdParameters\ninstance does not need to be attached to a PD instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name of the PD instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PdParameters</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.pd.PD.get_names_and_meta", "modulename": "patkit.metrics.pd", "qualname": "PD.get_names_and_meta", "kind": "function", "doc": "<p>Generate PD modality names and metadata.</p>\n\n<p>This method will generate the full cartesian product of the possible\ncombinations. If only some of them are needed, make more than one call\nor weed the results afterwards.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nparent modality that PD would be derived from</li>\n<li><strong>norms</strong> (List[str], optional):\nlist of norms to be calculated, defaults to 'l2'.</li>\n<li><strong>timesteps</strong> (List[int], optional):\nlist of timesteps to be used, defaults to 1.</li>\n<li><strong>pd_on_interpolated_data</strong> (bool, optional):\nindicates if interpolated data should be used for instead of\nRawUltrasound, by default False</li>\n<li><strong>mask_images</strong> (bool, optional):\nindicates if images should be masked, by default False</li>\n<li><strong>release_data_memory</strong> (bool):\nShould parent Modality's data be assigned to None after calculations\nare complete, by default True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str</strong> (PdParameters]):\nDictionary where the names of the PD Modalities index the \nPdParameter objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">norms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timesteps</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pd_on_interpolated_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mask_images</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> dict[slice(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;patkit.metrics.pd.PdParameters&#x27;&gt;, None)]:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.pd.PD.get_meta", "modulename": "patkit.metrics.pd", "qualname": "PD.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation. </p>\n\n<p>Subclasses should override this method if any of their fields require\nspecial handling such as derived Enums needing to be converted to plain\ntext etc. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.pd.PD.name", "modulename": "patkit.metrics.pd", "qualname": "PD.name", "kind": "variable", "doc": "<p>Identity, metric, and parent data class.</p>\n\n<p>The name will be of the form\n'PD [metric name] on [data modality class name]'.</p>\n\n<p>This overrides the default behaviour of Modality.name.</p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.spline_metric", "modulename": "patkit.metrics.spline_metric", "kind": "module", "doc": "<p>SplineMetric and supporting classes.</p>\n"}, {"fullname": "patkit.metrics.spline_metric.SplineMetricParameters", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetricParameters", "kind": "class", "doc": "<p>Parameters used in generating a SplineMetric modality.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metric</strong> (SplineMetricEnum):\nA string specifying this Modality's metric. Defaults to the l1 norm.</li>\n<li><strong>timestep</strong> (PositiveInt):\nA  positive integer used as the timestep in calculating this Modality's\ndata. Defaults to 1, which means comparison of consecutive frames.</li>\n<li><strong>release_data_memory</strong> (bool):\nWhether to assign None to <code>parent.data</code> after deriving this Modality\nfrom the data. Currently, has no effect as deriving SplineMetric at\nruntime is not yet supported.</li>\n<li><strong>exclude_points</strong> (tuple[int, int]):\nHow many points to exclude from the (beginning, end) of the spline,\nby default, None.</li>\n</ul>\n", "bases": "patkit.data_structures.metadata_classes.ModalityMetaData"}, {"fullname": "patkit.metrics.spline_metric.SplineMetricParameters.parent_name", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetricParameters.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.spline_metric.SplineMetricParameters.metric", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetricParameters.metric", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.external_class_extensions.enum_extensions.UnionEnumMeta.make_union.&lt;locals&gt;.UnionEnum"}, {"fullname": "patkit.metrics.spline_metric.SplineMetricParameters.timestep", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetricParameters.timestep", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Annotated[int, Gt(gt=0)]"}, {"fullname": "patkit.metrics.spline_metric.SplineMetricParameters.release_data_memory", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetricParameters.release_data_memory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.metrics.spline_metric.SplineMetricParameters.exclude_points", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetricParameters.exclude_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[tuple[int, int]]"}, {"fullname": "patkit.metrics.spline_metric.SplineMetricParameters.model_config", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetricParameters.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.metrics.spline_metric.SplineMetric", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetric", "kind": "class", "doc": "<p>Represent a SplineMetric as a Modality.</p>\n", "bases": "patkit.data_structures.data_structures.Modality"}, {"fullname": "patkit.metrics.spline_metric.SplineMetric.__init__", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetric.__init__", "kind": "function", "doc": "<p>Build a SplineMetric Modality.       </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>owner</strong> (Recording):\nthe containing Recording.</li>\n<li><strong>metadata</strong> (SplineMetricParameters):\nParameters used in calculating this instance of SplineMetric.</li>\n<li><strong>file_info</strong> (FileInformation):\n_description_</li>\n<li><strong>parsed_data</strong> (Optional[ModalityData], optional):\nModalityData object, by default None. Contains SplineMetric values,\nsampling rate,and either timevector and/or time_offset. Providing a\ntimevector overrides any time_offset value given, but in absence of\na timevector the time_offset will be applied on reading the data\nfrom file.</li>\n<li><strong>time_offset</strong> (Optional[float], optional):\nTime offset in seconds against the Recordings baseline. If not\nspecified or 0, timeOffset will be copied from dataModality, by\ndefault None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">spline_metric</span><span class=\"o\">.</span><span class=\"n\">SplineMetricParameters</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.metrics.spline_metric.SplineMetric.generate_name", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetric.generate_name", "kind": "function", "doc": "<p>Generate a SplineMetric name to be used as its unique identifier.</p>\n\n<p>This static method <strong>defines</strong> what the names are. This implementation\npattern (SplineMetric.name calls this and anywhere that needs to guess\nwhat a name would be calls this) is how all derived Modalities should\nwork.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params</strong> (SplineMetricParameters):\nThe parameters of the SplineMetric instance. Note that this\nSplineMetricParameters instance does not need to be attached to a\nSplineMetric instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: Name of the SplineMetric instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">spline_metric</span><span class=\"o\">.</span><span class=\"n\">SplineMetricParameters</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.spline_metric.SplineMetric.get_names_and_meta", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetric.get_names_and_meta", "kind": "function", "doc": "<p>Generate SplineMetric modality names and metadata.</p>\n\n<p>This method will generate the full cartesian product of the possible\ncombinations. If only some of them are needed, make more than one call\nor weed the results afterwards.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nparent modality that SplineMetric would be derived from</li>\n<li><strong>metrics</strong> (List[str], optional):\nlist of metrics to be calculated, defaults to 'l2'.</li>\n<li><strong>timesteps</strong> (List[int], optional):\nlist of timesteps to be used, defaults to 1.</li>\n<li><strong>exclude_points</strong> (tuple[int, int]):\nHow many points to exclude from the (beginning, end) of the spline,\nby default, None.</li>\n<li><strong>release_data_memory</strong> (bool):\nShould parent Modality's data be assigned to None after calculations\nare complete, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str</strong> (SplineMetricParameters]):\nDictionary where the names of the SplineMetric Modalities index the\nSplineMetricParameter objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timesteps</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_points</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> dict[slice(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;patkit.metrics.spline_metric.SplineMetricParameters&#x27;&gt;, None)]:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.spline_metric.SplineMetric.get_meta", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetric.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation. </p>\n\n<p>Subclasses should override this method if any of their fields require\nspecial handling such as derived Enums needing to be converted to plain\ntext etc. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.spline_metric.SplineMetric.name", "modulename": "patkit.metrics.spline_metric", "qualname": "SplineMetric.name", "kind": "variable", "doc": "<p>Identity, metric, and parent data class.</p>\n\n<p>The name will be of the form\n'PD [metric name] on [data modality class name]'.</p>\n\n<p>This overrides the default behaviour of Modality.name.</p>\n", "annotation": ": str"}, {"fullname": "patkit.metrics.tongue_shape_analysis", "modulename": "patkit.metrics.tongue_shape_analysis", "kind": "module", "doc": "<p>tshape_analysis - Code for the analysis of tongue shape contours</p>\n\n<p>Original version Copyright (C) 2015 Katherine Dawson <a href=\"&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x6b;&#x6d;&#100;&#x61;&#119;&#115;&#111;&#110;8&#x40;&#103;m&#97;&#x69;&#108;.c&#x6f;&#x6d;\">&#x6b;&#x6d;&#100;&#x61;&#119;&#115;&#111;&#110;8&#x40;&#103;m&#97;&#x69;&#108;.c&#x6f;&#x6d;</a>\nAvailable at <a href=\"https://github.com/kdawson2/tshape_analysis/\">https://github.com/kdawson2/tshape_analysis/</a></p>\n"}, {"fullname": "patkit.metrics.tongue_shape_analysis.procrustes", "modulename": "patkit.metrics.tongue_shape_analysis", "qualname": "procrustes", "kind": "function", "doc": "<p>Compare the two shapes with procrustes analysis.</p>\n\n<p>See Katherine M. Dawson, Mark K. Tiede &amp; D. H. Whalen (2016) Methods for\nquantifying tongue shape and complexity using ultrasound imaging, Clinical\nLinguistics &amp; Phonetics, 30:3-5, 328-344, DOI:\n10.3109/02699206.2015.1099164 for details.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>reference_shape</strong> (np.ndarray):\nthe reference spline</li>\n<li><strong>compared_shape</strong> (np.ndarray):\nthe spline to be compared to the reference</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The procrustes similarity value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reference_shape</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">compared_shape</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.tongue_shape_analysis.modified_curvature_index", "modulename": "patkit.metrics.tongue_shape_analysis", "qualname": "modified_curvature_index", "kind": "function", "doc": "<p>Calculate the modified curvature index.</p>\n\n<p>The results are smoothed with a 5th order Butterworth lowpass filter with a\ncritical frequency of 1/4. The filter is applied both forwards and\nbackwards to padded data with filtfilt. Padding is removed before returning\nthe results.</p>\n\n<p>See Katherine M. Dawson, Mark K. Tiede &amp; D. H. Whalen (2016) Methods for\nquantifying tongue shape and complexity using ultrasound imaging, Clinical\nLinguistics &amp; Phonetics, 30:3-5, 328-344, DOI:\n10.3109/02699206.2015.1099164 for details.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (np.ndarray):\none spline with axes ordered: x-y, spline points</li>\n<li><strong>run_filter</strong> (bool):\nShould the curvature be filtered before integration.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: the modified curvature index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">run_filter</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.tongue_shape_analysis.fourier_tongue_shape_analysis", "modulename": "patkit.metrics.tongue_shape_analysis", "qualname": "fourier_tongue_shape_analysis", "kind": "function", "doc": "<p>Calculate fourier transform of a spline.</p>\n\n<p>The output of the DFT analysis for our purposes is the value of a given\nshape provided by the \ufb01rst three Fourier coe\ufb03cients. The \ufb01rst coe\ufb03cient of\nthe Fourier transform (C1) corresponds to the largest scale features of the\nshape. The higher coe\ufb03cients re\ufb02ect smaller scale features. Very high\ncoe\ufb03cients represent small variations in the shape, often introduced during\nthe contour \ufb01tting procedure (i.e. noise). Hence, coe\ufb03cients above the\nthird (C3) are not included in this analysis. Each coe\ufb03cient has a real and\nan imaginary part, and the location of a data point on these real and\nimaginary axes can be described in radial coordinates, giving the\ncorresponding phase and magnitude of the coe\ufb03cient.</p>\n\n<p>See Katherine M. Dawson, Mark K. Tiede &amp; D. H. Whalen (2016) Methods for\nquantifying tongue shape and complexity using ultrasound imaging, Clinical\nLinguistics &amp; Phonetics, 30:3-5, 328-344, DOI:\n10.3109/02699206.2015.1099164 for details.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tongue_data</strong> (np.ndarray):\none spline with axes ordered: x-y, spline points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: array of floats with the axes ordered: \nreal-imaginary-modulus, paramvector</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.tongue_shape_analysis.spline_shape_metric", "modulename": "patkit.metrics.tongue_shape_analysis", "qualname": "spline_shape_metric", "kind": "function", "doc": "<p>Calculate shape spline metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong> (np.ndarray):\nthe spline data</li>\n<li><strong>metric</strong> (SplineMetricEnum):\nwhich metric to calculate</li>\n<li><strong>notice_base</strong> (str):\ntext prepended to logging messages</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: an array of analysis values where array.shape[0] == time_points</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: if asked for regular curvature index instead of the modified one.</li>\n<li><strong>NotImplementedError</strong>: if asked for procrustes analysis because passing reference shape in\nhasn't been implemented.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">SplineShapesEnum</span>,</span><span class=\"param\">\t<span class=\"n\">notice_base</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.metrics.tongue_shape_analysis.run_analysis", "modulename": "patkit.metrics.tongue_shape_analysis", "qualname": "run_analysis", "kind": "function", "doc": "<p>This is only a place holder function showing how each metric is supposed\nto be run until things are more like patkit in general.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities", "modulename": "patkit.modalities", "kind": "module", "doc": "<p>Modalities and metadata for recorded (external) data.</p>\n"}, {"fullname": "patkit.modalities.recorded_metadata_classes", "modulename": "patkit.modalities.recorded_metadata_classes", "kind": "module", "doc": "<p>Metadata for recorded (external) data.</p>\n"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta", "kind": "class", "doc": "<p>Metadata for RawUltrasound data.</p>\n\n<p>Note that we do not include time_offset from the meta file here so that\npeople do not accidentally rely on setting it here to alter the time_offset\nof the ultrasound data which is instead a member of Recording/Source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>angle</strong> (float):\nangle between two scanlines in radians</li>\n<li><strong>bits_per_pixel</strong> (int):\nbyte length of a single pixel in the .ult file</li>\n<li><strong>frames_per_sec</strong> (float):\nframe rate of ultrasound recording</li>\n<li><strong>kind</strong> (int):\nmaker of probe used. 0 = Telemed, 1 = Ultrasonix, -1 = unknown (usually\nfrom older data where AAA did not save this information)</li>\n<li><strong>meta_file</strong> (Path):\nPath of the <code>US.txt</code> or <code>.param</code> file</li>\n<li><strong>num_vectors</strong> (int):\nnumber of scanlines in a frame</li>\n<li><strong>pix_per_vector</strong> (int):\nnumber of pixels in a scanline</li>\n<li><strong>pixels_per_mm</strong> (float):\ndepth resolution of a scanline</li>\n<li><strong>zero_offset</strong> (float):\noffset of the first pixel from the probe origin in pixels</li>\n</ul>\n", "bases": "patkit.data_structures.metadata_classes.ModalityMetaData"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.angle", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.angle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.bits_per_pixel", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.bits_per_pixel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.frames_per_sec", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.frames_per_sec", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.kind", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.kind", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.AaaProbeType"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.meta_file", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.meta_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib._local.Path"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.num_vectors", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.num_vectors", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.pix_per_vector", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.pix_per_vector", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.pixels_per_mm", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.pixels_per_mm", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.zero_offset", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.zero_offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "patkit.modalities.recorded_metadata_classes.RawUltrasoundMeta.model_config", "modulename": "patkit.modalities.recorded_metadata_classes", "qualname": "RawUltrasoundMeta.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.modalities.recorded_modalities", "modulename": "patkit.modalities.recorded_modalities", "kind": "module", "doc": "<p>Recorded data modalities</p>\n"}, {"fullname": "patkit.modalities.recorded_modalities.MonoAudio", "modulename": "patkit.modalities.recorded_modalities", "qualname": "MonoAudio", "kind": "class", "doc": "<p>A mono audio track.</p>\n\n<p>Audio data is assumed to be small enough for the\nwhole session to fit in working memory and therefore\nthis Modality preloads data at construction time.</p>\n", "bases": "patkit.data_structures.data_structures.Modality"}, {"fullname": "patkit.modalities.recorded_modalities.MonoAudio.__init__", "modulename": "patkit.modalities.recorded_modalities", "qualname": "MonoAudio.__init__", "kind": "function", "doc": "<p>Create a MonoAudio track.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.</p>\n\n<p>Keyword arguments:\ndata_path -- path of the wav file\nload_path -- path of the saved data - both wav and metadata\nparent -- the Modality this one was derived from. None means this\n    is an underived data Modality.\nparsed_data -- ModalityData object containing waveform, sampling rate,\n    and either timevector and/or time_offset. Providing a timevector\n    overrides any time_offset value given, but in absence of a\n    timevector the time_offset will be applied on reading the data\n    from file.\ngo_signal -- time of the go_signal in seconds from start of recording.\nhas_speech -- True if the heuristic algorithm thinks there is speech\n    audio in the sample.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">detect_beep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">go_signal</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">has_speech</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.modalities.recorded_modalities.MonoAudio.generate_name", "modulename": "patkit.modalities.recorded_modalities", "qualname": "MonoAudio.generate_name", "kind": "function", "doc": "<p>Abstract version of generating a Modality name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.MonoAudio.detect_beep", "modulename": "patkit.modalities.recorded_modalities", "qualname": "MonoAudio.detect_beep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.modalities.recorded_modalities.MonoAudio.go_signal", "modulename": "patkit.modalities.recorded_modalities", "qualname": "MonoAudio.go_signal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.modalities.recorded_modalities.MonoAudio.has_speech", "modulename": "patkit.modalities.recorded_modalities", "qualname": "MonoAudio.has_speech", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.modalities.recorded_modalities.MonoAudio.get_meta", "modulename": "patkit.modalities.recorded_modalities", "qualname": "MonoAudio.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation. </p>\n\n<p>Subclasses should override this method if any of their fields require\nspecial handling such as derived Enums needing to be converted to plain\ntext etc. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound", "kind": "class", "doc": "<p>Ultrasound Recording with raw (probe return) data.</p>\n", "bases": "patkit.data_structures.data_structures.Modality"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.__init__", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.__init__", "kind": "function", "doc": "<p>Create a RawUltrasound Modality.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.</p>\n\n<p>Keyword arguments:\ndata_path -- path of the ultrasound file\nload_path -- path of the saved data - both ultrasound and metadata\nparsed_data -- ModalityData object containing raw ultrasound,\n    sampling rate, and either timevector and/or time_offset.\n    Providing a timevector overrides any time_offset value given,\n    but in absence of a timevector the time_offset will be applied\n    on reading the data from file.\nmeta -- a dict with (at least) the keys listed in\n    RawUltrasound.requiredMetaKeys. Extra keys will be ignored.\n    Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">modalities</span><span class=\"o\">.</span><span class=\"n\">recorded_metadata_classes</span><span class=\"o\">.</span><span class=\"n\">RawUltrasoundMeta</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.generate_name", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.generate_name", "kind": "function", "doc": "<p>Abstract version of generating a Modality name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.video_has_been_stored", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.video_has_been_stored", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.stored_video", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.stored_video", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.get_meta", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation. </p>\n\n<p>Subclasses should override this method if any of their fields require\nspecial handling such as derived Enums needing to be converted to plain\ntext etc. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">modalities</span><span class=\"o\">.</span><span class=\"n\">recorded_metadata_classes</span><span class=\"o\">.</span><span class=\"n\">RawUltrasoundMeta</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.data", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.data", "kind": "variable", "doc": "<p>The data of this Modality as a NumPy array. </p>\n\n<p>The data refers to the actual data this modality represents\nand for DerivedModality it is the result of running the \nmodality's algorithm on the original data.</p>\n\n<p>The dimensions of the array are in the \norder of [time, others]</p>\n\n<p>If this modality is not preloaded, accessing this property will\ncause data to be loaded on the fly _and_ saved in memory. To \nrelease the memory, assign None to this Modality's data.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.raw_image", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.raw_image", "kind": "function", "doc": "<p>Return the raw ultrasound frame at index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index</strong> (int):\nIndex to look up.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The frame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.interpolated_image", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.interpolated_image", "kind": "function", "doc": "<p>Return an interpolated version of the ultrasound frame at index.</p>\n\n<p>A new interpolated image is calculated, if necessary. To avoid large\nmemory overheads only the current frame's interpolated version maybe\nstored in memory.</p>\n\n<p>Arguments: index - the index of the ultrasound frame to be returned</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.interpolated_frames", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.interpolated_frames", "kind": "function", "doc": "<p>Return an interpolated version of the ultrasound frame at index.</p>\n\n<p>A new interpolated image is calculated, if necessary. To avoid large\nmemory overheads only the current frame's interpolated version maybe\nstored in memory.</p>\n\n<p>Arguments: index - the index of the ultrasound frame to be returned</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.RawUltrasound.interpolation_params", "modulename": "patkit.modalities.recorded_modalities", "qualname": "RawUltrasound.interpolation_params", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "patkit.modalities.recorded_modalities.Video", "modulename": "patkit.modalities.recorded_modalities", "qualname": "Video", "kind": "class", "doc": "<p>Video recording.</p>\n", "bases": "patkit.data_structures.data_structures.Modality"}, {"fullname": "patkit.modalities.recorded_modalities.Video.__init__", "modulename": "patkit.modalities.recorded_modalities", "qualname": "Video.__init__", "kind": "function", "doc": "<p>Create a Video Modality.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.</p>\n\n<p>Keyword arguments:\ndata_path -- path of the ultrasound file\nload_path -- path of the saved data - both ultrasound and metadata\nparent -- the Modality this one was derived from. Should be None\n    which means this is an underived data Modality.\nparsed_data -- ModalityData object containing raw ultrasound,\n    sampling rate, and either timevector and/or time_offset. Providing\n    a timevector overrides any time_offset value given, but in absence\n    of a timevector the time_offset will be applied on reading the\n    data from file.\nmeta -- a dict with (at least) the keys listed in\n    Video.requiredMetaKeys. Extra keys will be ignored.\n    Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.modalities.recorded_modalities.Video.requiredMetaKeys", "modulename": "patkit.modalities.recorded_modalities", "qualname": "Video.requiredMetaKeys", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;FramesPerSec&#x27;]"}, {"fullname": "patkit.modalities.recorded_modalities.Video.generate_name", "modulename": "patkit.modalities.recorded_modalities", "qualname": "Video.generate_name", "kind": "function", "doc": "<p>Abstract version of generating a Modality name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.Video.get_meta", "modulename": "patkit.modalities.recorded_modalities", "qualname": "Video.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation. </p>\n\n<p>Subclasses should override this method if any of their fields require\nspecial handling such as derived Enums needing to be converted to plain\ntext etc. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.ThreeD_Ultrasound", "modulename": "patkit.modalities.recorded_modalities", "qualname": "ThreeD_Ultrasound", "kind": "class", "doc": "<p>Ultrasound Recording with interpolated 3D/4D data.</p>\n", "bases": "patkit.data_structures.data_structures.Modality"}, {"fullname": "patkit.modalities.recorded_modalities.ThreeD_Ultrasound.__init__", "modulename": "patkit.modalities.recorded_modalities", "qualname": "ThreeD_Ultrasound.__init__", "kind": "function", "doc": "<p>Create a RawUltrasound Modality.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.</p>\n\n<p>Keyword arguments:\ndata_path -- path of the ultrasound file\nload_path -- path of the saved data - both ultrasound and metadata\nparsed_data -- ModalityData object containing raw ultrasound,\n    sampling rate, and either timevector and/or time_offset.\n    Providing a timevector overrides any time_offset value given,\n    but in absence of a timevector the time_offset will be applied\n    on reading the data from file.\nmeta -- a dict with (at least) the keys listed in\n    RawUltrasound.requiredMetaKeys. Extra keys will be ignored.\n    Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">file_info</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">FileInformation</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.modalities.recorded_modalities.ThreeD_Ultrasound.requiredMetaKeys", "modulename": "patkit.modalities.recorded_modalities", "qualname": "ThreeD_Ultrasound.requiredMetaKeys", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;meta_file&#x27;, &#x27;Angle&#x27;, &#x27;FramesPerSec&#x27;, &#x27;NumVectors&#x27;, &#x27;PixPerVector&#x27;, &#x27;PixelsPerMm&#x27;, &#x27;ZeroOffset&#x27;]"}, {"fullname": "patkit.modalities.recorded_modalities.ThreeD_Ultrasound.generate_name", "modulename": "patkit.modalities.recorded_modalities", "qualname": "ThreeD_Ultrasound.generate_name", "kind": "function", "doc": "<p>Abstract version of generating a Modality name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.recorded_modalities.ThreeD_Ultrasound.data", "modulename": "patkit.modalities.recorded_modalities", "qualname": "ThreeD_Ultrasound.data", "kind": "variable", "doc": "<p>The data of this Modality as a NumPy array. </p>\n\n<p>The data refers to the actual data this modality represents\nand for DerivedModality it is the result of running the \nmodality's algorithm on the original data.</p>\n\n<p>The dimensions of the array are in the \norder of [time, others]</p>\n\n<p>If this modality is not preloaded, accessing this property will\ncause data to be loaded on the fly _and_ saved in memory. To \nrelease the memory, assign None to this Modality's data.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.modalities.recorded_modalities.ThreeD_Ultrasound.get_meta", "modulename": "patkit.modalities.recorded_modalities", "qualname": "ThreeD_Ultrasound.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation. </p>\n\n<p>Subclasses should override this method if any of their fields require\nspecial handling such as derived Enums needing to be converted to plain\ntext etc. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.splines", "modulename": "patkit.modalities.splines", "kind": "module", "doc": "<p>Modality for Splines and its meta data class.</p>\n"}, {"fullname": "patkit.modalities.splines.SplineMetadata", "modulename": "patkit.modalities.splines", "qualname": "SplineMetadata", "kind": "class", "doc": "<p>Metadata of a Splines Modality.</p>\n", "bases": "patkit.data_structures.metadata_classes.ModalityMetaData"}, {"fullname": "patkit.modalities.splines.SplineMetadata.coordinates", "modulename": "patkit.modalities.splines", "qualname": "SplineMetadata.coordinates", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.CoordinateSystems"}, {"fullname": "patkit.modalities.splines.SplineMetadata.number_of_sample_points", "modulename": "patkit.modalities.splines", "qualname": "SplineMetadata.number_of_sample_points", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "patkit.modalities.splines.SplineMetadata.confidence_exists", "modulename": "patkit.modalities.splines", "qualname": "SplineMetadata.confidence_exists", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "patkit.modalities.splines.SplineMetadata.axis_names", "modulename": "patkit.modalities.splines", "qualname": "SplineMetadata.axis_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[str]"}, {"fullname": "patkit.modalities.splines.SplineMetadata.model_config", "modulename": "patkit.modalities.splines", "qualname": "SplineMetadata.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "default_value": "{&#x27;extra&#x27;: &#x27;forbid&#x27;}"}, {"fullname": "patkit.modalities.splines.Splines", "modulename": "patkit.modalities.splines", "qualname": "Splines", "kind": "class", "doc": "<p>Splines from 2D ultrasound data.</p>\n", "bases": "patkit.data_structures.data_structures.Modality"}, {"fullname": "patkit.modalities.splines.Splines.generate_name", "modulename": "patkit.modalities.splines", "qualname": "Splines.generate_name", "kind": "function", "doc": "<p>Abstract version of generating a Modality name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">metadata_classes</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.splines.Splines.data", "modulename": "patkit.modalities.splines", "qualname": "Splines.data", "kind": "variable", "doc": "<p>The data of this Modality as a NumPy array. </p>\n\n<p>The data refers to the actual data this modality represents\nand for DerivedModality it is the result of running the \nmodality's algorithm on the original data.</p>\n\n<p>The dimensions of the array are in the \norder of [time, others]</p>\n\n<p>If this modality is not preloaded, accessing this property will\ncause data to be loaded on the fly _and_ saved in memory. To \nrelease the memory, assign None to this Modality's data.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.modalities.splines.Splines.get_meta", "modulename": "patkit.modalities.splines", "qualname": "Splines.get_meta", "kind": "function", "doc": "<p>Get meta data as a dict.</p>\n\n<p>This is a helper method for saving as nested text. Allows for rewriting\nany fields that need a simpler representation. </p>\n\n<p>Subclasses should override this method if any of their fields require\nspecial handling such as derived Enums needing to be converted to plain\ntext etc. </p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: The meta data in a dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.splines.Splines.in_polar", "modulename": "patkit.modalities.splines", "qualname": "Splines.in_polar", "kind": "variable", "doc": "<p>Spline coordinates in polar coordinates.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The coordinates</li>\n</ul>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.modalities.splines.Splines.cartesian_spline", "modulename": "patkit.modalities.splines", "qualname": "Splines.cartesian_spline", "kind": "function", "doc": "<p>Spline coordinates in Cartesian coordinates.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The coordinates</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.modalities.splines.Splines.in_cartesian", "modulename": "patkit.modalities.splines", "qualname": "Splines.in_cartesian", "kind": "variable", "doc": "<p>Spline coordinates in Cartesian coordinates.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The coordinates</li>\n</ul>\n", "annotation": ": numpy.ndarray"}, {"fullname": "patkit.patgrid", "modulename": "patkit.patgrid", "kind": "module", "doc": "<p>PatGrid and its components are a GUI friendly encapsulation of\n<code>textgrids.TextGrid</code>.</p>\n"}, {"fullname": "patkit.patgrid.PatAnnotation", "modulename": "patkit.patgrid", "qualname": "PatAnnotation", "kind": "class", "doc": "<p>Base class for Textgrid Point and Interval to enable editing with GUI.</p>\n", "bases": "abc.ABC"}, {"fullname": "patkit.patgrid.PatAnnotation.label", "modulename": "patkit.patgrid", "qualname": "PatAnnotation.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.patgrid.PatAnnotation.contains", "modulename": "patkit.patgrid", "qualname": "PatAnnotation.contains", "kind": "function", "doc": "<p>Does this Interval contain <code>time</code> or is this Point at <code>time</code>.</p>\n\n<p>'Being at time' is defined in the sense of 'within epsilon of time'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time</strong> (float):\nThe time in seconds to test against this Annotation.</li>\n<li><strong>epsilon</strong> (float | None):\nThe precision (in seconds) to use in comparisons. The default value\nNone will result in PATKIT_EPSILON, being used. For expected\nbehaviour, <code>configuration.data_config.epsilon</code> should be passed\nhere.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if <code>time</code> is in this Interval or at this Point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatPoint", "modulename": "patkit.patgrid", "qualname": "PatPoint", "kind": "class", "doc": "<p>TextGrid Point representation to enable editing with GUI.</p>\n", "bases": "PatAnnotation"}, {"fullname": "patkit.patgrid.PatPoint.__init__", "modulename": "patkit.patgrid", "qualname": "PatPoint.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">Transcript</span></span>)</span>"}, {"fullname": "patkit.patgrid.PatPoint.from_textgrid_point", "modulename": "patkit.patgrid", "qualname": "PatPoint.from_textgrid_point", "kind": "function", "doc": "<p>Copy the info of a Python TextGrids Interval into a new PatInterval.</p>\n\n<p>Only xmin and text are copied from the original Interval. xmax is\nassumed to be handled by either the next PatInterval or the\nconstructing method if this is the last Interval.</p>\n\n<p>Since PatIntervals are doubly linked, an attempt will be made to link\nprev and next to this interval.</p>\n\n<p>Returns the newly created PatInterval.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">Point</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatPoint.time", "modulename": "patkit.patgrid", "qualname": "PatPoint.time", "kind": "variable", "doc": "<p>Location of this Point.</p>\n", "annotation": ": float"}, {"fullname": "patkit.patgrid.PatPoint.contains", "modulename": "patkit.patgrid", "qualname": "PatPoint.contains", "kind": "function", "doc": "<p>Does this Interval contain <code>time</code> or is this Point at <code>time</code>.</p>\n\n<p>'Being at time' is defined in the sense of 'within epsilon of time'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time</strong> (float):\nThe time in seconds to test against this Annotation.</li>\n<li><strong>epsilon</strong> (float | None):\nThe precision (in seconds) to use in comparisons. The default value\nNone will result in PATKIT_EPSILON, being used. For expected\nbehaviour, <code>configuration.data_config.epsilon</code> should be passed\nhere.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if <code>time</code> is in this Interval or at this Point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatInterval", "modulename": "patkit.patgrid", "qualname": "PatInterval", "kind": "class", "doc": "<p>TextGrid Interval representation to enable editing with GUI.</p>\n", "bases": "PatAnnotation"}, {"fullname": "patkit.patgrid.PatInterval.__init__", "modulename": "patkit.patgrid", "qualname": "PatInterval.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">begin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">Transcript</span>,</span><span class=\"param\">\t<span class=\"n\">prev_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">next_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.patgrid.PatInterval.from_textgrid_interval", "modulename": "patkit.patgrid", "qualname": "PatInterval.from_textgrid_interval", "kind": "function", "doc": "<p>Copy the info of a Python TextGrids Interval into a new PatInterval.</p>\n\n<p>Only xmin and text are copied from the original Interval. xmax is\nassumed to be handled by either the next PatInterval or the\nconstructing method if this is the last Interval. </p>\n\n<p>Since PatIntervals are doubly linked, an attempt will be made to link\nprev and next to this interval. </p>\n\n<p>Returns the newly created PatInterval.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">Interval</span>,</span><span class=\"param\">\t<span class=\"n\">prev_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">next_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatInterval.next", "modulename": "patkit.patgrid", "qualname": "PatInterval.next", "kind": "variable", "doc": "<p>The next annotation, if any.</p>\n", "annotation": ": Optional[Self]"}, {"fullname": "patkit.patgrid.PatInterval.prev", "modulename": "patkit.patgrid", "qualname": "PatInterval.prev", "kind": "variable", "doc": "<p>The previous annotation, if any.</p>\n", "annotation": ": Optional[Self]"}, {"fullname": "patkit.patgrid.PatInterval.begin", "modulename": "patkit.patgrid", "qualname": "PatInterval.begin", "kind": "variable", "doc": "<p>Beginning time point of the interval.</p>\n", "annotation": ": float"}, {"fullname": "patkit.patgrid.PatInterval.mid", "modulename": "patkit.patgrid", "qualname": "PatInterval.mid", "kind": "variable", "doc": "<p>Middle time point of the interval.</p>\n\n<p>This is a property that will return None\nif this Interval is the one that marks\nthe last boundary.</p>\n", "annotation": ": float | None"}, {"fullname": "patkit.patgrid.PatInterval.end", "modulename": "patkit.patgrid", "qualname": "PatInterval.end", "kind": "variable", "doc": "<p>End time point of the interval.</p>\n\n<p>This is a property that will return None\nif this Interval is the one that marks\nthe last boundary.</p>\n", "annotation": ": float | None"}, {"fullname": "patkit.patgrid.PatInterval.is_at_time", "modulename": "patkit.patgrid", "qualname": "PatInterval.is_at_time", "kind": "function", "doc": "<p>Intervals are considered equivalent if the difference between their\n<code>begin</code> values is &lt; epsilon. Epsilon is a constant defined in patkit's\nconfiguration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatInterval.is_last", "modulename": "patkit.patgrid", "qualname": "PatInterval.is_last", "kind": "function", "doc": "<p>Is this the last Interval in this Tier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatInterval.is_legal_value", "modulename": "patkit.patgrid", "qualname": "PatInterval.is_legal_value", "kind": "function", "doc": "<p>Check if the given time is between the previous and next boundary.</p>\n\n<p>Usual caveats about float testing don't apply, because each boundary is\npadded with patkit epsilon. Tests used do not include equality with\neither bounding boundary, and that may or may not be trusted to be the\nactual case depending on how small the epsilon is.</p>\n\n<p>Returns True, if time is  between the previous and next boundary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatInterval.contains", "modulename": "patkit.patgrid", "qualname": "PatInterval.contains", "kind": "function", "doc": "<p>Does this Interval contain <code>time</code> or is this Point at <code>time</code>.</p>\n\n<p>'Being at time' is defined in the sense of 'within epsilon of time'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time</strong> (float):\nThe time in seconds to test against this Annotation.</li>\n<li><strong>epsilon</strong> (float | None):\nThe precision (in seconds) to use in comparisons. The default value\nNone will result in PATKIT_EPSILON, being used. For expected\nbehaviour, <code>configuration.data_config.epsilon</code> should be passed\nhere.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if <code>time</code> is in this Interval or at this Point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatTier", "modulename": "patkit.patgrid", "qualname": "PatTier", "kind": "class", "doc": "<p>TextGrid Tier representation to enable editing with GUI.</p>\n", "bases": "builtins.list"}, {"fullname": "patkit.patgrid.PatTier.__init__", "modulename": "patkit.patgrid", "qualname": "PatTier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tier</span><span class=\"p\">:</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">Tier</span></span>)</span>"}, {"fullname": "patkit.patgrid.PatTier.from_textgrid_tier", "modulename": "patkit.patgrid", "qualname": "PatTier.from_textgrid_tier", "kind": "function", "doc": "<p>Copy a Python TextGrids Tier as a PatTier.</p>\n\n<p>Returns the newly created PatTier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">tier</span><span class=\"p\">:</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">Tier</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatTier.begin", "modulename": "patkit.patgrid", "qualname": "PatTier.begin", "kind": "variable", "doc": "<p>Begin timestamp.</p>\n\n<p>Corresponds to a TextGrid Interval's xmin.</p>\n\n<p>This is a property and the actual value is generated from the first\nPatInterval of this PatTier.</p>\n", "annotation": ": float"}, {"fullname": "patkit.patgrid.PatTier.end", "modulename": "patkit.patgrid", "qualname": "PatTier.end", "kind": "variable", "doc": "<p>End timestamp.</p>\n\n<p>Corresponds to a TextGrid Interval's xmin.</p>\n\n<p>This is a property and the actual value is generated from the last\nPatInterval of this PatTier.</p>\n", "annotation": ": float"}, {"fullname": "patkit.patgrid.PatTier.is_point_tier", "modulename": "patkit.patgrid", "qualname": "PatTier.is_point_tier", "kind": "variable", "doc": "<p>Is this Tier a PointTier.</p>\n", "annotation": ": bool"}, {"fullname": "patkit.patgrid.PatTier.boundary_at_time", "modulename": "patkit.patgrid", "qualname": "PatTier.boundary_at_time", "kind": "function", "doc": "<p>If there is a boundary at time, return it.</p>\n\n<p>Returns None, if there is no boundary at time. </p>\n\n<p>'Being at time' is defined as being within patkit epsilon of the given\ntimestamp.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">patgrid</span><span class=\"o\">.</span><span class=\"n\">PatInterval</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatTier.get_interval_by_category", "modulename": "patkit.patgrid", "qualname": "PatTier.get_interval_by_category", "kind": "function", "doc": "<p>Return the Interval matching the category in this Tier.</p>\n\n<p>If interval_category is FIRST_LABELED or LAST_LABELED, the label should\nbe specified as well.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>interval_category</strong> (IntervalCategory):\nThe category to search for.</li>\n<li><strong>label</strong> (Optional[str], optional):\nLabel to search for when doing a label based category search, by\ndefault None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>PatInterval</strong>: The matching PatInterval</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval_category</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">IntervalCategory</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">patgrid</span><span class=\"o\">.</span><span class=\"n\">PatInterval</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatTier.get_labels", "modulename": "patkit.patgrid", "qualname": "PatTier.get_labels", "kind": "function", "doc": "<p>Get the labels at the times in the <code>time_vector</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_vector</strong> (np.ndarray):\nTime stamps to retrieve the labels for.</li>\n<li><strong>epsilon</strong> (float | None):\nThe precision (in seconds) to use in comparisons. The default value\nNone will result in PATKIT_EPSILON, being used. For expected\nbehaviour for <code>PointTiers</code>, <code>configuration.data_config.epsilon</code>\nshould be passed here.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: This array contains the labels as little endian Unicode strings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatTier.label_at", "modulename": "patkit.patgrid", "qualname": "PatTier.label_at", "kind": "function", "doc": "<p>Get the label at the given time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time</strong> (float):\nTime in seconds to retrieve the label for.</li>\n<li><strong>epsilon</strong> (float | None):\nThe precision (in seconds) to use in comparisons. The default value\nNone will result in PATKIT_EPSILON, being used. For expected\nbehaviour for <code>PointTiers</code>, <code>configuration.data_config.epsilon</code>\nshould be passed here.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The label string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatGrid", "modulename": "patkit.patgrid", "qualname": "PatGrid", "kind": "class", "doc": "<p>TextGrid representation which makes editing easier.</p>\n\n<p>PatGrid is a OrderedDict very similar to Python textgrids TextGrid, but\nmade up of PatTiers that in turn contain intervals or points as doubly\nlinked lists instead of just lists. See the relevant classes for more\ndetails.</p>\n", "bases": "collections.OrderedDict"}, {"fullname": "patkit.patgrid.PatGrid.begin", "modulename": "patkit.patgrid", "qualname": "PatGrid.begin", "kind": "variable", "doc": "<p>Begin timestamp.</p>\n\n<p>Corresponds to a TextGrids xmin.</p>\n\n<p>This is a property and the actual value is generated from the first\nPatTier of this PatGrid.</p>\n", "annotation": ": float"}, {"fullname": "patkit.patgrid.PatGrid.end", "modulename": "patkit.patgrid", "qualname": "PatGrid.end", "kind": "variable", "doc": "<p>End timestamp.</p>\n\n<p>Corresponds to a TextGrids xmax.</p>\n\n<p>This is a property and the actual value is generated from the first\nPatTier of this PatGrid.</p>\n", "annotation": ": float"}, {"fullname": "patkit.patgrid.PatGrid.format_long", "modulename": "patkit.patgrid", "qualname": "PatGrid.format_long", "kind": "function", "doc": "<p>Format self as long format TextGrid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.patgrid.PatGrid.get_labels", "modulename": "patkit.patgrid", "qualname": "PatGrid.get_labels", "kind": "function", "doc": "<p>Get the labels at the times in the <code>time_vector</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_vector</strong> (np.ndarray):\nTime values to get the labels for.</li>\n<li><strong>epsilon</strong> (float | None):\nThe precision (in seconds) to use in comparisons. The default value\nNone will result in PATKIT_EPSILON, being used. For expected\nbehaviour for <code>PointTiers</code>, <code>configuration.data_config.epsilon</code>\nshould be passed here.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str, np.ndarray]</strong>: Dictionary of the labels indexed by tier name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish", "modulename": "patkit.plot_and_publish", "kind": "module", "doc": "<p>These are generic plotting functions for patkit objects.</p>\n\n<p>All of the functions here are independent of rendering backends and such. Those\nand sizing and other contextual matters should be taken care of by the caller.</p>\n"}, {"fullname": "patkit.plot_and_publish.legend_generation", "modulename": "patkit.plot_and_publish.legend_generation", "kind": "module", "doc": "<p>Generate legend labels for plotting.</p>\n"}, {"fullname": "patkit.plot_and_publish.legend_generation.process_format_directive", "modulename": "patkit.plot_and_publish.legend_generation", "qualname": "process_format_directive", "kind": "function", "doc": "<p>Process a string formatting directive based on a Modality.</p>\n\n<p>Fills the string with requested information form this Modality.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nThe Modality to draw the (meta)data from.</li>\n<li><strong>directive</strong> (str):\nThe directive in the format \"[field_name]:[format]\" where field_name\nis an accepted field name either from this Modality or its\nmetadata.</li>\n<li><strong>index</strong> (int):\nIndex within the legend being created. Currently discarded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The filled and formatted string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">directive</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.legend_generation.format_legend", "modulename": "patkit.plot_and_publish.legend_generation", "qualname": "format_legend", "kind": "function", "doc": "<p>Fill and format a legend string from a Modality.</p>\n\n<p>If the format_strings are None, then we return the name of this\nModality.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modality</strong> (Modality):\nThe Modality to draw the (meta)data from.</li>\n<li><strong>index</strong> (int):\nIndex within the legend being created. Currently discarded.</li>\n<li><strong>format_strings</strong> (list[str]):\nThe combined format strings for the whole plot, possibly None.</li>\n<li><strong>delimiters :</strong>: The delimiter character(s) for the fields.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The filled and formatted legend string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">format_strings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">delimiters</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot", "modulename": "patkit.plot_and_publish.plot", "kind": "module", "doc": "<p>patkit plotting functions.</p>\n"}, {"fullname": "patkit.plot_and_publish.plot.plot_1d_modality", "modulename": "patkit.plot_and_publish.plot", "qualname": "plot_1d_modality", "kind": "function", "doc": "<p>Plot a modality assuming its data is one dimensional.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>modality</strong> (Modality):\nModality to plot.</li>\n<li><strong>time_offset</strong> (float):\ntime_offset to apply to the plot</li>\n<li><strong>xlim</strong> (tuple[float, float]):\nx-axis limits.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>LegendItem</strong>: _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot.plot_timeseries", "modulename": "patkit.plot_and_publish.plot", "qualname": "plot_timeseries", "kind": "function", "doc": "<p>Plot a timeseries.</p>\n\n<p>The timeseries most likely comes from a Modality, but that is left up to\nthe caller. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nmatplotlib axes to plot on.</li>\n<li><strong>data</strong> (np.ndarray):\nthe timeseries.</li>\n<li><strong>time</strong> (np.ndarray):\ntimestamps for the timeseries</li>\n<li><strong>xlim</strong> (Tuple[float, float]):\nlimits for the x-axis in seconds.</li>\n<li><strong>ylim</strong> (Optional[Tuple[float, float]], optional):\n_description_, by default None</li>\n<li><strong>normalise</strong> (Optional[TimeseriesNormalisation], optional):\nShould minimum value be scaled to 0 ('bottom') and/or maximum to 1\n('peak'), by default None</li>\n<li><strong>y_offset</strong> (Optional[float], optional):\ny-direction offset for to be applied to the whole timeseries, by\ndefault 0.0</li>\n<li><strong>number_of_ignored_frames</strong> (int, optional):\nhow many values to ignore from the beginning of data when normalising,\nby default 10</li>\n<li><strong>ylabel</strong> (Optional[str], optional):\nlabel for this axes, by default None</li>\n<li><strong>picker</strong> (_type_, optional):\na picker tied to the plotted PD curve to facilitate annotation, by\ndefault None</li>\n<li><strong>color</strong> (str, optional):\nmatplotlib color for the line, by default \"deepskyblue\"</li>\n<li><strong>linestyle</strong> (str, optional):\n_description_, by default \"-\"</li>\n<li><strong>label</strong> (Optional[str], optional):\nlabel for the series, by default None</li>\n<li><strong>alpha</strong> (float, optional):\nalpha value for the line, by default 1.0</li>\n<li><strong>sampling_step</strong> (int, optional):\nLength of step to use in plotting, by default 1 This is used in e.g.\nplotting downsampled series.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Line2D</strong>: Not the plotted line but one that can be used for adding a legend to\nthe plot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalise</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">TimeseriesNormalisation</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_ignored_frames</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;deepskyblue&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">sampling_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot.mark_peaks", "modulename": "patkit.plot_and_publish.plot", "qualname": "mark_peaks", "kind": "function", "doc": "<p>Mark peak annotations from the modality on the axes.</p>\n\n<p>If valleys instead of peaks are wanted, just pass in -data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to draw on.</li>\n<li><strong>modality</strong> (Modality):\nA timeseries modality with peak annotations.</li>\n<li><strong>xlim</strong> (Tuple[float, float], optional):\nLimits of drawing, by default None. This is useful in avoiding GUI\nhiccups by not drawing outside of the current limits.</li>\n<li><strong>display_prominence_values</strong> (bool, optional):\nIf prominence values should be plotted next to the peaks, by default\nFalse</li>\n<li><strong>colors</strong> (ColorType | Sequence[ColorType] | None, optional):\nColor to use in plotting the peak marker lines, by default 'sandybrown'</li>\n<li><strong>time_offset</strong> (float):\ntime_offset to apply to the peaks, by default 0.0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>LineCollection</strong>: _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">display_prominence_values</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;sandybrown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">LineCollection</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot.plot_patgrid_tier", "modulename": "patkit.plot_and_publish.plot", "qualname": "plot_patgrid_tier", "kind": "function", "doc": "<p>Plot a textgrid tier on the axis and return animator objects.</p>\n\n<p>This is used both for displaying tiers as part of the tier display \nand for decorating other plots with either just the boundary lines \nor both boundaries and the annotation text.</p>\n\n<p>Arguments:\nax -- matplotlib axes to plot on.\ntier -- TextGrid Tier represented as a SatTier.</p>\n\n<p>Keyword arguments:\nstimulus_onset -- onset time of the stimulus in the recording in\n    seconds. Default is 0s.\ndraw_text -- boolean value indicating if each segment's text should\n    be drawn on the plot. Default is True.\ndraggable --\ntext_y -- </p>\n\n<p>Returns a line object for the segment line, so that it\ncan be included in the legend.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">tier</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">patgrid</span><span class=\"o\">.</span><span class=\"n\">PatTier</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">draw_text</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">text_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">500</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">boundary_animation</span><span class=\"o\">.</span><span class=\"n\">AnimatableBoundary</span><span class=\"p\">],</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot.plot_wav", "modulename": "patkit.plot_and_publish.plot", "qualname": "plot_wav", "kind": "function", "doc": "<p>Plot a waveform.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>waveform</strong> (np.ndarray):\nWaveform to plot</li>\n<li><strong>wav_time</strong> (np.ndarray):\nTimevector for the waveform. Must be of same shape and length as the\nwaveform.</li>\n<li><strong>xlim</strong> (Tuple[float, float]):\nx-axis limits.</li>\n<li><strong>picker</strong> (_type_, optional):\nPicker for selecting points on the plotted line, by default None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Line2D</strong>: The plotted line.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">waveform</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">wav_time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot.plot_spectrogram2", "modulename": "patkit.plot_and_publish.plot", "qualname": "plot_spectrogram2", "kind": "function", "doc": "<p>Plot a spectrogram with background noise removal.</p>\n\n<p>The background noise is removed by setting the colormap's vmin (minimum\nvalue) to the median of the spectrogram values. This may not work for all\nsamples especially if there is very little silence.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>waveform</strong> (np.ndarray):\nWaveform to calculate the spectrogram on.</li>\n<li><strong>sampling_frequency</strong> (float):\nSampling frequency of the signal</li>\n<li><strong>extent_on_x</strong> (Tuple[float, float]):\nTime minimum and maximum values.</li>\n<li><strong>window_length</strong> (int, optional):\nLength of the fast fourier transform window, by default 220</li>\n<li><strong>n_overlap</strong> (int, optional):\nHow many samples to overlap consecutive windows by, by default 215</li>\n<li><strong>cmap</strong> (str, optional):\nThe colormap, by default 'Greys'</li>\n<li><strong>ylim</strong> (Tuple[float, float], optional):\nY limits, by default (0, 10000)</li>\n<li><strong>ylabel</strong> (str, optional):\nY label, by default \"Spectrogram\"</li>\n<li><strong>picker</strong> (_type_, optional):\nThe picker for selecting points, by default None</li>\n<li><strong>mode</strong> (GuiStyle, optional):\nDark or light mode plot, by default GuiStyle.FOLLOW_SYSTEM</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The spectrogram as a 2d array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">waveform</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sampling_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">extent_on_x</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">window_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">220</span>,</span><span class=\"param\">\t<span class=\"n\">n_overlap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">215</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Greys&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Spectrogram&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">GuiColorScheme</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">GuiColorScheme</span><span class=\"o\">.</span><span class=\"n\">FOLLOW_SYSTEM</span><span class=\"p\">:</span> <span class=\"s1\">&#39;follow_system&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">AxesImage</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot.plot_spectrogram", "modulename": "patkit.plot_and_publish.plot", "qualname": "plot_spectrogram", "kind": "function", "doc": "<p>Plot a spectrogram.</p>\n\n<p>Background noise is not removed. If that is needed try spectrogram2.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>waveform</strong> (np.ndarray):\nWaveform to calculate the spectrogram on.</li>\n<li><strong>sampling_frequency</strong> (float):\nSampling frequency of the signal</li>\n<li><strong>extent_on_x</strong> (Tuple[float, float]):\nTime minimum and maximum values.</li>\n<li><strong>window_length</strong> (int, optional):\nLength of the fast fourier transform window, by default 220</li>\n<li><strong>n_overlap</strong> (int, optional):\nHow many samples to overlap consecutive windows by, by default 215</li>\n<li><strong>cmap</strong> (str, optional):\nThe colormap, by default 'Greys'</li>\n<li><strong>ylim</strong> (Tuple[float, float], optional):\nY limits, by default (0, 10000)</li>\n<li><strong>ylabel</strong> (str, optional):\nY label, by default \"Spectrogram\"</li>\n<li><strong>picker</strong> (_type_, optional):\nThe picker for selecting points, by default None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: Pxx, freqs, bins, im as returned by Axes.specgram.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">waveform</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sampling_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">extent_on_x</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">window_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">220</span>,</span><span class=\"param\">\t<span class=\"n\">n_overlap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">215</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Greys&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Spectrogram&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot.plot_density", "modulename": "patkit.plot_and_publish.plot", "qualname": "plot_density", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">frequencies</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">x_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Densities)&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot.plot_spline", "modulename": "patkit.plot_and_publish.plot", "qualname": "plot_spline", "kind": "function", "doc": "<p>Plot a spline on the given axes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ax</strong> (Axes):\nmatplotlib axes</li>\n<li><strong>data</strong> (np.ndarray):\nthe spline Cartesian coordinates in axes order x-y, spline points.</li>\n<li><strong>limits</strong> (Optional[tuple[int, int]], optional):\nHow many points to leave out from the (front, back) of the spline, by\ndefault None</li>\n<li><strong>display_line</strong> (bool, optional):\nshould the interpolated spline line be drawn, by default True</li>\n<li><strong>display_points</strong> (bool, optional):\nshould the spline control points be drawn, by default False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">limits</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">display_line</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">display_points</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.plot_utilities", "modulename": "patkit.plot_and_publish.plot_utilities", "kind": "module", "doc": "<p>Various helper utilities related to plotting.</p>\n"}, {"fullname": "patkit.plot_and_publish.plot_utilities.get_colors_in_sequence", "modulename": "patkit.plot_and_publish.plot_utilities", "qualname": "get_colors_in_sequence", "kind": "function", "doc": "<p>Get colors in a perceptual sequence.</p>\n\n<p>NOTE: This may or may not end up working for color lists of length other\nthan 6 and 7.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong> (int):\nHow many colors to get.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[str]</strong>: Names of the colors.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.publish", "modulename": "patkit.plot_and_publish.publish", "kind": "module", "doc": "<p>Functions for publishing results as images.</p>\n\n<p>These are essentially plotting functions, but with emphasis more on composite\nplots than atomic ones, and more on final results than graphs to be segmented</p>\n"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters.__init__", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">plot_categories</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">within_plot_categories</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">legend_loc</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;upper right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">common_xlabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">common_ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">horizontal_line</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters.plot_categories", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters.plot_categories", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[str]"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters.within_plot_categories", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters.within_plot_categories", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple[float]"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters.legend_loc", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters.legend_loc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;upper right&#x27;"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters.common_xlabel", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters.common_xlabel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters.common_ylabel", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters.common_ylabel", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters.subtitle", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters.subtitle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "patkit.plot_and_publish.publish.PublishParameters.horizontal_line", "modulename": "patkit.plot_and_publish.publish", "qualname": "PublishParameters.horizontal_line", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": "None"}, {"fullname": "patkit.plot_and_publish.publish.PeakStatistic", "modulename": "patkit.plot_and_publish.publish", "qualname": "PeakStatistic", "kind": "class", "doc": "<p>Peak statistics extracted from timeseries.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.plot_and_publish.publish.PeakStatistic.NUMBER_OF_PEAKS", "modulename": "patkit.plot_and_publish.publish", "qualname": "PeakStatistic.NUMBER_OF_PEAKS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PeakStatistic.NUMBER_OF_PEAKS: &#x27;number_of_peaks&#x27;&gt;"}, {"fullname": "patkit.plot_and_publish.publish.PeakStatistic.NEAREST_NEIGHBOURS", "modulename": "patkit.plot_and_publish.publish", "qualname": "PeakStatistic.NEAREST_NEIGHBOURS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PeakStatistic.NEAREST_NEIGHBOURS: &#x27;nearest_neighbours&#x27;&gt;"}, {"fullname": "patkit.plot_and_publish.publish.AggregationMethod", "modulename": "patkit.plot_and_publish.publish", "qualname": "AggregationMethod", "kind": "class", "doc": "<p>Aggregation methods.</p>\n\n<p>These are used to select and record how to aggregate data.</p>\n", "bases": "enum.Enum"}, {"fullname": "patkit.plot_and_publish.publish.AggregationMethod.MEAN", "modulename": "patkit.plot_and_publish.publish", "qualname": "AggregationMethod.MEAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AggregationMethod.MEAN: &#x27;mean&#x27;&gt;"}, {"fullname": "patkit.plot_and_publish.publish.AggregationMethod.MEDIAN", "modulename": "patkit.plot_and_publish.publish", "qualname": "AggregationMethod.MEDIAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AggregationMethod.MEDIAN: &#x27;median&#x27;&gt;"}, {"fullname": "patkit.plot_and_publish.publish.AggregationMethod.MODE", "modulename": "patkit.plot_and_publish.publish", "qualname": "AggregationMethod.MODE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AggregationMethod.MODE: &#x27;mode&#x27;&gt;"}, {"fullname": "patkit.plot_and_publish.publish.AggregationMethod.MSE", "modulename": "patkit.plot_and_publish.publish", "qualname": "AggregationMethod.MSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AggregationMethod.MSE: &#x27;mse&#x27;&gt;"}, {"fullname": "patkit.plot_and_publish.publish.AggregationMethod.STD", "modulename": "patkit.plot_and_publish.publish", "qualname": "AggregationMethod.STD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AggregationMethod.STD: &#x27;std&#x27;&gt;"}, {"fullname": "patkit.plot_and_publish.publish.AggregationMethod.NONE", "modulename": "patkit.plot_and_publish.publish", "qualname": "AggregationMethod.NONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AggregationMethod.NONE: &#x27;none&#x27;&gt;"}, {"fullname": "patkit.plot_and_publish.publish.DistributionPlotParameters", "modulename": "patkit.plot_and_publish.publish", "qualname": "DistributionPlotParameters", "kind": "class", "doc": "<p>PublishParameters(plot_categories: tuple[str], within_plot_categories: tuple[float], legend_loc: str = 'upper right', common_xlabel: Optional[str] = None, common_ylabel: Optional[str] = None, subtitle: Optional[str] = None, horizontal_line: Optional[float] = None)</p>\n", "bases": "PublishParameters"}, {"fullname": "patkit.plot_and_publish.publish.DistributionPlotParameters.method", "modulename": "patkit.plot_and_publish.publish", "qualname": "DistributionPlotParameters.method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.plot_and_publish.publish.AggregationMethod"}, {"fullname": "patkit.plot_and_publish.publish.publish_distribution_data_seaborn", "modulename": "patkit.plot_and_publish.publish", "qualname": "publish_distribution_data_seaborn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_frame</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">plot_categories</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">within_plot_categories</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pdf</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">backends</span><span class=\"o\">.</span><span class=\"n\">backend_pdf</span><span class=\"o\">.</span><span class=\"n\">PdfPages</span>,</span><span class=\"param\">\t<span class=\"n\">plot_titles</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">category_titles</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">panel_height</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">panel_aspect</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.3</span>,</span><span class=\"param\">\t<span class=\"n\">row_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">common_xlabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">common_ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">suptitle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ref_line_y</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.publish.publish_distribution_data", "modulename": "patkit.plot_and_publish.publish", "qualname": "publish_distribution_data", "kind": "function", "doc": "<p>Order of axes is assumed to be plot_categories, recordings, within plot\ncategories. For example: norms, recordings, downsampling ratios (with\noriginal (==1) in position 0).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>peak_number_ratios</strong> (_type_):\n_description_</li>\n<li><strong>values_of_p</strong> (tuple[str]):\n_description_</li>\n<li><strong>downsampling_ratios</strong> (tuple[int]):\n_description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">plot_categories</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">within_plot_categories</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">pdf</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">backends</span><span class=\"o\">.</span><span class=\"n\">backend_pdf</span><span class=\"o\">.</span><span class=\"n\">PdfPages</span>,</span><span class=\"param\">\t<span class=\"n\">figure_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">subplot_layout</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_loc</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;upper right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">common_xlabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">common_ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">suptitle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">horizontal_line</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.publish.recording_timeseries_figure", "modulename": "patkit.plot_and_publish.publish", "qualname": "recording_timeseries_figure", "kind": "function", "doc": "<p>Create a figure from the recording and write it out to the pdf.</p>\n\n<p>Settings will have been read from patkit_publish_parameters.yaml in the\nconfiguration folder unless another setting file has been specified either\non the commandline or in configuration/configuration.yaml.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording</strong> (Recording):\nThe Recording to draw.</li>\n<li><strong>pdf</strong> (PdfPages):\nA PdfPages instance to draw into.</li>\n<li><strong>timeseries_params</strong> (TimeseriesPlotConfig):\nParameters to use in plotting the Recording's data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">pdf</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">backends</span><span class=\"o\">.</span><span class=\"n\">backend_pdf</span><span class=\"o\">.</span><span class=\"n\">PdfPages</span>,</span><span class=\"param\">\t<span class=\"n\">timeseries_params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">TimeseriesPlotConfig</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.plot_and_publish.publish.publish_session_pdf", "modulename": "patkit.plot_and_publish.publish", "qualname": "publish_session_pdf", "kind": "function", "doc": "<p>Draw all Recordings in the Session into a pdf file.</p>\n\n<p>The filename is read from configuration (likely patkit_publish_config.yaml\nor similar specified in the main config file.)</p>\n\n<p>Excluded Recordings are skipped.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording_session</strong> (Session):\nThe Session containing the Recordings.</li>\n<li><strong>timeseries_params</strong> (TimeseriesPlotConfig):\nParameters to use in plotting each Recording's data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording_session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">timeseries_params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">TimeseriesPlotConfig</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator", "modulename": "patkit.qt_annotator", "kind": "module", "doc": "<p>This is the main GUI class for patkit.</p>\n"}, {"fullname": "patkit.qt_annotator.setup_qtannotator_ui_callbacks", "modulename": "patkit.qt_annotator", "qualname": "setup_qtannotator_ui_callbacks", "kind": "function", "doc": "<p>Register UI callback functions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator", "kind": "class", "doc": "<p>Qt_Annotator_Window is a GUI class for annotating PD curves.</p>\n\n<p>The annotator works with PD curves and allows\nselection of a single points (labelled as pdOnset in the saved file).\nThe GUI also displays the waveform, and if TextGrids\nare provided, the acoustic segment boundaries.</p>\n", "bases": "PyQt6.QtWidgets.QMainWindow, patkit.gui.annotator_window.Ui_MainWindow"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.__init__", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording_session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">display_tongue</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">Configuration</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">categories</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pickle_filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.default_categories", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.default_categories", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;Stable&#x27;, &#x27;Hesitation&#x27;, &#x27;Chaos&#x27;, &#x27;No data&#x27;, &#x27;Not set&#x27;]"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.default_tongue_positions", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.default_tongue_positions", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;High&#x27;, &#x27;Low&#x27;, &#x27;Other / Not visible&#x27;]"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.kymography_clicker", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.kymography_clicker", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.session", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.recordings", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.recordings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.index", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.max_index", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.max_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.display_tongue", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.display_tongue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.data_config", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.data_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.gui_config", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.gui_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.tongue_positions", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.tongue_positions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.pickle_filename", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.pickle_filename", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.close_window_shortcut", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.close_window_shortcut", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.menu_select_image", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.menu_select_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.action_mean_image", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.action_mean_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.action_frame", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.action_frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.action_raw_frame", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.action_raw_frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.menu_select_small_action_group", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.menu_select_small_action_group", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.image_type", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.image_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.position_rbs", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.position_rbs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.figure", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.figure", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.canvas", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.data_axes", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.data_axes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.tier_axes", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.tier_axes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.animators", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.animators", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.shift_is_held", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.shift_is_held", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.xlim", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.xlim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.main_grid_spec", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.main_grid_spec", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.tier_grid_spec", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.tier_grid_spec", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.data_grid_spec", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.data_grid_spec", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.ultra_fig", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.ultra_fig", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.ultra_canvas", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.ultra_canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.ultra_axes", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.ultra_axes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.multicursor", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.multicursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.change_to_dark", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.change_to_dark", "kind": "function", "doc": "<p>Activate dark mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.change_to_light", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.change_to_light", "kind": "function", "doc": "<p>Activate light mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.current", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.current", "kind": "variable", "doc": "<p>Current recording index.</p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.default_annotations", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.default_annotations", "kind": "variable", "doc": "<p>List default annotations and their default values as a dict.</p>\n"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.clear_axes", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.clear_axes", "kind": "function", "doc": "<p>Clear data axes of this annotator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.update", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.update", "kind": "function", "doc": "<p>Updates the graphs but not the buttons.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.update_ui", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.update_ui", "kind": "function", "doc": "<p>Updates parts of the UI outwith the graphs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.plot_modality_axes", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.plot_modality_axes", "kind": "function", "doc": "<p>Plot modalities on a data_axes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes_number</strong> (int):\nWhich axes, counting from top.</li>\n<li><strong>axes_name</strong> (str):\nWhat should the axes be called. This will be the y_label.</li>\n<li><strong>zero_offset</strong> (Optional[float], optional):\nWhere do we set 0 in time in relation to the audio, by default 0</li>\n<li><strong>ylim</strong> (Optional[list[float, float]], optional):\ny limits, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">axes_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">axes_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">zero_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.display_exclusion", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.display_exclusion", "kind": "function", "doc": "<p>Updates title and graphs to show this Recording is excluded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.draw_plots", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.draw_plots", "kind": "function", "doc": "<p>Updates title and graphs. Called by self.update().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.draw_ultra_frame", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.draw_ultra_frame", "kind": "function", "doc": "<p>Display an already interpolated ultrasound frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.draw_raw_ultra_frame", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.draw_raw_ultra_frame", "kind": "function", "doc": "<p>Interpolate and display a raw ultrasound frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.next", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.next", "kind": "function", "doc": "<p>Callback function for the Next button.\nIncreases cursor index, updates the view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.next_frame", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.next_frame", "kind": "function", "doc": "<p>Move the data cursor to the next frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.previous_frame", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.previous_frame", "kind": "function", "doc": "<p>Move the data cursor to the previous frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.prev", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.prev", "kind": "function", "doc": "<p>Callback function for the Previous button.\nDecreases cursor index, updates the view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.go_to_recording", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.go_to_recording", "kind": "function", "doc": "<p>Go to a recording specified in the goLineEdit text input field.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.image_updater", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.image_updater", "kind": "function", "doc": "<p>Update which kind of image is shown in the small figure panel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.quit", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.quit", "kind": "function", "doc": "<p>Quit the app.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.open", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.open", "kind": "function", "doc": "<p>Open either patkit saved data or import new data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.open_file", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.open_file", "kind": "function", "doc": "<p>Open either patkit saved data or import new data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.save_all", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.save_all", "kind": "function", "doc": "<p>Save derived modalities and annotations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.save_to_pickle", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.save_to_pickle", "kind": "function", "doc": "<p>Save the recordings into a pickle file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.save_textgrid", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.save_textgrid", "kind": "function", "doc": "<p>Save the current TextGrid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.save_all_textgrids", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.save_all_textgrids", "kind": "function", "doc": "<p>Save the all TextGrids in this Session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.export_figure", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.export_figure", "kind": "function", "doc": "<p>Callback method to export the current figure in any supported format.</p>\n\n<p>Opens a filedialog to ask for the filename. Save format is determined\nby file extension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.export_ultrasound_frame", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.export_ultrasound_frame", "kind": "function", "doc": "<p>Export the currently selected ultrasound frame and its meta data.</p>\n\n<p>The metadata is written to a separate <code>.txt</code> file of the same name as\nthe image file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.export_aggregate_image", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.export_aggregate_image", "kind": "function", "doc": "<p>Export AggregateImages connected with the current recording.</p>\n\n<p>The metadata is written to a separate <code>.txt</code> file of the same name as\nthe corresponding image file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.export_distance_matrix", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.export_distance_matrix", "kind": "function", "doc": "<p>Export DistanceMatrices connected with the current session.</p>\n\n<p>The metadata is written to a separate <code>.txt</code> file of the same name as\nthe corresponding image file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.export_annotations_and_metadata", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.export_annotations_and_metadata", "kind": "function", "doc": "<p>Export annotations and some other meta data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.point_added_cb", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.point_added_cb", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.point_removed_cb", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.point_removed_cb", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">klass</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.pd_category_cb", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.pd_category_cb", "kind": "function", "doc": "<p>Callback function for the RadioButton for categorising\nthe PD curve.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.tongue_position_cb", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.tongue_position_cb", "kind": "function", "doc": "<p>Callback function for the RadioButton for categorising\nthe PD curve.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.onpick", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.onpick", "kind": "function", "doc": "<p>Callback for handling time selection on events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.resize_event", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.resize_event", "kind": "function", "doc": "<p>Window resize callback.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.keyPressEvent", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.keyPressEvent", "kind": "function", "doc": "<p>Key press callback.</p>\n\n<p>QtPy is silly and wants the callback to have this specific name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.keyReleaseEvent", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.keyReleaseEvent", "kind": "function", "doc": "<p>Key release callback.</p>\n\n<p>QtPy is silly and wants the callback to have this specific name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.PdQtAnnotator.on_color_scheme_changed", "modulename": "patkit.qt_annotator", "qualname": "PdQtAnnotator.on_color_scheme_changed", "kind": "function", "doc": "<p>Call back to change from light to dark/vice versa with the system.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scheme</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtCore</span><span class=\"o\">.</span><span class=\"n\">Qt</span><span class=\"o\">.</span><span class=\"n\">ColorScheme</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.qt_annotator.run_annotator", "modulename": "patkit.qt_annotator", "qualname": "run_annotator", "kind": "function", "doc": "<p>Start the Annotator GUI.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong> (Session):\nThe Session to run the Annotator on.</li>\n<li><strong>config</strong> (config.Configuration):\nConfiguration mainly for the GUI, but passing the complete\nConfiguration, because other things are occasionally needed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">Configuration</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load", "modulename": "patkit.save_and_load", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.save_and_load.load", "modulename": "patkit.save_and_load.load", "kind": "module", "doc": "<p>Functions for loading previously saved/seen data.</p>\n"}, {"fullname": "patkit.save_and_load.load.load_derived_modality", "modulename": "patkit.save_and_load.load", "qualname": "load_derived_modality", "kind": "function", "doc": "<p>Load a saved derived Modality meta and data, and add them to the Recording.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recording</strong> (Recording):\nThe Recording the Modality will be added to.</li>\n<li><strong>path</strong> (Path):\nThis is the path to the save files.</li>\n<li><strong>modality_schema</strong> (DataContainerListingLoadSchema):\nThis contains the name of the meta and data files.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">modality_schema</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">save_and_load</span><span class=\"o\">.</span><span class=\"n\">save_and_load_schemas</span><span class=\"o\">.</span><span class=\"n\">DataContainerListingLoadSchema</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.load.load_statistic", "modulename": "patkit.save_and_load.load", "qualname": "load_statistic", "kind": "function", "doc": "<p>Load a saved Statistic meta and data, and add them to the Recording.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>owner</strong> (Recording):\nThe Recording the Statistic will be added to.</li>\n<li><strong>path</strong> (Path):\nThis is the path to the save files.</li>\n<li><strong>statistic_schema</strong> (DataContainerListingLoadSchema):\nThis contains the name of the meta and data files.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span> <span class=\"o\">|</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">statistic_schema</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">save_and_load</span><span class=\"o\">.</span><span class=\"n\">save_and_load_schemas</span><span class=\"o\">.</span><span class=\"n\">DataContainerListingLoadSchema</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.load.read_recording_meta", "modulename": "patkit.save_and_load.load", "qualname": "read_recording_meta", "kind": "function", "doc": "<p>Read a Recording's saved metadata, validate it, and return it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong> (Union[str, Path, TextIO]):\nThis is passed to nestedtext.load.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>RecordingLoadSchema</strong>: The validated metadata.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">TextIO</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">save_and_load</span><span class=\"o\">.</span><span class=\"n\">save_and_load_schemas</span><span class=\"o\">.</span><span class=\"n\">RecordingLoadSchema</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.load.load_recording", "modulename": "patkit.save_and_load.load", "qualname": "load_recording", "kind": "function", "doc": "<p>Load a recording from given Path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>patkit_path</strong> (Path):\nPath to Recording's saved metadata file.</li>\n<li><strong>recorded_path</strong> (Path):\nPath to Recording's recorded data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Recording</strong>: A Recording object with most of its modalities loaded. Modalities like\nSplines that maybe stored in one file for several recordings aren't yet\nloaded at this point.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: If there is no previously saved metadata for the recording. This maybe\nhandled by a future version of patkit, if it should prove necessary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">patkit_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">recorded_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.load.load_recordings", "modulename": "patkit.save_and_load.load", "qualname": "load_recordings", "kind": "function", "doc": "<p>Load (specified) Recordings from directory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>directory</strong> (Path):\nPath to the directory.</li>\n<li><strong>recording_metafiles</strong> (Optional[list[str]]):\nNames of the Recording metafiles. If omitted, all Recordings in the\ndirectory will be loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[Recording]</strong>: List of the loaded Recordings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">patkit_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">recorded_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">recording_metafiles</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.load.load_recording_session", "modulename": "patkit.save_and_load.load", "qualname": "load_recording_session", "kind": "function", "doc": "<p>Load a recording session from a directory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>directory</strong> (Path):\nRoot directory of the data.</li>\n<li><strong>session_config_path</strong> (Path | None):\nPath to the session configuration file. By default, None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Session</strong>: The loaded Session object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">session_config_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save", "modulename": "patkit.save_and_load.save", "kind": "module", "doc": "<p>Functions for saving patkit data.</p>\n"}, {"fullname": "patkit.save_and_load.save.save_modality_data", "modulename": "patkit.save_and_load.save", "qualname": "save_modality_data", "kind": "function", "doc": "<p>Save the data of a Modality.</p>\n\n<p>This saves only <code>ModalityData.data</code> and ModalityData.timevector.</p>\n\n<p>Returns the filename of the</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_modality_meta", "modulename": "patkit.save_and_load.save", "qualname": "save_modality_meta", "kind": "function", "doc": "<p>Save meta data and annotations for a Modality.</p>\n\n<p>Saved data includes sampling frequency and any processing metadata that is\nneeded to reconstruct the Modality.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_recording_meta", "modulename": "patkit.save_and_load.save", "qualname": "save_recording_meta", "kind": "function", "doc": "<p>Save Recording meta.</p>\n\n<p>The meta dict should contain at least a list of the modalities this\nrecording has and their saving locations.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span>,</span><span class=\"param\">\t<span class=\"n\">modalities_saves</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">statistics_saves</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_modalities", "modulename": "patkit.save_and_load.save", "qualname": "save_modalities", "kind": "function", "doc": "<p>Save derived Modalities and gather meta for all Modalities.</p>\n\n<p>Returns a dictionary of the data and meta paths of the Modalities.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_statistic_data", "modulename": "patkit.save_and_load.save", "qualname": "save_statistic_data", "kind": "function", "doc": "<p>Save the data of a Modality.</p>\n\n<p>This saves only Statistic.data.</p>\n\n<p>Returns the filename of the</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">statistic</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">Statistic</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_statistic_meta", "modulename": "patkit.save_and_load.save", "qualname": "save_statistic_meta", "kind": "function", "doc": "<p>Save meta data and annotations for a Modality.</p>\n\n<p>Saved data includes sampling frequency and any processing metadata that is\nneeded to reconstruct the Modality.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">statistic</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">Statistic</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_statistics", "modulename": "patkit.save_and_load.save", "qualname": "save_statistics", "kind": "function", "doc": "<p>Save Statistics and gather meta for all Statistics.</p>\n\n<p>Returns a dictionary of the data and meta paths of the Statistics.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">aggregator</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">base_classes</span><span class=\"o\">.</span><span class=\"n\">AbstractDataContainer</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_recordings", "modulename": "patkit.save_and_load.save", "qualname": "save_recordings", "kind": "function", "doc": "<p>Save derived data modalities for each Recording.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_excluded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_session_meta", "modulename": "patkit.save_and_load.save", "qualname": "save_session_meta", "kind": "function", "doc": "<p>Save recording session metadata.</p>\n\n<p>The meta dict should contain at least a list of the recordings in this\nsession and their saving locations.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">recording_meta_files</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">confirmation</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span>,</span><span class=\"param\">\t<span class=\"n\">statistics_saves</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_manifest", "modulename": "patkit.save_and_load.save", "qualname": "save_manifest", "kind": "function", "doc": "<p>Save the manifest file.</p>\n\n<p>The manifest file contains a list of PATKIT scenarios that refer to the\nrecorded data. These maybe used to backtrack to already calculated\nModalities and Statistics to save time.</p>\n\n<p>This function will first read any existing manifest file and then append\nthe current Session's PATKIT meta to the file if it is not already\nincluded.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong> (Session):\nThe session to be added to the manifest.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save.save_recording_session", "modulename": "patkit.save_and_load.save", "qualname": "save_recording_session", "kind": "function", "doc": "<p>Save a recording session.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.save_and_load.save_and_load_schemas", "modulename": "patkit.save_and_load.save_and_load_schemas", "kind": "module", "doc": "<p>Pydantic models and converters for saving and loading.</p>\n"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.nested_text_converters", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "nested_text_converters", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;class &#x27;datetime.datetime&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib._local.PosixPath&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib._local.WindowsPath&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib._local.Path&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;enum &#x27;SplineDiffsEnum&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;enum &#x27;SplineNNDsEnum&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;enum &#x27;SplineShapesEnum&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;}"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.StatisticLoadSchema", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "StatisticLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved Statistic.</p>\n\n<p>Statistic is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.StatisticLoadSchema.object_type", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "StatisticLoadSchema.object_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.StatisticLoadSchema.name", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "StatisticLoadSchema.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.StatisticLoadSchema.format_version", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "StatisticLoadSchema.format_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.StatisticLoadSchema.parameters", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "StatisticLoadSchema.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.StatisticLoadSchema.model_config", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "StatisticLoadSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerLoadSchema", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved Modality.</p>\n\n<p>Modality is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerLoadSchema.object_type", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerLoadSchema.object_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerLoadSchema.name", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerLoadSchema.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerLoadSchema.format_version", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerLoadSchema.format_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerLoadSchema.parameters", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerLoadSchema.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerLoadSchema.model_config", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerLoadSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerListingLoadSchema", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerListingLoadSchema", "kind": "class", "doc": "<p>Loading schema for the DataContainer listings in a saved Recording.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerListingLoadSchema.data_name", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerListingLoadSchema.data_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerListingLoadSchema.meta_name", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerListingLoadSchema.meta_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.DataContainerListingLoadSchema.model_config", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "DataContainerListingLoadSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.RecordingLoadSchema", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "RecordingLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved Recording.</p>\n\n<p>Recording is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.RecordingLoadSchema.object_type", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "RecordingLoadSchema.object_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.SavedObjectTypes"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.RecordingLoadSchema.name", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "RecordingLoadSchema.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.RecordingLoadSchema.format_version", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "RecordingLoadSchema.format_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.RecordingLoadSchema.parameters", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "RecordingLoadSchema.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.data_structures.metadata_classes.RecordingMetaData"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.RecordingLoadSchema.modalities", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "RecordingLoadSchema.modalities", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, patkit.save_and_load.save_and_load_schemas.DataContainerListingLoadSchema]"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.RecordingLoadSchema.statistics", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "RecordingLoadSchema.statistics", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, patkit.save_and_load.save_and_load_schemas.DataContainerListingLoadSchema]"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.RecordingLoadSchema.model_config", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "RecordingLoadSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionParameterLoadSchema", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionParameterLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved Session.</p>\n\n<p>Session is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionParameterLoadSchema.patkit_path", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionParameterLoadSchema.patkit_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Annotated[pathlib._local.Path, PathType(path_type=&#x27;dir&#x27;)]"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionParameterLoadSchema.recorded_path", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionParameterLoadSchema.recorded_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Annotated[pathlib._local.Path, PathType(path_type=&#x27;dir&#x27;)]"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionParameterLoadSchema.datasource_name", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionParameterLoadSchema.datasource_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.DatasourceNames"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionParameterLoadSchema.path_structure", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionParameterLoadSchema.path_structure", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.configuration.configuration_models.PathStructure"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionParameterLoadSchema.model_config", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionParameterLoadSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionLoadSchema", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved Session.</p>\n\n<p>Session is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionLoadSchema.object_type", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionLoadSchema.object_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.SavedObjectTypes"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionLoadSchema.name", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionLoadSchema.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionLoadSchema.format_version", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionLoadSchema.format_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionLoadSchema.parameters", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionLoadSchema.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.save_and_load.save_and_load_schemas.SessionParameterLoadSchema"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionLoadSchema.recordings", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionLoadSchema.recordings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "patkit.save_and_load.save_and_load_schemas.SessionLoadSchema.model_config", "modulename": "patkit.save_and_load.save_and_load_schemas", "qualname": "SessionLoadSchema.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{}"}, {"fullname": "patkit.simulation", "modulename": "patkit.simulation", "kind": "module", "doc": "<p>This package is for simulating data and plotting simulation results.</p>\n\n<p>Currently, it deals with only simulated tongue contour data.</p>\n"}, {"fullname": "patkit.simulation.contour_tools", "modulename": "patkit.simulation.contour_tools", "kind": "module", "doc": "<p>Tools for working with simulated tongue contours.</p>\n"}, {"fullname": "patkit.simulation.contour_tools.generate_contour", "modulename": "patkit.simulation.contour_tools", "qualname": "generate_contour", "kind": "function", "doc": "<p>Generate a radial contour for the requested sound.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sound</strong> (str | SimulationContourEnum | None):\nThe requested sound, by default SimulationContourVowel.AE</li>\n<li><strong>number_of_points</strong> (int):\nFuture option for generating a different number of interpolation\npoints, by default 42</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The contour with axes [(r, phi), (number_of_points)].</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: Currently raised if number_of_points != 42</li>\n<li><strong>ValueError</strong>: Raised if an unavailable sound is requested.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sound</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">external_class_extensions</span><span class=\"o\">.</span><span class=\"n\">enum_extensions</span><span class=\"o\">.</span><span class=\"n\">UnionEnumMeta</span><span class=\"o\">.</span><span class=\"n\">make_union</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">UnionEnum</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_points</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">42</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.contour_tools.contour_point_perturbations", "modulename": "patkit.simulation.contour_tools", "qualname": "contour_point_perturbations", "kind": "function", "doc": "<p>Perturb a contour by the given amount at each point at a time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contour</strong> (np.ndarray):\nThe contour to be perturbed.</li>\n<li><strong>reference_contour</strong> (Optional[np.ndarray], optional):\nThe contour to interleave with the perturbed contour. If None, the\noriginal contour is used instead, by default None</li>\n<li><strong>perturbation</strong> (Optional[float], optional):\nHow much the perturbed point should be moved in the r direction, by\ndefault 1.0</li>\n<li><strong>interleave</strong> (Optional[bool], optional):\nIf every other contour in the result should be the reference contour,\nby default False</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Each row is a contour. Either with [perturbed at [0], perturbed at [1],\netc] or [reference, perturbed at [0], reference, perturbed at [1],\nreference, etc, reference] if interleave == True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">reference_contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">perturbation</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">interleave</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.metric_calculations", "modulename": "patkit.simulation.metric_calculations", "kind": "module", "doc": "<p>This module contains functions used to apply metrics to simulated data.</p>\n"}, {"fullname": "patkit.simulation.metric_calculations.get_distance_metric_baselines", "modulename": "patkit.simulation.metric_calculations", "qualname": "get_distance_metric_baselines", "kind": "function", "doc": "<p>Get the metric evaluated between each pair of the contours.</p>\n\n<p>The pairs are formed as the Cartesian product of the keys in the contours\ndict.</p>\n\n<p>Note that this function is intended for pairwise comparisons. Timeseries\ncomparisons should be/will be implemented as a separate function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metric</strong> (MetricFunction):\nCallable which will be called on each pair of contours.</li>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nContours in a dict indexed by contour names.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[Comparison, float]</strong>: Comparisons formed from the contour names and the metric value for\nperforming the specified comparisons.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Metrics need to accept one np.ndarray as argument and return a np.ndarray. This is only an alias for &#39;Metric&#39;&quot;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.metric_calculations.get_shape_metric_baselines", "modulename": "patkit.simulation.metric_calculations", "qualname": "get_shape_metric_baselines", "kind": "function", "doc": "<p>Get the metric evaluated between each pair of the contours.</p>\n\n<p>The pairs are formed as the Cartesian product of the keys in the contours\ndict.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metric</strong> (MetricFunction):\nCallable which will be called on each pair of contours.</li>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nContours in a dict indexed by contour names.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str, float]</strong>: The unperturbed metric for each contour in a dict indexed by contour\nnames.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Metrics need to accept one np.ndarray as argument and return a np.ndarray. This is only an alias for &#39;Metric&#39;&quot;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.metric_calculations.calculate_perturbed_metric_series", "modulename": "patkit.simulation.metric_calculations", "qualname": "calculate_perturbed_metric_series", "kind": "function", "doc": "<p>Generate a series of perturbed contours and calculate the metric on them.</p>\n\n<p>This function is usually not called directly but only implicitly by\ncalculate_metric_series_for_contours and\ncalculate_metric_series_for_comparisons.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metric</strong> (MetricFunction):\nThe metric function. Should accept a 2D np.ndarray as its argument and\nreturn an <code>np.ndarray</code>. This can be generated with <code>functools.partial</code>\nfrom standard patkit metrics.</li>\n<li><strong>contour_to_perturb</strong> (np.ndarray):\nThe contour the perturbations will be applied to.</li>\n<li><strong>reference_contour</strong> (Optional[np.ndarray], optional):\nA reference contour to compare the perturbed ones with. If None, the\ncontour_to_perturb will be used instead. By default, None</li>\n<li><strong>perturbations</strong> (Optional[tuple[float]], optional):\nTuple of perturbations to apply in absolute r values.\nBy default, <code>(1.0,)</code>.</li>\n<li><strong>interleave</strong> (Optional[bool], optional):\nShould the reference contour be interleaved with the perturbed\ncontours. Use this for pairwise metrics like ANND or MPBPD when\ncomparisons with baseline are wanted. By default, False</li>\n<li><strong>return_even</strong> (Optional[bool] optional,):\nWhether the even or odd comparisons should be returned. True means\ncomparing reference to perturbed, False means comparing perturbed to\nreference. By default, True, Ignored if <code>interleave</code> is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str, np.ndarray]</strong>: A dictionary of the results. Keys are the perturbation values and\nvalues are the series resulting from applying the metric with one value\nfor each application.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Metrics need to accept one np.ndarray as argument and return a np.ndarray. This is only an alias for &#39;Metric&#39;&quot;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">contour_to_perturb</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">reference_contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">perturbations</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">interleave</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_even</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.metric_calculations.calculate_metric_series_for_contours", "modulename": "patkit.simulation.metric_calculations", "qualname": "calculate_metric_series_for_contours", "kind": "function", "doc": "<p>Calculate the metric for each contour while perturbing each point.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metric</strong> (MetricFunction):\nThe metric to calculate.</li>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nA dict of the contours.</li>\n<li><strong>perturbations</strong> (Optional[tuple[float]], optional):\nA tuple of perturbations to apply. By default, <code>(1.0,)</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[str, dict[str, np.ndarray]]</strong>: The outer dictionary's keys are same as those in contours, the inner\ndictionary's keys are perturbation values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Metrics need to accept one np.ndarray as argument and return a np.ndarray. This is only an alias for &#39;Metric&#39;&quot;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">perturbations</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.metric_calculations.calculate_metric_series_for_comparisons", "modulename": "patkit.simulation.metric_calculations", "qualname": "calculate_metric_series_for_comparisons", "kind": "function", "doc": "<p>Calculate the metric between the specified comparisons.</p>\n\n<p>The comparisons define a contour to use as is or as a baseline and a\ncontour to run perturbations on. They may be the same contour, in which\ncase the comparison is between the baseline and its perturbed versions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metric</strong> (MetricFunction):\nThe metric function to apply.</li>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nThe contours to run the metric on.</li>\n<li><strong>comparisons</strong> (list[Comparison]):\nList of which contours to compare with which.</li>\n<li><strong>perturbations</strong> (Optional[list[float]], optional):\nTuple of perturbation sizes to apply, By default, (1.0,)</li>\n<li><strong>interleave</strong> (bool):\nShould the reference and result contours be interleaved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict[Comparison, dict[str, np.ndarray]]</strong>: The outer dictionary is indexed with the Comparisons made and the inner\none with the original keys of the contours dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Metrics need to accept one np.ndarray as argument and return a np.ndarray. This is only an alias for &#39;Metric&#39;&quot;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">comparisons</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">perturbations</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,)</span>,</span><span class=\"param\">\t<span class=\"n\">interleave</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.perturbation_series_plots", "modulename": "patkit.simulation.perturbation_series_plots", "kind": "module", "doc": "<p>Perturbation series plots.</p>\n"}, {"fullname": "patkit.simulation.perturbation_series_plots.annd_perturbation_series_like_to_like_plot", "modulename": "patkit.simulation.perturbation_series_plots", "qualname": "annd_perturbation_series_like_to_like_plot", "kind": "function", "doc": "<p>Make the first part of the perturbation series plot for ANND.</p>\n\n<p>This part is the like-to-like plots: each contour to its own perturbed\nversion or vice versa.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>annd_dict</strong> (dict[Comparison, dict[str, np.ndarray]]):\nANND analysis results by Comparisons and perturbations.</li>\n<li><strong>columns</strong> (list[str]):\nOrder of contours to go through. Used to access the results from\nannd_dict.</li>\n<li><strong>figure_size</strong> (tuple[float, float]):\nSize of the figure in inches. By default, (12, 3).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">annd_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">figure_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.perturbation_series_plots.annd_perturbation_series_crosswise_plot", "modulename": "patkit.simulation.perturbation_series_plots", "qualname": "annd_perturbation_series_crosswise_plot", "kind": "function", "doc": "<p>Make the first part of the perturbation series plot for ANND.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>annd_dict</strong> (dict[Comparison, dict[str, np.ndarray]]):\nANND analysis results by Comparisons and perturbations.</li>\n<li><strong>annd_baseline</strong> (np.ndarray):\nbaselines for the ANND comparisons.</li>\n<li><strong>columns</strong> (list[ComparisonSoundPair]):\nOrder of contour pairs to go through. Used to access the results from\nannd_dict.</li>\n<li><strong>figure_size</strong> (tuple[float, float]):\nSize of the figure in inches. By default, (12, 3).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">annd_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">annd_baseline</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">ComparisonSoundPair</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">figure_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.perturbation_series_plots.mci_perturbation_series_plot", "modulename": "patkit.simulation.perturbation_series_plots", "qualname": "mci_perturbation_series_plot", "kind": "function", "doc": "<p>Make a perturbation series plot for MCI.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nContours by name to plot the metrics on.</li>\n<li><strong>figure_size</strong> (tuple[float, float]):\nSize of the figure in inches. By default, <code>(12, 8)</code>.</li>\n<li><strong>perturbations</strong> (Optional[list[float]], optional):\nPerturbation values to use, by default <code>(1.0,)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">figure_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">perturbations</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,)</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.rays_on_contours", "modulename": "patkit.simulation.rays_on_contours", "kind": "module", "doc": "<p>Plot metric rays on contours for different perturbations.</p>\n"}, {"fullname": "patkit.simulation.rays_on_contours.distance_metric_rays_on_contours", "modulename": "patkit.simulation.rays_on_contours", "qualname": "distance_metric_rays_on_contours", "kind": "function", "doc": "<p>Plot a distance metric values on contours.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nContours by name to plot the metrics on.</li>\n<li><strong>distance_metric_result</strong> (DistanceMetricSimulationResult):\nResults and baselines from distance metric simulation.</li>\n<li><strong>ray_plot_params</strong> (RayPlotParams):\nPlotting parameters for the ray plot.</li>\n<li><strong>number_of_perturbations</strong> (int):\nHow many perturbation values there are.</li>\n<li><strong>columns</strong> (list[ComparisonSoundPair]):\nOrder of contours to go through.</li>\n<li><strong>nrows</strong> (int):\nnumber of subplot rows in the plot, by default 1</li>\n<li><strong>contour_rows</strong> (int):\nnumber of contour rows in the subplots, by default 2</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric_result</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">DistanceMetricSimulationResult</span>,</span><span class=\"param\">\t<span class=\"n\">ray_plot_params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">RayPlotParams</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_perturbations</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">ComparisonSoundPair</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">nrows</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">contour_rows</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.rays_on_contours.shape_metric_rays_on_contours", "modulename": "patkit.simulation.rays_on_contours", "qualname": "shape_metric_rays_on_contours", "kind": "function", "doc": "<p>Plot shape metric values on contours.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nContours by name to plot the metrics on.</li>\n<li><strong>shape_metric_result</strong> (ShapeMetricSimulationResult):\nResults and baselines from shape metric simulation.</li>\n<li><strong>ray_plot_params</strong> (RayPlotParams):\nPlotting parameters for the ray plot.</li>\n<li><strong>number_of_perturbations</strong> (int):\nHow many perturbation values there are.</li>\n<li><strong>nrows</strong> (int):\nnumber of subplot rows in the plot, by default 1</li>\n<li><strong>contour_rows</strong> (int):\nnumber of contour rows in the subplots, by default 2</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">shape_metric_result</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">ShapeMetricSimulationResult</span>,</span><span class=\"param\">\t<span class=\"n\">ray_plot_params</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">RayPlotParams</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_perturbations</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">nrows</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">contour_rows</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulate", "modulename": "patkit.simulation.simulate", "kind": "module", "doc": "<p>Simulate data and run metrics on it with plotting.</p>\n\n<p>Original version was published for Ultrafest 2024.</p>\n"}, {"fullname": "patkit.simulation.simulate.run_simulations", "modulename": "patkit.simulation.simulate", "qualname": "run_simulations", "kind": "function", "doc": "<p>Run simulations.</p>\n\n<p>Currently, runs only spline/contour simulations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sim_configuration</strong> (SimulationConfig):\nThe configuration specifying the simulation to run.</li>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nDict of ndarrays/tongue contours indexed by the IPA character of the\ncorresponding sound.</li>\n<li><strong>comparisons</strong> (list[Comparison]):\nList of Comparisons to perform between the contours for distance metric\nsimulation.</li>\n<li><strong>sound_pairs</strong> (list[ComparisonSoundPair]):\nList of sound pairs to be used in plotting.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sim_configuration</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SimulationConfig</span>,</span><span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">comparisons</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sound_pairs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">ComparisonSoundPair</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulate.simulate_contour_distance_metrics", "modulename": "patkit.simulation.simulate", "qualname": "simulate_contour_distance_metrics", "kind": "function", "doc": "<p>Simulate contour shape metrics on splines.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sim_configuration</strong> (SimulationConfig):\nConfiguration variables for the simulation.</li>\n<li><strong>comparisons</strong> (list[Comparison]):\nList of Comparisons specifying which contour to compare to which and\nwhich of the two contours should be perturbed.</li>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nDict of contours to run the simulation on: ndarrays indexed by the IPA\ncharacter of the corresponding sound.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[DistanceMetricSimulationResult]</strong>: List of DistanceMetricSimulationResult containing the simulation\nresults.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sim_configuration</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SimulationConfig</span>,</span><span class=\"param\">\t<span class=\"n\">comparisons</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">DistanceMetricSimulationResult</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulate.simulate_contour_shape_metrics", "modulename": "patkit.simulation.simulate", "qualname": "simulate_contour_shape_metrics", "kind": "function", "doc": "<p>Simulate contour shape metrics on splines.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sim_configuration</strong> (SimulationConfig):\nConfiguration variables for the simulation.</li>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nDict of contours to run the simulation on: ndarrays indexed by the IPA\ncharacter of the corresponding sound.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list[ShapeMetricSimulationResult]</strong>: List of ShapeMetricSimulationResults containing the simulation results.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sim_configuration</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SimulationConfig</span>,</span><span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">ShapeMetricSimulationResult</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulate.setup_contours_comparisons_soundpairs", "modulename": "patkit.simulation.simulate", "qualname": "setup_contours_comparisons_soundpairs", "kind": "function", "doc": "<p>Set up the contours, Comparisons and ComparisonSoundPairs for a simulation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sim_configuration</strong> (SimulationConfig):\nThe SimulationConfig</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[dict[str, np.ndarray], list[Comparison], list[ComparisonSoundPair]]</strong>: First member is a dict of the contours indexed by sound, followed by\nlists of the Comparisons and ComparisonSoundPairs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sim_configuration</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SimulationConfig</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">ComparisonSoundPair</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulate.save_result_figures", "modulename": "patkit.simulation.simulate", "qualname": "save_result_figures", "kind": "function", "doc": "<p>Plot and save result figures based on the directives in simulation config.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sim_configuration</strong> (SimulationConfig):\nThe configuration for the simulation including plotting directives.</li>\n<li><strong>contours</strong> (dict[str, np.ndarray]):\nThe contours the simulation was run on. Dict of ndarrays indexed by the\nIPA characters of the corresponding sound.</li>\n<li><strong>sound_pairs</strong> (list[ComparisonSoundPair]):\nThe sound pairs th simulation was run on.</li>\n<li><strong>distance_metric_results</strong> (list[DistanceMetricSimulationResult]):\nResults from distance metric simulations.</li>\n<li><strong>shape_metric_results</strong> (list[ShapeMetricSimulationResult]):\nResults from shape metric simulations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sim_configuration</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">configuration_models</span><span class=\"o\">.</span><span class=\"n\">SimulationConfig</span>,</span><span class=\"param\">\t<span class=\"n\">contours</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sound_pairs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">ComparisonSoundPair</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric_results</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">DistanceMetricSimulationResult</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">shape_metric_results</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">ShapeMetricSimulationResult</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_datastructures", "modulename": "patkit.simulation.simulation_datastructures", "kind": "module", "doc": "<p>Datastructures used in simulation.</p>\n\n<p>Currently, mainly classes to support simulating behaviour of splines.</p>\n"}, {"fullname": "patkit.simulation.simulation_datastructures.MetricFunction", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "MetricFunction", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Annotated[typing.Callable[[numpy.ndarray], numpy.ndarray], &quot;Metrics need to accept one np.ndarray as argument and return a np.ndarray. This is only an alias for &#x27;Metric&#x27;&quot;]"}, {"fullname": "patkit.simulation.simulation_datastructures.ComparisonSoundPair", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ComparisonSoundPair", "kind": "class", "doc": "<p>Defines a comparison between two contours.</p>\n\n<p>First should be compared to second.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "patkit.simulation.simulation_datastructures.ComparisonSoundPair.first", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ComparisonSoundPair.first", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.simulation.simulation_datastructures.ComparisonSoundPair.second", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ComparisonSoundPair.second", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "patkit.simulation.simulation_datastructures.ComparisonSoundPair.model_config", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ComparisonSoundPair.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;frozen&#x27;: True}"}, {"fullname": "patkit.simulation.simulation_datastructures.Comparison", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "Comparison", "kind": "class", "doc": "<p>Defines a comparison between two contours, and which of them is perturbed.</p>\n\n<p>First should be compared to second with the contour named in perturbed\nbeing the one that gets perturbed.</p>\n", "bases": "ComparisonSoundPair"}, {"fullname": "patkit.simulation.simulation_datastructures.Comparison.perturbed", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "Comparison.perturbed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.ComparisonMember"}, {"fullname": "patkit.simulation.simulation_datastructures.Comparison.perturbed_name", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "Comparison.perturbed_name", "kind": "variable", "doc": "<p>Name of the perturbed contour.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The name as a string.</li>\n</ul>\n", "annotation": ": str"}, {"fullname": "patkit.simulation.simulation_datastructures.Comparison.model_config", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "Comparison.model_config", "kind": "variable", "doc": "<p>Configuration for the model, should be a dictionary conforming to [<code>ConfigDict</code>][pydantic.config.ConfigDict].</p>\n", "annotation": ": ClassVar[pydantic.config.ConfigDict]", "default_value": "{&#x27;frozen&#x27;: True}"}, {"fullname": "patkit.simulation.simulation_datastructures.ShapeMetricSimulationResult", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ShapeMetricSimulationResult", "kind": "class", "doc": "<p>Baseline and results from simulations of shape metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metric</strong> (SplineShapesEnum):\nMetric used in deriving the results.</li>\n<li><strong>baselines</strong> (dict[str, float]):\nBaseline for each metric and contour.</li>\n<li><strong>results</strong> (dict[str, dict[str, np.ndarray]]):\nResults for each metric/contour/perturbation</li>\n</ul>\n"}, {"fullname": "patkit.simulation.simulation_datastructures.ShapeMetricSimulationResult.__init__", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ShapeMetricSimulationResult.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">SplineShapesEnum</span>,</span><span class=\"param\">\t<span class=\"n\">baselines</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "patkit.simulation.simulation_datastructures.ShapeMetricSimulationResult.metric", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ShapeMetricSimulationResult.metric", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.constants.SplineShapesEnum"}, {"fullname": "patkit.simulation.simulation_datastructures.ShapeMetricSimulationResult.baselines", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ShapeMetricSimulationResult.baselines", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, float]"}, {"fullname": "patkit.simulation.simulation_datastructures.ShapeMetricSimulationResult.results", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "ShapeMetricSimulationResult.results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, dict[str, numpy.ndarray]]"}, {"fullname": "patkit.simulation.simulation_datastructures.DistanceMetricSimulationResult", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "DistanceMetricSimulationResult", "kind": "class", "doc": "<p>Baseline and results from simulations of shape metrics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>metric</strong> (SplineMetricEnum):\nMetric used in deriving the results. While SplineMetricEnum includes\nalso spline shape metrics, passing one here will result in a ValueError\nbeing raised or unpredictable behavior.</li>\n<li><strong>baselines</strong> (dict[str, float]):\nBaseline for each metric and contour.</li>\n<li><strong>results</strong> (dict[Comparison, dict[str, np.ndarray]]):\nResults for each metric/contour/perturbation</li>\n</ul>\n"}, {"fullname": "patkit.simulation.simulation_datastructures.DistanceMetricSimulationResult.__init__", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "DistanceMetricSimulationResult.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">external_class_extensions</span><span class=\"o\">.</span><span class=\"n\">enum_extensions</span><span class=\"o\">.</span><span class=\"n\">UnionEnumMeta</span><span class=\"o\">.</span><span class=\"n\">make_union</span><span class=\"o\">.&lt;</span><span class=\"nb\">locals</span><span class=\"o\">&gt;.</span><span class=\"n\">UnionEnum</span>,</span><span class=\"param\">\t<span class=\"n\">baselines</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">simulation_datastructures</span><span class=\"o\">.</span><span class=\"n\">Comparison</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "patkit.simulation.simulation_datastructures.DistanceMetricSimulationResult.metric", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "DistanceMetricSimulationResult.metric", "kind": "variable", "doc": "<p></p>\n", "annotation": ": patkit.external_class_extensions.enum_extensions.UnionEnumMeta.make_union.&lt;locals&gt;.UnionEnum"}, {"fullname": "patkit.simulation.simulation_datastructures.DistanceMetricSimulationResult.baselines", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "DistanceMetricSimulationResult.baselines", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[patkit.simulation.simulation_datastructures.Comparison, float]"}, {"fullname": "patkit.simulation.simulation_datastructures.DistanceMetricSimulationResult.results", "modulename": "patkit.simulation.simulation_datastructures", "qualname": "DistanceMetricSimulationResult.results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[patkit.simulation.simulation_datastructures.Comparison, dict[str, numpy.ndarray]]"}, {"fullname": "patkit.simulation.simulation_plots", "modulename": "patkit.simulation.simulation_plots", "kind": "module", "doc": "<p>Plotting routines for simulation results.</p>\n"}, {"fullname": "patkit.simulation.simulation_plots.display_contour", "modulename": "patkit.simulation.simulation_plots", "qualname": "display_contour", "kind": "function", "doc": "<p>Plot a contour.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot.</li>\n<li><strong>contour</strong> (np.ndarray):\nThe contour to plot</li>\n<li><strong>display_indeces</strong> (bool):\nShould indeces be displayed, by default False</li>\n<li><strong>offset</strong> (float):\nRadial offset of the index texts, by default 0</li>\n<li><strong>origin_offset</strong> (tuple[float, float]):\nOffset of the contour origin in cartesian coordinates, \nby default (0.0, 0.0)</li>\n<li><strong>color</strong> (str):\nColor to display both the contour and the indeces in, by default None</li>\n<li><strong>polar</strong> (bool):\nIs the contour in polar coordinates, by default True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">display_indeces</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">origin_offset</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">polar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_plots.contour_ray_plot", "modulename": "patkit.simulation.simulation_plots", "qualname": "contour_ray_plot", "kind": "function", "doc": "<p>Plot metric values as rays on a contour.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>contour</strong> (np.ndarray):\nContour to plot on.</li>\n<li><strong>metric_values</strong> (dict[str, np.ndarray]):\nMetric values to plot by perturbation values.</li>\n<li><strong>metric_reference_value</strong> (float):\nMetric value to use as reference.</li>\n<li><strong>scale</strong> (float):\nScaling factor for the rays, by default 1</li>\n<li><strong>origin_offset</strong> (tuple[float, float]):\nCartesian offset for the origin, by default (0.0, 0.0)</li>\n<li><strong>relative</strong> (bool):\nTrue for calculating the ray magnitude as ratio of metric value and\nmetric reference value; False for ray magnitude as difference between\nmetric value and reference., by default False</li>\n<li><strong>color_threshold</strong> (tuple(float, float)):\nThreshold to switch from the first to the second color in plotting the\nrays if a second color is specified (see below). Specified in metric's\nunits relative to the <code>metric_reference_value</code>. If only one float is\ngiven instead of tuple of two, it will be used symmetrically as\n+/-color_threshold. By default, None.</li>\n<li><strong>colors</strong> (list[tuple[float,float,float,float]] | list[str]):\nOne or two RGB or RGBA tuples: e.g. [(0.1, 0.1, 0.1, 1.0)] to specify a\nsingle color, or a list of RGB or RGBA strings. Arbitrary color strings,\netc., are not allowed. By default, None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metric_values</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metric_reference_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">origin_offset</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">relative</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color_threshold</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_plots.dual_contour_ray_plot", "modulename": "patkit.simulation.simulation_plots", "qualname": "dual_contour_ray_plot", "kind": "function", "doc": "<p>Plot two contours and use one as the basis for a ray plot.</p>\n\n<p>This is a wrapper for calls to <code>display_contour</code> and <code>contour_ray_plot</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>unperturbed_contour</strong> (np.ndarray):\nThis contour will be displayed in lightgrey without rays.</li>\n<li><strong>perturbed_contour</strong> (np.ndarray):\nThis contour will be used as the basis of the ray plot.</li>\n<li><strong>metric_values</strong> (dict[str, np.ndarray]):\nMetric values to plot by perturbation values.</li>\n<li><strong>metric_reference_value</strong> (float):\nMetric value to use as reference.</li>\n<li><strong>scale</strong> (float):\nScaling factor for the rays, by default 1</li>\n<li><strong>origin_offset</strong> (tuple[float, float]):\nCartesian offset for the origin, by default (0.0, 0.0)</li>\n<li><strong>relative</strong> (bool):\nTrue for calculating the ray magnitude as ratio of metric value and\nmetric reference value; False for ray magnitude as difference between\nmetric value and reference., by default False</li>\n<li><strong>color_threshold</strong> (tuple(float, float)):\nThreshold to switch from the first to the second color in plotting the\nrays if a second color is specified (see below). Specified in metric's\nunits relative to the <code>metric_reference_value</code>. If only one float is\ngiven instead of tuple of two, it will be used symmetrically as\n+/-color_threshold. By default, None.</li>\n<li><strong>colors</strong> (list[tuple[float,float,float,float]] | list[str]):\nOne or two RGB or RGBA tuples: e.g. [(0.1, 0.1, 0.1, 1.0)] to specify a\nsingle color, or a list of RGB or RGBA strings. Arbitrary color strings,\netc., are not allowed. By default, None.</li>\n<li><strong>Returns</strong></li>\n<li><strong>-------</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">unperturbed_contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">perturbed_contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metric_values</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metric_reference_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">origin_offset</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">relative</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color_threshold</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_plots.plot_metric_on_contour", "modulename": "patkit.simulation.simulation_plots", "qualname": "plot_metric_on_contour", "kind": "function", "doc": "<p>Plot metric values on contour by changing colour of the markers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>contour</strong> (np.ndarray):\nContour to plot (on).</li>\n<li><strong>metric_values</strong> (np.ndarray):\nMetric values to plot.</li>\n<li><strong>origin_offset</strong> (tuple[float, float]):\nCartesian offset of the origin, by default (0.0, 0.0)</li>\n<li><strong>display_indeces</strong> (bool):\nShould node indeces be displayed, by default False</li>\n<li><strong>index_offset</strong> (float):\nRadial offset of the index texts, by default 0</li>\n<li><strong>color</strong> (str):\nColor to display the indeces in, by default None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">metric_values</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">origin_offset</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">display_indeces</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">index_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_plots.display_indeces_on_contours", "modulename": "patkit.simulation.simulation_plots", "qualname": "display_indeces_on_contours", "kind": "function", "doc": "<p>Display indeces on two contours.</p>\n\n<p>The indeces are displayed either on the inside or outside both contours\nto avoid overlapping between the text and the contours.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>contour1</strong> (np.ndarray):\nFirst contour.</li>\n<li><strong>contour2</strong> (np.ndarray):\nSecond contour.</li>\n<li><strong>outside</strong> (bool):\nShould the indeces be on the outside or the inside, by default True</li>\n<li><strong>offset</strong> (float):\nRadial offset of the index text, by default 0</li>\n<li><strong>color</strong> (str):\nColor to use for the text, by default None</li>\n<li><strong>polar</strong> (bool):\nAre the contours in polar coordinates, by default True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">contour1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">contour2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outside</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">polar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_plots.plot_contour_segment", "modulename": "patkit.simulation.simulation_plots", "qualname": "plot_contour_segment", "kind": "function", "doc": "<p>Plot a segment of the contour.</p>\n\n<p>Contour for [index-1:index+2] (two vertices +/-1 around the index) will be\nplotted.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>contour</strong> (np.ndarray):\nContour whose segment will be plotted.</li>\n<li><strong>index</strong> (int):\nIndex around which to plot.</li>\n<li><strong>show_index</strong> (bool):\nShould the index number be displayed, by default False</li>\n<li><strong>offset</strong> (float):\nRadial offset of the center of the segment, by default 0</li>\n<li><strong>color</strong> (str):\nColor to plot the segment in, by default None</li>\n<li><strong>polar</strong> (bool):\ncontour is in polar coordinates, by default True</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>IndexError</strong>: If index is out of bounds of the contour.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">show_index</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">polar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_plots.display_fan", "modulename": "patkit.simulation.simulation_plots", "qualname": "display_fan", "kind": "function", "doc": "<p>Display the radial fan for the contour.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (Axes):\nAxes to plot on.</li>\n<li><strong>contour</strong> (np.ndarray):\nThe contour whose fan will be plotted. However, the contour itself will\nnot be plotted.</li>\n<li><strong>color</strong> (str):\nColor to plot the fan in, by default None</li>\n<li><strong>polar</strong> (bool):\ncontour is in polar coordinates, by default True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">contour</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">polar</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_plots.make_demonstration_contour_plot", "modulename": "patkit.simulation.simulation_plots", "qualname": "make_demonstration_contour_plot", "kind": "function", "doc": "<p>Demonstrate two contours and perturbations on the first contour.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contour_1</strong> (np.ndarray):\nContour on both parts of the plot.</li>\n<li><strong>contour_2</strong> (np.ndarray):\nContour only on the first part of the plot.</li>\n<li><strong>figure_size</strong> (tuple[float, float] | None):\nSize of the figure in inches. If None is passed, defaults to 6.4 by 4.8.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">contour_1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">contour_2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">figure_size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.simulation.simulation_plots.plot_distance_metric_against_perturbation_point", "modulename": "patkit.simulation.simulation_plots", "qualname": "plot_distance_metric_against_perturbation_point", "kind": "function", "doc": "<p>Plot metric as function of perturbation point's number.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axes</strong> (list[Axes]):\nList of axes to plot on. This should be of length 2.</li>\n<li><strong>data</strong> (dict[str, np.ndarray]):\nDict keys are perturbation values and arrays are interleaved\nbaseline_to_perturbed and perturbed_to_baseline metric values.</li>\n<li><strong>label_stem</strong> (str):\nUsed in generating line labels, by default 'perturbation='</li>\n<li><strong>colors</strong> (list[str] | None):\nList of colors to use in plotting. List should be the same length as\ndata (number of keys). By default, None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[list[Line2D], list[str]]</strong>: List of lines and list of labels for legend creation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">label_stem</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;perturbation=&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.ui_callbacks", "modulename": "patkit.ui_callbacks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.ui_callbacks.UiCallbacks", "modulename": "patkit.ui_callbacks", "qualname": "UiCallbacks", "kind": "class", "doc": "<p>Mechanisms for handling user interaction via callbacks in a \nui implementation agnostic way.</p>\n\n<p>It is the responsibility of all UIs to implement and register\nthe callbacks defined here on initialisation. See <code>register_xyz</code>\nfor details.</p>\n"}, {"fullname": "patkit.ui_callbacks.UiCallbacks.confirm_overwrite", "modulename": "patkit.ui_callbacks", "qualname": "UiCallbacks.confirm_overwrite", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable[[str, ~T], patkit.constants.OverwriteConfirmation]]", "default_value": "None"}, {"fullname": "patkit.ui_callbacks.UiCallbacks.register_overwrite_confirmation_callback", "modulename": "patkit.ui_callbacks", "qualname": "UiCallbacks.register_overwrite_confirmation_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.ui_callbacks.UiCallbacks.get_overwrite_confirmation", "modulename": "patkit.ui_callbacks", "qualname": "UiCallbacks.get_overwrite_confirmation", "kind": "function", "doc": "<p>Confirm overwriting a file by asking the user.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nFile about to be overwritten.</li>\n<li><strong>parent</strong> (_type_, optional):\nFor tying a dialog to the gui main window, by default None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ReplaceResult</strong>: The user's response.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">patkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">OverwriteConfirmation</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.utility_functions", "modulename": "patkit.utility_functions", "kind": "module", "doc": "<p>General purpose utility functions.</p>\n"}, {"fullname": "patkit.utility_functions.logging_helpers", "modulename": "patkit.utility_functions.logging_helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.utility_functions.logging_helpers.start_time", "modulename": "patkit.utility_functions.logging_helpers", "qualname": "start_time", "kind": "variable", "doc": "<p></p>\n", "default_value": "1748295883.4626932"}, {"fullname": "patkit.utility_functions.logging_helpers.last_log_time", "modulename": "patkit.utility_functions.logging_helpers", "qualname": "last_log_time", "kind": "variable", "doc": "<p></p>\n", "default_value": "1748295883.4626937"}, {"fullname": "patkit.utility_functions.logging_helpers.set_logging_level", "modulename": "patkit.utility_functions.logging_helpers", "qualname": "set_logging_level", "kind": "function", "doc": "<p>Set up logging with the logging module.</p>\n\n<p>Main thing to do is set the level of printed output based on the\nverbosity argument.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">verbosity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.utility_functions.logging_helpers.log_elapsed_time", "modulename": "patkit.utility_functions.logging_helpers", "qualname": "log_elapsed_time", "kind": "function", "doc": "<p>Log the time elapsed since logging began.</p>\n\n<p>Also logs the time since the last call to this function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.utility_functions.path", "modulename": "patkit.utility_functions.path", "kind": "module", "doc": "<p>Path helper functions.</p>\n"}, {"fullname": "patkit.utility_functions.path.path_from_name", "modulename": "patkit.utility_functions.path", "qualname": "path_from_name", "kind": "function", "doc": "<p>Ensure the output is a Path instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str | Path | None):\nThe filename can be either string, Path or None. None is interpreted as\ncurrent directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: Output is always a Path instance. If None is passed as filename the\nreturn value will be <code>Path('.')</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.utility_functions.path.stem_path", "modulename": "patkit.utility_functions.path", "qualname": "stem_path", "kind": "function", "doc": "<p>Return the path without suffixes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (Path):\nA filepath.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Path</strong>: The filepath with suffixes removed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.utility_functions.processing_helpers", "modulename": "patkit.utility_functions.processing_helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "patkit.utility_functions.processing_helpers.camel_to_snake", "modulename": "patkit.utility_functions.processing_helpers", "qualname": "camel_to_snake", "kind": "function", "doc": "<p>Transform name from CamelCase to snake_case.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nName to be converted to snake_case.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The transformed name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.utility_functions.processing_helpers.product_dict", "modulename": "patkit.utility_functions.processing_helpers", "qualname": "product_dict", "kind": "function", "doc": "<p>Produce a list of dicts of the Cartesian product of lists in a dict.</p>\n\n<p>In essence goes from a dict that contains lists to a list that contains\ndicts where the dicts span all of the combinations of the list members in\nthe original dict's fields.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;orange&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">product_dict</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)))</span>\n\n<span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;orange&quot;</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;orange&quot;</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;orange&quot;</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h6 id=\"yields\">Yields</h6>\n\n<ul>\n<li><strong>list of dicts</strong>: See example above.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "patkit.utility_functions.string_formatters", "modulename": "patkit.utility_functions.string_formatters", "kind": "module", "doc": "<p>String formatter functions.</p>\n"}, {"fullname": "patkit.utility_functions.string_formatters.split_by", "modulename": "patkit.utility_functions.string_formatters", "qualname": "split_by", "kind": "function", "doc": "<p>Split a string by delimiters.</p>\n\n<p>No nesting of delimiters is allowed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>string</strong> (str):\nThe string to split.</li>\n<li><strong>delimiters</strong> (str):\nThe delimiter(s) to split the string by, by default \"{}\".</li>\n</ul>\n\n<h6 id=\"yields\">Yields</h6>\n\n<ul>\n<li><strong>tuple[str, bool]</strong>: The next chunk and a boolean indicating if the chunk is a directive\nstring (surrounded by delimiters).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">delimiters</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.utility_functions.types", "modulename": "patkit.utility_functions.types", "kind": "module", "doc": "<p>Type processing helper functions.</p>\n"}, {"fullname": "patkit.utility_functions.types.is_sequence_form", "modulename": "patkit.utility_functions.types", "qualname": "is_sequence_form", "kind": "function", "doc": "<p>Return True if the object is a sequence but not a string.</p>\n\n<p>Note that this function returns False for numpy arrays which should be\nidentified with <code>isinstance</code> and treated separately because they can be\nindexed with a different syntax. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong> (Any):\nany object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True for sequences, False for strings and everything else.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "patkit.default_configuration", "modulename": "patkit.default_configuration", "kind": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();