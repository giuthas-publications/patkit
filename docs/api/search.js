window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "satkit", "modulename": "satkit", "kind": "module", "doc": "<p>SATKIT -- The Speech Articulation ToolKIT</p>\n\n<p>SATKIT consists of several interdependent modules.</p>\n\n<p><img src=\"packages_satkit.png\" alt=\"SATKIT Module hierarchy\" title=\"SATKIT Module hierarchy\" /></p>\n\n<p>SATKIT's data structures are built around two class hierarchies: \nThe Recording and the Modality. Similarly the commandline interface -- and \nthe batch processing of data -- is handled by classes that extend CLI and \ngraphical annotation tools derive from Annotator.</p>\n\n<p><img src=\"classes_satkit.png\" alt=\"SATKIT Class hierarchies\" title=\"SATKIT Class hierarchies\" /></p>\n"}, {"fullname": "satkit.audio_processing", "modulename": "satkit.audio_processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.audio_processing.audio_processing", "modulename": "satkit.audio_processing.audio_processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.audio_processing.audio_processing.high_pass_50", "modulename": "satkit.audio_processing.audio_processing", "qualname": "high_pass_50", "kind": "function", "doc": "<p>Returns a high-pass filter with a 50Hz stop band. Used for\nfiltering the mains frequency away from recorded sound.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sampling_frequency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.audio_processing.audio_processing.high_pass", "modulename": "satkit.audio_processing.audio_processing", "qualname": "high_pass", "kind": "function", "doc": "<p>Returns a high-pass filter with a stop band of sb. Used for\nfiltering the mains frequency away from recorded sound.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sampling_frequency</span>, </span><span class=\"param\"><span class=\"n\">stop_band</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.audio_processing.audio_processing.band_pass", "modulename": "satkit.audio_processing.audio_processing", "qualname": "band_pass", "kind": "function", "doc": "<p>Generate a band pass filter for detecting a 1kHz signal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sampling_frequency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.audio_processing.audio_processing.MainsFilter", "modulename": "satkit.audio_processing.audio_processing", "qualname": "MainsFilter", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "satkit.audio_processing.audio_processing.MainsFilter.mains_frequency", "modulename": "satkit.audio_processing.audio_processing", "qualname": "MainsFilter.mains_frequency", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "satkit.audio_processing.audio_processing.MainsFilter.mains_filter", "modulename": "satkit.audio_processing.audio_processing", "qualname": "MainsFilter.mains_filter", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "satkit.audio_processing.audio_processing.MainsFilter.generate_mains_filter", "modulename": "satkit.audio_processing.audio_processing", "qualname": "MainsFilter.generate_mains_filter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sampling_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">mains_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.audio_processing.audio_processing.detect_beep_and_speech", "modulename": "satkit.audio_processing.audio_processing", "qualname": "detect_beep_and_speech", "kind": "function", "doc": "<p>Find a 1kHz 50ms beep at the beginning of a sound sample.</p>\n\n<pre><code>This functions is for processing delayed naming data\nwhere the go-signal is a 1kHz 50ms beep. The algorithm assumes\nthat the signal is the first properly detectable sound in\nthe sample and also that it starts with a rising edge.\nThe detection is based on locating the first negative\nvalued half wave (the second half wave) and working backwards\nfrom that using zero crossings and wave duration to pinpoint\nthe onset.\n\nParameters:\nframes: the sound sample\nsampling_frequency: the sampling frequency of the sound sample\nb and a: high pass filter parameters to remove the electrical\n    mains' interference\nname: name identifying the sample. Usually the filename.\n</code></pre>\n\n<p>1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">frames</span>, </span><span class=\"param\"><span class=\"n\">sampling_frequency</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration", "modulename": "satkit.configuration", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.configuration.configuration", "modulename": "satkit.configuration.configuration", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.configuration.configuration.config", "modulename": "satkit.configuration.configuration", "qualname": "config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;epsilon&#x27;: 1e-05, &#x27;mains frequency&#x27;: 50.0, &#x27;data run parameter file&#x27;: PosixPath(&#x27;configuration/satkit_data_run_parameters.yaml&#x27;), &#x27;gui parameter file&#x27;: PosixPath(&#x27;configuration/satkit_gui_parameters.yaml&#x27;)}"}, {"fullname": "satkit.configuration.configuration.data_run_params", "modulename": "satkit.configuration.configuration", "qualname": "data_run_params", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;flags&#x27;: {&#x27;detect beep&#x27;: True, &#x27;test&#x27;: False}, &#x27;data properties&#x27;: {&#x27;data source&#x27;: &lt;Datasource.AAA: &#x27;AAA&#x27;&gt;, &#x27;exclusion list&#x27;: None, &#x27;data path&#x27;: PosixPath(&#x27;local_data/icphs-2023-giulia&#x27;), &#x27;wav directory&#x27;: None, &#x27;textgrid directory&#x27;: None, &#x27;ultrasound directory&#x27;: None, &#x27;output directory&#x27;: PosixPath(&#x27;local_data/icphs-2023-giulia/satkit&#x27;)}, &#x27;cast&#x27;: {&#x27;pronunciation dictionary&#x27;: PosixPath(&#x27;local_data/gam_mono_and_disyllables_for_automatic_segmentation.csv&#x27;), &#x27;speaker id&#x27;: &#x27;gam-1-2&#x27;, &#x27;cast flags&#x27;: {&#x27;only words&#x27;: False, &#x27;utterance&#x27;: True, &#x27;file&#x27;: False}}}"}, {"fullname": "satkit.configuration.configuration.gui_params", "modulename": "satkit.configuration.configuration", "qualname": "gui_params", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;data/tier height ratios&#x27;: {&#x27;data&#x27;: 2, &#x27;tier&#x27;: 1}, &#x27;data axes&#x27;: {&#x27;global&#x27;: {&#x27;sharex&#x27;: True}, &#x27;PD&#x27;: {&#x27;modalities&#x27;: [&#x27;l2 whole&#x27;, &#x27;l2 bottom&#x27;], &#x27;sharex&#x27;: True}, &#x27;wav&#x27;: {&#x27;sharex&#x27;: True}, &#x27;spectrogram&#x27;: {&#x27;sharex&#x27;: True}}, &#x27;pervasive tiers&#x27;: [&#x27;Segment&#x27;, &#x27;Segments&#x27;, &#x27;segment&#x27;, &#x27;segments&#x27;, &#x27;phoneme&#x27;], &#x27;xlim&#x27;: [-0.25, 1.5], &#x27;default font size&#x27;: 10, &#x27;number of data axes&#x27;: 3}"}, {"fullname": "satkit.configuration.configuration.plot_params", "modulename": "satkit.configuration.configuration", "qualname": "plot_params", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.configuration.configuration.DatasourceValidator", "modulename": "satkit.configuration.configuration", "qualname": "DatasourceValidator", "kind": "class", "doc": "<p>Validate yaml representing a Path.</p>\n\n<p>Please note that empty fields are interpeted as not available and\nrepresented by None. If you want to specify current working directory, use\n'.'</p>\n", "bases": "strictyaml.scalar.ScalarValidator"}, {"fullname": "satkit.configuration.configuration.DatasourceValidator.validate_scalar", "modulename": "satkit.configuration.configuration", "qualname": "DatasourceValidator.validate_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.configuration.PathValidator", "modulename": "satkit.configuration.configuration", "qualname": "PathValidator", "kind": "class", "doc": "<p>Validate yaml representing a Path.</p>\n\n<p>Please note that empty fields are interpeted as not available and\nrepresented by None. If you want to specify current working directory, use\n'.'</p>\n", "bases": "strictyaml.scalar.ScalarValidator"}, {"fullname": "satkit.configuration.configuration.PathValidator.validate_scalar", "modulename": "satkit.configuration.configuration", "qualname": "PathValidator.validate_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chunk</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.configuration.load_config", "modulename": "satkit.configuration.configuration", "qualname": "load_config", "kind": "function", "doc": "<p>Read the config file from filepath and recursively the other config files.</p>\n\n<p>If filepath is None, read from the default file\n'configuration/configuration.yaml'. In both cases if the file does not\nexist, report this and exit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.configuration.load_main_config", "modulename": "satkit.configuration.configuration", "qualname": "load_main_config", "kind": "function", "doc": "<p>Read the config file from filepath.</p>\n\n<p>If filepath is None, read from the default file\n'configuration/configuration.yaml'. In both cases if the file does not\nexist, report this and exit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.configuration.load_run_params", "modulename": "satkit.configuration.configuration", "qualname": "load_run_params", "kind": "function", "doc": "<p>Read the config file from filepath.</p>\n\n<p>If filepath is None, read from the default file\n'configuration/configuration.yaml'. In both cases if the file does not\nexist, report this and exit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.configuration.load_gui_params", "modulename": "satkit.configuration.configuration", "qualname": "load_gui_params", "kind": "function", "doc": "<p>Read the config file from filepath.</p>\n\n<p>If filepath is None, read from the default file\n'configuration/configuration.yaml'. In both cases if the file does not\nexist, report this and exit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.configuration.load_plot_params", "modulename": "satkit.configuration.configuration", "qualname": "load_plot_params", "kind": "function", "doc": "<p>Read the plot file from filepath.</p>\n\n<p>Not yet implemented. Will raise a NotImplementedError.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.exclusion_list", "modulename": "satkit.configuration.exclusion_list", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.configuration.exclusion_list.set_exclusions_from_csv_file", "modulename": "satkit.configuration.exclusion_list", "qualname": "set_exclusions_from_csv_file", "kind": "function", "doc": "<p>Read list of files (that is, recordings) to be excluded from processing\nand mark them as excluded in the array of recording objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">recordings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.exclusion_list.read_exclusion_list_from_yaml", "modulename": "satkit.configuration.exclusion_list", "qualname": "read_exclusion_list_from_yaml", "kind": "function", "doc": "<p>Read the exclusion list from filepath.</p>\n\n<p>If no exclusion list file is present, return an empty array\nafter warning the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.exclusion_list.apply_yaml_exclusion_list", "modulename": "satkit.configuration.exclusion_list", "qualname": "apply_yaml_exclusion_list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">exclusion_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.configuration.exclusion_list.read_file_exclusion_list_from_csv", "modulename": "satkit.configuration.exclusion_list", "qualname": "read_file_exclusion_list_from_csv", "kind": "function", "doc": "<p>Read list of files (that is, recordings) to be excluded from processing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.constants", "modulename": "satkit.constants", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.constants.SATKIT_VERSION", "modulename": "satkit.constants", "qualname": "SATKIT_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;0.6&#x27;"}, {"fullname": "satkit.constants.SATKIT_FILE_VERSION", "modulename": "satkit.constants", "qualname": "SATKIT_FILE_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;0.6&#x27;"}, {"fullname": "satkit.constants.SatkitSuffix", "modulename": "satkit.constants", "qualname": "SatkitSuffix", "kind": "class", "doc": "<p>Suffixes for files saved by SATKIT.</p>\n\n<p>These exist as a convenient way of not needing to risk typos. To see the\nwhole layered scheme SATKIT uses see the 'Saving and Loading Data' section\nin the documentation.</p>\n"}, {"fullname": "satkit.constants.SatkitSuffix.CONFIG", "modulename": "satkit.constants", "qualname": "SatkitSuffix.CONFIG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.yaml&#x27;"}, {"fullname": "satkit.constants.SatkitSuffix.DATA", "modulename": "satkit.constants", "qualname": "SatkitSuffix.DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.npz&#x27;"}, {"fullname": "satkit.constants.SatkitSuffix.META", "modulename": "satkit.constants", "qualname": "SatkitSuffix.META", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.satkit_meta&#x27;"}, {"fullname": "satkit.constants.SourceSuffix", "modulename": "satkit.constants", "qualname": "SourceSuffix", "kind": "class", "doc": "<p>Suffixes for files imported by SATKIT.</p>\n\n<p>These exist as a convenient way of not needing to risk typos and for\nrecognising what SATKIT is being asked to import.</p>\n\n<p>Note that AAA_ULTRA_META_OLD is not a proper suffix and won't be recognised\nby pathlib and Path as such. Instead do this</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">directory_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">from_some_source</span><span class=\"p\">)</span>\n<span class=\"n\">directory_path</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">name_string</span> <span class=\"o\">+</span> <span class=\"n\">SourceSuffix</span><span class=\"o\">.</span><span class=\"n\">AAA_ULTRA_META_OLD</span><span class=\"p\">)</span> \n</code></pre>\n</div>\n"}, {"fullname": "satkit.constants.SourceSuffix.AAA_ULTRA", "modulename": "satkit.constants", "qualname": "SourceSuffix.AAA_ULTRA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.ult&#x27;"}, {"fullname": "satkit.constants.SourceSuffix.AAA_ULTRA_META_OLD", "modulename": "satkit.constants", "qualname": "SourceSuffix.AAA_ULTRA_META_OLD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;US.txt&#x27;"}, {"fullname": "satkit.constants.SourceSuffix.AAA_ULTRA_META_NEW", "modulename": "satkit.constants", "qualname": "SourceSuffix.AAA_ULTRA_META_NEW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.param&#x27;"}, {"fullname": "satkit.constants.SourceSuffix.AAA_PROMPT", "modulename": "satkit.constants", "qualname": "SourceSuffix.AAA_PROMPT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.txt&#x27;"}, {"fullname": "satkit.constants.SourceSuffix.AAA_SPLINES", "modulename": "satkit.constants", "qualname": "SourceSuffix.AAA_SPLINES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.spl&#x27;"}, {"fullname": "satkit.constants.SourceSuffix.AVI", "modulename": "satkit.constants", "qualname": "SourceSuffix.AVI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.avi&#x27;"}, {"fullname": "satkit.constants.Datasource", "modulename": "satkit.constants", "qualname": "Datasource", "kind": "class", "doc": "<p>Data sources SATKIT can handle.</p>\n\n<p>Used in saving and loading to identify the data source in config, as well as\nin meta and skip the step of trying to figure the data source out from the\ntype of files present.</p>\n", "bases": "enum.Enum"}, {"fullname": "satkit.constants.Datasource.AAA", "modulename": "satkit.constants", "qualname": "Datasource.AAA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Datasource.AAA: &#x27;AAA&#x27;&gt;"}, {"fullname": "satkit.constants.Datasource.RASL", "modulename": "satkit.constants", "qualname": "Datasource.RASL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Datasource.RASL: &#x27;RASL&#x27;&gt;"}, {"fullname": "satkit.constants.SavedObjectTypes", "modulename": "satkit.constants", "qualname": "SavedObjectTypes", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "satkit.constants.SavedObjectTypes.RECORDING_SESSION", "modulename": "satkit.constants", "qualname": "SavedObjectTypes.RECORDING_SESSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.RECORDING_SESSION: &#x27;RecordingSession&#x27;&gt;"}, {"fullname": "satkit.constants.SavedObjectTypes.RECORDING", "modulename": "satkit.constants", "qualname": "SavedObjectTypes.RECORDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.RECORDING: &#x27;Recording&#x27;&gt;"}, {"fullname": "satkit.constants.SavedObjectTypes.MODALITY", "modulename": "satkit.constants", "qualname": "SavedObjectTypes.MODALITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SavedObjectTypes.MODALITY: &#x27;Modality&#x27;&gt;"}, {"fullname": "satkit.data_import", "modulename": "satkit.data_import", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_import.modality_adders", "modulename": "satkit.data_import", "qualname": "modality_adders", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;MonoAudio&#x27;: &lt;function add_audio&gt;, &#x27;RawUltrasound&#x27;: &lt;function add_aaa_raw_ultrasound&gt;, &#x27;ThreeD_Ultrasound&#x27;: &lt;function add_rasl_3D_ultrasound&gt;, &#x27;Video&#x27;: &lt;function add_video&gt;}"}, {"fullname": "satkit.data_import.AAA_raw_ultrasound", "modulename": "satkit.data_import.AAA_raw_ultrasound", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_import.AAA_raw_ultrasound.parse_recording_meta_from_aaa_promptfile", "modulename": "satkit.data_import.AAA_raw_ultrasound", "qualname": "parse_recording_meta_from_aaa_promptfile", "kind": "function", "doc": "<p>Read an AAA .txt (not US.txt or .param) file and save prompt, \nrecording date and time, and participant name into the RecordingMetaData.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">RecordingMetaData</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.AAA_raw_ultrasound.parse_ultrasound_meta_aaa", "modulename": "satkit.data_import.AAA_raw_ultrasound", "qualname": "parse_ultrasound_meta_aaa", "kind": "function", "doc": "<p>Parse metadata from an AAA export file into a dictionary.</p>\n\n<p>This is either a 'US.txt' or a '.param' file. They have\nthe same format.</p>\n\n<p>Arguments:\nfilename -- path and name of file to be parsed.</p>\n\n<p>Returns a dictionary which should contain the following keys:\n    NumVectors -- number of scanlines in a frame\n    PixPerVector -- number of pixels in a scanline\n    ZeroOffset --\n    BitsPerPixel -- byte length of a single pixel in the .ult file\n    Angle -- angle in radians between two scanlines\n    Kind -- type of probe used\n    PixelsPerMm -- depth resolution of a scanline\n    FramesPerSec -- framerate of ultrasound recording\n    TimeInSecsOfFirstFrame -- time from recording start to first frame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.AAA_raw_ultrasound.add_aaa_raw_ultrasound", "modulename": "satkit.data_import.AAA_raw_ultrasound", "qualname": "add_aaa_raw_ultrasound", "kind": "function", "doc": "<p>Create a RawUltrasound Modality and add it to the Recording.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>recording : Recording\n    _description_\npreload : bool\n    Should we load the data when creating the modality or not. Defaults to\n    False to prevent massive memory consumption. See also error below.\npath : Optional[Path], optional\n    _description_, by default None</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    Preloading ultrasound data has not been implemented yet. If you really,\n    really want to, this is the function where to do that.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.AAA_recordings", "modulename": "satkit.data_import.AAA_recordings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_import.AAA_recordings.generate_aaa_recording_list", "modulename": "satkit.data_import.AAA_recordings", "qualname": "generate_aaa_recording_list", "kind": "function", "doc": "<p>Produce an array of Recordings from an AAA export directory.</p>\n\n<p>Prepare a list of Recording objects from the files exported by AAA\ninto the named directory. File existence is tested for,\nand if crucial files are missing from a given recording it will be\nexcluded.</p>\n\n<p>Each recording meta file (.txt, not US.txt) will\nbe represented by a Recording object regardless of whether a complete\nset of files was found for the recording. Exclusion is marked with\nrecording.excluded rather than not listing the recording. Log\nfile will show reasons of exclusion.</p>\n\n<p>The processed files are\nrecording meta: .txt,\nultrasound meta: US.txt or .param,\nultrasound: .ult, and\naudio waveform: .wav.</p>\n\n<p>Additionally these will be added, but missing files are considered\nnon-fatal\nTextGrid: .textgrid, and\navi video: .avi.</p>\n\n<p>directory -- the path to the directory to be processed.\nReturns an array of Recording objects sorted by date and time\n    of recording.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">directory_structure</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.AAA_recordings.generate_ultrasound_recording", "modulename": "satkit.data_import.AAA_recordings", "qualname": "generate_ultrasound_recording", "kind": "function", "doc": "<p>Generate an UltrasoundRecording without Modalities.</p>\n\n<p>Arguments:\nbasename -- name of the files to be read without type extensions but\n    with path.</p>\n\n<p>KeywordArguments:\ndirectory -- path to files</p>\n\n<p>Returns an AaaUltrasoundRecording without any modalities.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">basename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.AAA_recordings.add_modalities", "modulename": "satkit.data_import.AAA_recordings", "qualname": "add_modalities", "kind": "function", "doc": "<p>Add audio and raw ultrasound data to the recording.</p>\n\n<p>Keyword arguments:\nwavPreload -- boolean indicating if the .wav file is to be read into\n    memory on initialising. Defaults to True.\nultPreload -- boolean indicating if the .ult file is to be read into\n    memory on initialising. Defaults to False. Note: these\n    files are, roughly one to two orders of magnitude\n    larger than .wav files.\nvideoPreload -- boolean indicating if the .avi file is to be read into\n    memory on initialising. Defaults to False. Note: these\n    files are, yet again, roughly one to two orders of magnitude\n    larger than .ult files.</p>\n\n<p>Throws KeyError if TimeInSecsOfFirstFrame is missing from the\nmeta file: [directory]/basename + .txt.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">wav_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ult_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">video_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.AAA_splines", "modulename": "satkit.data_import.AAA_splines", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_import.AAA_splines.parse_spline_line", "modulename": "satkit.data_import.AAA_splines", "qualname": "parse_spline_line", "kind": "function", "doc": "<p>Parse a single line in an old AAA spline export file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.AAA_splines.retrieve_splines", "modulename": "satkit.data_import.AAA_splines", "qualname": "retrieve_splines", "kind": "function", "doc": "<p>Read all splines from the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.AAA_splines.add_splines_from_file", "modulename": "satkit.data_import.AAA_splines", "qualname": "add_splines_from_file", "kind": "function", "doc": "<p>Add a Spline data object to each recording.</p>\n\n<p>The splines are read from a single AAA export file and added to\nthe correct Recording by identifying the Recordings based on the date\nand time of the original recording. If no splines are found for a\ngiven Recording, an empty Spline object will be attached to it.</p>\n\n<p>Arguments:\nrecording_list -- a list of Recording objects\nspline_file -- an AAA export file containing splines</p>\n\n<p>Return -- None. Recordings are modified in place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">recording_list</span>, </span><span class=\"param\"><span class=\"n\">spline_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.RASL_3D_ultrasound_recordings", "modulename": "satkit.data_import.RASL_3D_ultrasound_recordings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_import.RASL_3D_ultrasound_recordings.generate_rasl_recording_list", "modulename": "satkit.data_import.RASL_3D_ultrasound_recordings", "qualname": "generate_rasl_recording_list", "kind": "function", "doc": "<p>Produce an array of Recordings from a 3D4D ultrasound directory.</p>\n\n<p>Prepare a list of Recording objects from the files exported by AAA\ninto the named directory. File existence is tested for,\nand if crucial files are missing from a given recording it will be\nexcluded.</p>\n\n<p>If problems are found with a recording, exclusion is marked with\nrecordingObjet.excluded rather than not listing the recording. Log\nfile will show reasons of exclusion.</p>\n\n<p>The processed files are\nultrasound and corresponding meta: .DCM, and\naudio waveform: .dat or .wav.</p>\n\n<p>Additionally this will be added, but missing files are considered\nnon-fatal:\nTextGrid: .textgrid.</p>\n\n<p>Positional argument:\ndirectory -- the path to the directory to be processed.\nReturns an array of Recording objects sorted by date and time\n    of recording.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.RASL_3D_ultrasound_recordings.generate_recording_list_old_style", "modulename": "satkit.data_import.RASL_3D_ultrasound_recordings", "qualname": "generate_recording_list_old_style", "kind": "function", "doc": "<p>Produce an array of Recordings from a 3D4D ultrasound directory without .mat notes file.</p>\n\n<p>Prepare a list of Recording objects from the files exported by AAA\ninto the named directory. File existence is tested for,\nand if crucial files are missing from a given recording it will be\nexcluded.</p>\n\n<p>If problems are found with a recording, exclusion is marked with\nrecordingObjet.excluded rather than not listing the recording. Log\nfile will show reasons of exclusion.</p>\n\n<p>The processed files are\nultrasound and corresponding meta: .DCM, and\naudio waveform: .dat or .wav.</p>\n\n<p>Additionally this will be added, but missing files are considered\nnon-fatal:\nTextGrid: .textgrid.</p>\n\n<p>Positional argument:\ndirectory -- the path to the directory to be processed.\nReturns an array of Recording objects sorted by date and time\n    of recording.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.RASL_3D_ultrasound_recordings.generate_3D_ultrasound_recording", "modulename": "satkit.data_import.RASL_3D_ultrasound_recordings", "qualname": "generate_3D_ultrasound_recording", "kind": "function", "doc": "<p>Generate an UltrasoundRecording without Modalities.</p>\n\n<p>Arguments:\ndicom_name -- name of the DICOM files to be read without type \n    extensions but with path.\nsound_name -- name of the sound files (.dat and .wav) to be read \n    without type extensions but with path.</p>\n\n<p>KeywordArguments:\ndirectory -- path to files</p>\n\n<p>Returns an ThreeD_UltrasoundRecording without any modalities.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dicom_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sound_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">directories</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.RASL_3D_ultrasound_recordings.add_modalities", "modulename": "satkit.data_import.RASL_3D_ultrasound_recordings", "qualname": "add_modalities", "kind": "function", "doc": "<p>Add audio and raw ultrasound data to the recording.</p>\n\n<p>Keyword arguments:\nwavPreload -- boolean indicating if the .wav file is to be read into\n    memory on initialising. Defaults to True.\nultPreload -- boolean indicating if the ultrasound in .dicom files \n    should be read into memory on initialising. \n    Defaults to False. Note: these\n    files are roughly one to two orders of magnitude\n    larger than .wav files.\nvideoPreload -- boolean indicating if the .avi file is to be read into\n    memory on initialising. Defaults to False. Note: these\n    files are, yet again, roughly one to two orders of magnitude\n    larger than .dicom files.</p>\n\n<p>Throws KeyError if TimeInSecsOfFirstFrame is missing from the\nmeta file: [directory]/basename + .txt.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">wav_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ult_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">video_preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.audio", "modulename": "satkit.data_import.audio", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_import.audio.add_audio", "modulename": "satkit.data_import.audio", "qualname": "add_audio", "kind": "function", "doc": "<p>Create a MonoAudio Modality and add it to the Recording.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>recording : Recording\n    _description_\npreload : bool, optional\n    _description_, by default True\npath : Optional[Path], optional\n    _description_, by default None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.three_dim_ultrasound", "modulename": "satkit.data_import.three_dim_ultrasound", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_import.three_dim_ultrasound.read_3D_meta_from_mat_file", "modulename": "satkit.data_import.three_dim_ultrasound", "qualname": "read_3D_meta_from_mat_file", "kind": "function", "doc": "<p>Read a RASL .mat file and return relevant contents as a dict.</p>\n\n<p>Positional argument:\nmat_file -- either a pathlib Path object representing the .mat \n    file or a string of the same.</p>\n\n<p>Returns -- an array of dicts that contain the following fields:\n    'trial_number': number of the recording within this session,\n    'prompt': prompt displayed to the participant,\n    'date_and_time': a datetime object of the time recording \n        started, and\n    'dat_filename': string representing the name of the .dat \n        sound file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.three_dim_ultrasound.generateMeta", "modulename": "satkit.data_import.three_dim_ultrasound", "qualname": "generateMeta", "kind": "function", "doc": "<p>Parse a RASL .mat file's rows and return relevant contents as a dict.</p>\n\n<p>Positional argument:\nmat_file -- either a pathlib Path object representing the .mat\n    file or a string of the same.</p>\n\n<p>Returns -- an array of dicts that contain the following fields:\n    'trial_number': number of the recording within this session,\n    'prompt': prompt displayed to the participant,\n    'date_and_time': a datetime object of the time recording\n        started, and\n    'dat_filename': string representing the name of the .dat\n        sound file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rows</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.three_dim_ultrasound.add_rasl_3D_ultrasound", "modulename": "satkit.data_import.three_dim_ultrasound", "qualname": "add_rasl_3D_ultrasound", "kind": "function", "doc": "<p>Create a RawUltrasound Modality and add it to the Recording.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_import.video", "modulename": "satkit.data_import.video", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_import.video.add_video", "modulename": "satkit.data_import.video", "qualname": "add_video", "kind": "function", "doc": "<p>Create a RawUltrasound Modality and add it to the Recording.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>recording : Recording\n    _description_\npreload : bool, optional\n    Should we load the data when creating the modality or not. Defaults to\n    False to prevent massive memory consumption. See also error below.\npath : Optional[Path], optional\n    _description_, by default None</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>NotImplementedError\n    Preloading video data has not been implemented yet. If you really,\n    really want to, this is the function where to do that.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_structures", "modulename": "satkit.data_structures", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.RecordingMetaData", "modulename": "satkit.data_structures", "qualname": "RecordingMetaData", "kind": "class", "doc": "<p>Basic metadata that any Recording should reasonably have.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "satkit.data_structures.RecordingMetaData.prompt", "modulename": "satkit.data_structures", "qualname": "RecordingMetaData.prompt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.data_structures.RecordingMetaData.time_of_recording", "modulename": "satkit.data_structures", "qualname": "RecordingMetaData.time_of_recording", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "satkit.data_structures.RecordingMetaData.participant_id", "modulename": "satkit.data_structures", "qualname": "RecordingMetaData.participant_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.data_structures.RecordingMetaData.basename", "modulename": "satkit.data_structures", "qualname": "RecordingMetaData.basename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.data_structures.RecordingMetaData.path", "modulename": "satkit.data_structures", "qualname": "RecordingMetaData.path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "satkit.data_structures.RecordingMetaData.model_config", "modulename": "satkit.data_structures", "qualname": "RecordingMetaData.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.data_structures.RecordingMetaData.model_fields", "modulename": "satkit.data_structures", "qualname": "RecordingMetaData.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;prompt&#x27;: FieldInfo(annotation=str, required=True), &#x27;time_of_recording&#x27;: FieldInfo(annotation=datetime, required=True), &#x27;participant_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;basename&#x27;: FieldInfo(annotation=str, required=True), &#x27;path&#x27;: FieldInfo(annotation=Path, required=True)}"}, {"fullname": "satkit.data_structures.ModalityData", "modulename": "satkit.data_structures", "qualname": "ModalityData", "kind": "class", "doc": "<p>Data passed from Modality generation into Modality.</p>\n\n<p>None of the fields are optional. This class represents already\nloaded data.</p>\n"}, {"fullname": "satkit.data_structures.ModalityData.__init__", "modulename": "satkit.data_structures", "qualname": "ModalityData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">sampling_rate</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">timevector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, {"fullname": "satkit.data_structures.ModalityData.data", "modulename": "satkit.data_structures", "qualname": "ModalityData.data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "satkit.data_structures.ModalityData.sampling_rate", "modulename": "satkit.data_structures", "qualname": "ModalityData.sampling_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "satkit.data_structures.ModalityData.timevector", "modulename": "satkit.data_structures", "qualname": "ModalityData.timevector", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "satkit.data_structures.ModalityMetaData", "modulename": "satkit.data_structures", "qualname": "ModalityMetaData", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.2/usage/models/\">https://docs.pydantic.dev/2.2/usage/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "satkit.data_structures.ModalityMetaData.parent_name", "modulename": "satkit.data_structures", "qualname": "ModalityMetaData.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "satkit.data_structures.ModalityMetaData.model_config", "modulename": "satkit.data_structures", "qualname": "ModalityMetaData.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.data_structures.ModalityMetaData.model_fields", "modulename": "satkit.data_structures", "qualname": "ModalityMetaData.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;parent_name&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False)}"}, {"fullname": "satkit.data_structures.RecordingSession", "modulename": "satkit.data_structures", "qualname": "RecordingSession", "kind": "class", "doc": "<p>The meta and Recordings of a recording session.</p>\n"}, {"fullname": "satkit.data_structures.RecordingSession.__init__", "modulename": "satkit.data_structures", "qualname": "RecordingSession.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">datasource</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">Datasource</span>,</span><span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "satkit.data_structures.RecordingSession.name", "modulename": "satkit.data_structures", "qualname": "RecordingSession.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.data_structures.RecordingSession.path", "modulename": "satkit.data_structures", "qualname": "RecordingSession.path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "satkit.data_structures.RecordingSession.datasource", "modulename": "satkit.data_structures", "qualname": "RecordingSession.datasource", "kind": "variable", "doc": "<p></p>\n", "annotation": ": satkit.constants.Datasource"}, {"fullname": "satkit.data_structures.RecordingSession.recordings", "modulename": "satkit.data_structures", "qualname": "RecordingSession.recordings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[satkit.data_structures.Recording]"}, {"fullname": "satkit.data_structures.Recording", "modulename": "satkit.data_structures", "qualname": "Recording", "kind": "class", "doc": "<p>A Recording contains 0-n synchronised Modalities.</p>\n\n<p>The recording also contains the non-modality \nspecific metadata (participant, speech content, etc) \nas a dictionary, as well as the textgrid for the whole recording.</p>\n\n<p>In inheriting classes call self._read_textgrid() after calling\nsuper.__init__() (with correct arguments) and doing any updates\nto self.meta['textgrid'] that are necessary.</p>\n"}, {"fullname": "satkit.data_structures.Recording.__init__", "modulename": "satkit.data_structures", "qualname": "Recording.__init__", "kind": "function", "doc": "<p>Construct a mainly empty recording without modalities.</p>\n\n<p>Modalities and annotations get added after constructions with their own\nadd_[modality or annotation] functions.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>meta_data : RecordingMetaData\n    Some of the contents of the meta data are avaible as properties.\nexcluded : bool, optional\n    _description_, by default False\ntextgrid_path : Union[str, Path], optional\n    _description_, by default \"\"</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">meta_data</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">RecordingMetaData</span>,</span><span class=\"param\">\t<span class=\"n\">excluded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">textgrid_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "satkit.data_structures.Recording.excluded", "modulename": "satkit.data_structures", "qualname": "Recording.excluded", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Recording.meta_data", "modulename": "satkit.data_structures", "qualname": "Recording.meta_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Recording.textgrid", "modulename": "satkit.data_structures", "qualname": "Recording.textgrid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Recording.satgrid", "modulename": "satkit.data_structures", "qualname": "Recording.satgrid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Recording.modalities", "modulename": "satkit.data_structures", "qualname": "Recording.modalities", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Recording.annotations", "modulename": "satkit.data_structures", "qualname": "Recording.annotations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Recording.path", "modulename": "satkit.data_structures", "qualname": "Recording.path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "satkit.data_structures.Recording.basename", "modulename": "satkit.data_structures", "qualname": "Recording.basename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.data_structures.Recording.exclude", "modulename": "satkit.data_structures", "qualname": "Recording.exclude", "kind": "function", "doc": "<p>Set self.excluded to True with a method.</p>\n\n<p>This method exists to facilitate list comprehensions being used\nfor excluding recordings e.g. \n[recording.exclude() for recording in recordings if in some_list].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_structures.Recording.write_textgrid", "modulename": "satkit.data_structures", "qualname": "Recording.write_textgrid", "kind": "function", "doc": "<p>Save this recording's textgrid to file.</p>\n\n<p>Keyword argument:\nfilepath -- string specifying the path and name of the \n    file to be written. If filepath is not specified, this \n    method will try to overwrite the textgrid speficied in \n    self.meta.</p>\n\n<pre><code>If filepath is specified, subsequent calls to this \nfunction will write into the new path rather than \nthe original one.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_structures.Recording.add_modality", "modulename": "satkit.data_structures", "qualname": "Recording.add_modality", "kind": "function", "doc": "<p>This method adds a new Modality object to the Recording.</p>\n\n<p>Replacing a modality has to be specified otherwise if a\nModality with the same name already exists in this Recording\nand the replace argument is not True, an Error is raised. </p>\n\n<p>Arguments:\nmodality -- object of type Modality to be added to \n    this Recording.</p>\n\n<p>Keyword arguments:\nreplace -- a boolean indicating if an existing Modality should\n    be replaced.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">replace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_structures.Modality", "modulename": "satkit.data_structures", "qualname": "Modality", "kind": "class", "doc": "<p>Abstract superclass for all data Modality classes.</p>\n", "bases": "abc.ABC"}, {"fullname": "satkit.data_structures.Modality.__init__", "modulename": "satkit.data_structures", "qualname": "Modality.__init__", "kind": "function", "doc": "<p>Modality constructor.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.</p>\n\n<p>Keyword arguments:\ndata_path -- path of the data file\nload_path -- path of data when saved by SATKIT - both data and metadata\nparent -- the Modality this one was derived from. None means this \n    is an underived data Modality.\nparsed_data -- ModalityData object containing waveform, sampling rate,\n    and either timevector and/or time_offset. \nparsed_data -- a ModalityData object containing parsed data \n    that's been either read from file, loaded from file \n    (previously saved by SATKIT), or calculated from another modality.\n    Providing a timevector \n    overrides any time_offset value given, but in absence of a \n    timevector the time_offset will be applied on reading the data \n    from file. \ntime_offset -- offset of this modality in relation to the Recordings\n    baseline - usually the audio track. This will be ignored if \n    parsed_data exists and effectively overridden by \n    parsed_data.timevector.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityMetaData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">load_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satkit.data_structures.Modality.recording", "modulename": "satkit.data_structures", "qualname": "Modality.recording", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Modality.data_path", "modulename": "satkit.data_structures", "qualname": "Modality.data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Modality.load_path", "modulename": "satkit.data_structures", "qualname": "Modality.load_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Modality.meta_data", "modulename": "satkit.data_structures", "qualname": "Modality.meta_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.data_structures.Modality.excluded", "modulename": "satkit.data_structures", "qualname": "Modality.excluded", "kind": "variable", "doc": "<p>Boolean property for excluding this Modality from processing.</p>\n\n<p>Setting this to True will result in the whole Recording being \nexcluded by setting self.parent.excluded = True.</p>\n", "annotation": ": None"}, {"fullname": "satkit.data_structures.Modality.name", "modulename": "satkit.data_structures", "qualname": "Modality.name", "kind": "variable", "doc": "<p>Identity and possible parent data class.</p>\n\n<p>This will be just the class name if this is a data Modality instance.\nFor derived Modalities the name will be of the form\n'[own class name] on [data modality class name]'.</p>\n\n<p>Subclasses may override this behaviour to, for example, include\nthe metric used to generate the instance in the name.</p>\n", "annotation": ": str"}, {"fullname": "satkit.data_structures.Modality.data", "modulename": "satkit.data_structures", "qualname": "Modality.data", "kind": "variable", "doc": "<p>Abstract property: a NumPy array. </p>\n\n<p>The data refers to the actual data this modality represents\nand for DerivedModality it is the result of running the \nmodality's algorithm on the original data.</p>\n\n<p>The dimensions of the array are in the \norder of [time, others]</p>\n\n<p>If this modality is not preloaded, accessing this property will\ncause data to be loaded on the fly _and_ saved in memory. To \nrelease the memory, assign None to this Modality's data.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "satkit.data_structures.Modality.get_meta", "modulename": "satkit.data_structures", "qualname": "Modality.get_meta", "kind": "function", "doc": "<p>Return this Modality's metadata as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.data_structures.Modality.sampling_rate", "modulename": "satkit.data_structures", "qualname": "Modality.sampling_rate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "satkit.data_structures.Modality.parent_name", "modulename": "satkit.data_structures", "qualname": "Modality.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.data_structures.Modality.time_offset", "modulename": "satkit.data_structures", "qualname": "Modality.time_offset", "kind": "variable", "doc": "<p>The time offset of this modality.</p>\n\n<p>Assigning a value to this property is implemented so \nthat self._timevector[0] stays equal to self._timeOffset. </p>\n\n<p>If shape of the timevector were to change then also shape of the data should\nchange. Unlikely that we'd try to deal that in any other way but\nto create a new Modality or even Recording.</p>\n"}, {"fullname": "satkit.data_structures.Modality.timevector", "modulename": "satkit.data_structures", "qualname": "Modality.timevector", "kind": "variable", "doc": "<p>The timevector corresponding to self.data as a NumPy array. </p>\n\n<p>If the data has not been previously loaded, accessing this \nproperty will cause data to be loaded on the fly _and_ saved \nin memory. To release the memory, assign None to this \nModality's data. If the data has been previously \nloaded and after that released, the timevector still persists and <br />\naccessing it does not trigger a new loading operation.</p>\n\n<p>Assigning a value to this property is implemented so \nthat self._timevector[0] stays equal to self._timeOffset.</p>\n"}, {"fullname": "satkit.data_structures.Modality.is_derived_modality", "modulename": "satkit.data_structures", "qualname": "Modality.is_derived_modality", "kind": "variable", "doc": "<p>Boolean property telling if this Modality is a result of processing another.</p>\n\n<p>This cannot be set from the outside.</p>\n", "annotation": ": bool"}, {"fullname": "satkit.data_structures.Modality.meta_path", "modulename": "satkit.data_structures", "qualname": "Modality.meta_path", "kind": "variable", "doc": "<p>Path to meta data file if any, None otherwise.</p>\n\n<p>Only external data might have per Modality meta files before being first\nsaved by SATKIT.</p>\n", "annotation": ": pathlib.Path"}, {"fullname": "satkit.errors", "modulename": "satkit.errors", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.errors.SatkitError", "modulename": "satkit.errors", "qualname": "SatkitError", "kind": "class", "doc": "<p>Base class of SATKIT Errors.</p>\n", "bases": "builtins.Exception"}, {"fullname": "satkit.errors.MissingDataError", "modulename": "satkit.errors", "qualname": "MissingDataError", "kind": "class", "doc": "<p>Data requested from Modality but is unavailable.</p>\n\n<p>This Error signifies that a Modality was created without providing either a\npath to files to load or an algorithm for deriving the Modality from another\nModality.</p>\n", "bases": "SatkitError"}, {"fullname": "satkit.errors.ModalityError", "modulename": "satkit.errors", "qualname": "ModalityError", "kind": "class", "doc": "<p>Modality already exists in Recording.</p>\n", "bases": "SatkitError"}, {"fullname": "satkit.errors.OverWriteError", "modulename": "satkit.errors", "qualname": "OverWriteError", "kind": "class", "doc": "<p>Trying to replace the data or timevector in a Modality with non-matching dtype, size, or shape.</p>\n", "bases": "SatkitError"}, {"fullname": "satkit.errors.UnrecognisedNormError", "modulename": "satkit.errors", "qualname": "UnrecognisedNormError", "kind": "class", "doc": "<p>Did not have an implementation for requested norm.</p>\n", "bases": "SatkitError"}, {"fullname": "satkit.errors.UltrasoundInterpolationError", "modulename": "satkit.errors", "qualname": "UltrasoundInterpolationError", "kind": "class", "doc": "<p>Interpolatated ultrasound image could not be produced.</p>\n", "bases": "SatkitError"}, {"fullname": "satkit.import_formats", "modulename": "satkit.import_formats", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.import_formats.avi_read", "modulename": "satkit.import_formats.avi_read", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.import_formats.avi_read.read_avi", "modulename": "satkit.import_formats.avi_read", "qualname": "read_avi", "kind": "function", "doc": "<p>Read wavfile from path.</p>\n\n<p>Positional arguments:\npath -- Path of the wav file\nmeta -- a dict containing the following keys:\n    NumVectors -- number of scanlines in the data\n    PixPerVector -- number of pixels on a scanline</p>\n\n<p>Keyword argument:\ndetect_beep -- Should 1kHz beep detection be run. Changes return values (see below).</p>\n\n<p>Returns a ModalityData instance that contains the wav frames, a timevector, and\nthe sampling rate. </p>\n\n<p>Also adds the 'no_frames', 'width', and 'height' keys and values to the meta dict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.import_formats.dicom_ultra_read", "modulename": "satkit.import_formats.dicom_ultra_read", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.import_formats.dicom_ultra_read.read_3d_ultrasound_dicom", "modulename": "satkit.import_formats.dicom_ultra_read", "qualname": "read_3d_ultrasound_dicom", "kind": "function", "doc": "<p>Read 3D ultrasound dicom from path.</p>\n\n<p>Positional arguments:\npath -- Path of the wav file\nmeta -- a dict containing the following keys:\n    NumVectors -- number of scanlines in the data\n    PixPerVector -- number of pixels on a scanline</p>\n\n<p>Returns a ModalityData instance that contains the wav frames, \na timevector, and the sampling rate. </p>\n\n<p>Also adds the 'no_frames' key and value to the meta dict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.import_formats.rasl_dat_to_wav", "modulename": "satkit.import_formats.rasl_dat_to_wav", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.import_formats.rasl_dat_to_wav.dat_to_wav", "modulename": "satkit.import_formats.rasl_dat_to_wav", "qualname": "dat_to_wav", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datpath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">wavpath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.import_formats.ult_read", "modulename": "satkit.import_formats.ult_read", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.import_formats.ult_read.read_ult", "modulename": "satkit.import_formats.ult_read", "qualname": "read_ult", "kind": "function", "doc": "<p>Read raw ultrasound from path.</p>\n\n<p>Positional arguments:\npath -- Path of the ultrasound file\nmeta -- a dict containing the following keys:\n    NumVectors -- number of scanlines in the data\n    PixPerVector -- number of pixels on a scanline</p>\n\n<p>Returns a ModalityData instance that contains the ultrasound frames, \na timevector, and the sampling rate. </p>\n\n<p>Also adds the 'no_frames' key and value to the meta dict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.import_formats.wav_read", "modulename": "satkit.import_formats.wav_read", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.import_formats.wav_read.read_wav", "modulename": "satkit.import_formats.wav_read", "qualname": "read_wav", "kind": "function", "doc": "<p>Read wavfile from path.</p>\n\n<p>Positional argument:\npath -- Path of the wav file</p>\n\n<p>Keyword argument:\ndetect_beep -- Should 1kHz beep detection be run. Changes return values (see below).</p>\n\n<p>Returns a ModalityData instance that contains the wav frames, a timevector, and\nthe sampling rate. </p>\n\n<p>Also returns the time of a 1kHz go-signal and a guess about if the file contains \nspeech if detect_beep = True.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">detect_beep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.interpolate_raw_uti", "modulename": "satkit.interpolate_raw_uti", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.interpolate_raw_uti.to_fan", "modulename": "satkit.interpolate_raw_uti", "qualname": "to_fan", "kind": "function", "doc": "<p>Generate interpolated images from scanline ultrasound data.</p>\n\n<p>Positional argument:\nscanline_data - numpy array containing each frame as a vector,\n    but in case of RGB data, each color as its own vector.</p>\n\n<p>Keyword arguments:\nangle - angle between scanlines in radians\nzero_offset - distance between probe center and first pixel of a scanline\npix_per_mm - pixels per mm in the depth direction of a scanline\nnum_vectors - number of scanlines per frame</p>\n\n<p>Returns a numpy array containing the generated image(s).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">scanline_data</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zero_offset</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pix_per_mm</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_vectors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">magnify</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">reserve</span><span class=\"o\">=</span><span class=\"mi\">1800</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.interpolate_raw_uti.to_fan_2d", "modulename": "satkit.interpolate_raw_uti", "qualname": "to_fan_2d", "kind": "function", "doc": "<p>Transform a raw ultrasound image to a fanshaped image.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">zero_offset</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pix_per_mm</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_vectors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">magnify</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">reserve</span><span class=\"o\">=</span><span class=\"mi\">1800</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.interpolate_raw_uti.ult_cart2pol", "modulename": "satkit.interpolate_raw_uti", "qualname": "ult_cart2pol", "kind": "function", "doc": "<p>Transform an ultrasound image from cartesian to polar coordinates.</p>\n\n<p>More specifically map a raw image onto a scanline fan and interpolate the\nresult for viewing by humans.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_coordinates</span>,</span><span class=\"param\">\t<span class=\"n\">origin</span>,</span><span class=\"param\">\t<span class=\"n\">num_of_vectors</span>,</span><span class=\"param\">\t<span class=\"n\">angle</span>,</span><span class=\"param\">\t<span class=\"n\">zero_offset</span>,</span><span class=\"param\">\t<span class=\"n\">pix_per_mm</span>,</span><span class=\"param\">\t<span class=\"n\">grayscale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.interpolate_raw_uti.trim_picture", "modulename": "satkit.interpolate_raw_uti", "qualname": "trim_picture", "kind": "function", "doc": "<p>TODO: docstring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.logging_helpers", "modulename": "satkit.logging_helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.logging_helpers.start_time", "modulename": "satkit.logging_helpers", "qualname": "start_time", "kind": "variable", "doc": "<p></p>\n", "default_value": "1695765028.737168"}, {"fullname": "satkit.logging_helpers.last_log_time", "modulename": "satkit.logging_helpers", "qualname": "last_log_time", "kind": "variable", "doc": "<p></p>\n", "default_value": "1695765028.7371686"}, {"fullname": "satkit.logging_helpers.set_logging_level", "modulename": "satkit.logging_helpers", "qualname": "set_logging_level", "kind": "function", "doc": "<p>Set up logging with the logging module.</p>\n\n<p>Main thing to do is set the level of printed output based on the\nverbosity argument.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">verbosity</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.logging_helpers.log_elapsed_time", "modulename": "satkit.logging_helpers", "qualname": "log_elapsed_time", "kind": "function", "doc": "<p>Log the time elapsed since logging began.</p>\n\n<p>Also logs the time since the last call to this function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics", "modulename": "satkit.metrics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.metrics.metrics", "modulename": "satkit.metrics", "qualname": "metrics", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;PD&#x27;: (&lt;class &#x27;satkit.metrics.pd.PD&#x27;&gt;, &lt;class &#x27;satkit.metrics.pd.PdParameters&#x27;&gt;)}"}, {"fullname": "satkit.metrics.annd", "modulename": "satkit.metrics.annd", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.metrics.annd.annd", "modulename": "satkit.metrics.annd", "qualname": "annd", "kind": "function", "doc": "<p>Calculate Average Nearest Neighbour Distance (ANND) curve for the recording. </p>\n\n<p>Returns a dictionary containing ANND as a function of time,\na time vector spanning the splined part of the ultrasound recording.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">token</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.ofreg", "modulename": "satkit.metrics.ofreg", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.metrics.ofreg.ofreg_logger", "modulename": "satkit.metrics.ofreg", "qualname": "ofreg_logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger satkit.ofreg (DEBUG)&gt;"}, {"fullname": "satkit.metrics.ofreg.parallel_register", "modulename": "satkit.metrics.ofreg", "qualname": "parallel_register", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ns</span>, </span><span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">num_frames</span>, </span><span class=\"param\"><span class=\"n\">storage</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.ofreg.of", "modulename": "satkit.metrics.ofreg", "qualname": "of", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.pd", "modulename": "satkit.metrics.pd", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.metrics.pd.ImageMask", "modulename": "satkit.metrics.pd", "qualname": "ImageMask", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "satkit.metrics.pd.ImageMask.top", "modulename": "satkit.metrics.pd", "qualname": "ImageMask.top", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImageMask.top: &#x27;top&#x27;&gt;"}, {"fullname": "satkit.metrics.pd.ImageMask.bottom", "modulename": "satkit.metrics.pd", "qualname": "ImageMask.bottom", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImageMask.bottom: &#x27;bottom&#x27;&gt;"}, {"fullname": "satkit.metrics.pd.ImageMask.whole", "modulename": "satkit.metrics.pd", "qualname": "ImageMask.whole", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ImageMask.whole: &#x27;whole&#x27;&gt;"}, {"fullname": "satkit.metrics.pd.calculate_timevector", "modulename": "satkit.metrics.pd", "qualname": "calculate_timevector", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">original_timevector</span>, </span><span class=\"param\"><span class=\"n\">timestep</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.pd.calculate_metric", "modulename": "satkit.metrics.pd", "qualname": "calculate_metric", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">abs_diff</span>,</span><span class=\"param\">\t<span class=\"n\">norm</span>,</span><span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">ImageMask</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interpolated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.pd.calculate_slwpd", "modulename": "satkit.metrics.pd", "qualname": "calculate_slwpd", "kind": "function", "doc": "<p>_summary_</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>raw_diff : _type_\n    _description_</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>_type_\n    _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_diff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.pd.calculate_pd", "modulename": "satkit.metrics.pd", "qualname": "calculate_pd", "kind": "function", "doc": "<p>Calculate Pixel Difference (PD) on the data Modality parent.       </p>\n\n<p>If self._timesteps is a vector of positive integers, then calculate\npd for each of those.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent_modality</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">norms</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;l1&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timesteps</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">pd_on_interpolated_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mask_images</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PD</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.pd.add_pd", "modulename": "satkit.metrics.pd", "qualname": "add_pd", "kind": "function", "doc": "<p>Calculate PD on dataModality and add it to recording.</p>\n\n<p>Positional arguments:\nrecording -- a Recording object\nmodality -- the type of the Modality to be processed. The access will \n    be by recording.modalities[modality.__name__]</p>\n\n<p>Keyword arguments:\npreload -- boolean indicating if PD should be calculated on creation \n    (preloaded) or only on access.\nreleaseDataMemor -- boolean indicatin if the data attribute of the \n    data modality should be set to None after access. Only set this \n    to False, if you know that you have enough memory to hold all \n    of the data in RAM.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">norms</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;l2&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timesteps</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">release_data_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">pd_on_interpolated_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mask_images</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.pd.PdParameters", "modulename": "satkit.metrics.pd", "qualname": "PdParameters", "kind": "class", "doc": "<p>Parameters used in generating the parent PD modality.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>metric : str\n    A string specifying this Modality's metric. Defaults to the l1 norm.\ntimestep : int \n    A  positive integer used as the timestep in calculating this Modality's\n    data. Defaults to 1, which means comparison of consequetive frames.\nrelease_data_memory : bool\n    Wether to assing None to parent.data after deriving this Modality from\n    the data. Currently has no effect as deriving PD at runtime is not yet\n    supported.\ninterpolated : bool\n    Should this PD be calculated on interpolated images. Defaults to False\n    for calculating PD on raw data. This one really can only be used on 2D\n    ultrasound data. For other data raw data is the regular data.\nimage_mask : ImageMask\n    Should this PD be calculated on a masked image. Defaults to None to\n    calculate PD on the whole image.</p>\n", "bases": "satkit.data_structures.ModalityMetaData"}, {"fullname": "satkit.metrics.pd.PdParameters.metric", "modulename": "satkit.metrics.pd", "qualname": "PdParameters.metric", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.metrics.pd.PdParameters.timestep", "modulename": "satkit.metrics.pd", "qualname": "PdParameters.timestep", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "satkit.metrics.pd.PdParameters.interpolated", "modulename": "satkit.metrics.pd", "qualname": "PdParameters.interpolated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "satkit.metrics.pd.PdParameters.release_data_memory", "modulename": "satkit.metrics.pd", "qualname": "PdParameters.release_data_memory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "satkit.metrics.pd.PdParameters.image_mask", "modulename": "satkit.metrics.pd", "qualname": "PdParameters.image_mask", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[satkit.metrics.pd.ImageMask]"}, {"fullname": "satkit.metrics.pd.PdParameters.parent_name", "modulename": "satkit.metrics.pd", "qualname": "PdParameters.parent_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.metrics.pd.PdParameters.model_config", "modulename": "satkit.metrics.pd", "qualname": "PdParameters.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.metrics.pd.PdParameters.model_fields", "modulename": "satkit.metrics.pd", "qualname": "PdParameters.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;parent_name&#x27;: FieldInfo(annotation=str, required=True), &#x27;metric&#x27;: FieldInfo(annotation=str, required=False, default=&#x27;l1&#x27;), &#x27;timestep&#x27;: FieldInfo(annotation=int, required=False, default=1), &#x27;interpolated&#x27;: FieldInfo(annotation=bool, required=False, default=False), &#x27;release_data_memory&#x27;: FieldInfo(annotation=bool, required=False, default=True), &#x27;image_mask&#x27;: FieldInfo(annotation=Union[ImageMask, NoneType], required=False)}"}, {"fullname": "satkit.metrics.pd.PD", "modulename": "satkit.metrics.pd", "qualname": "PD", "kind": "class", "doc": "<p>Represent Pixel Difference (PD) as a Modality.</p>\n", "bases": "satkit.data_structures.Modality"}, {"fullname": "satkit.metrics.pd.PD.__init__", "modulename": "satkit.metrics.pd", "qualname": "PD.__init__", "kind": "function", "doc": "<p>Build a Pixel Difference (PD) Modality       </p>\n\n<p>Positional arguments:\nrecording -- the containing Recording. <br />\nparemeters : PdParameters\n    Parameters used in calculating this instance of PD.\nKeyword arguments:\nload_path -- path of the saved data - both ultrasound and metadata\nparent -- the Modality this one was derived from. None means this \n    is an underived data Modality.\n    If parent is None, it will be copied from dataModality.\nparsed_data -- ModalityData object containing raw ultrasound, sampling rate,\n    and either timevector and/or time_offset. Providing a timevector \n    overrides any time_offset value given, but in absence of a \n    timevector the time_offset will be applied on reading the data \n    from file. \ntimeoffset -- timeoffset in seconds against the Recordings baseline.\n    If not specified or 0, timeOffset will be copied from dataModality.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PdParameters</span>,</span><span class=\"param\">\t<span class=\"n\">load_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satkit.metrics.pd.PD.accepted_metrics", "modulename": "satkit.metrics.pd", "qualname": "PD.accepted_metrics", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;l3&#x27;, &#x27;l4&#x27;, &#x27;l5&#x27;, &#x27;l6&#x27;, &#x27;l7&#x27;, &#x27;l8&#x27;, &#x27;l9&#x27;, &#x27;l10&#x27;, &#x27;inf&#x27;]"}, {"fullname": "satkit.metrics.pd.PD.meta_data", "modulename": "satkit.metrics.pd", "qualname": "PD.meta_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.metrics.pd.PD.get_meta", "modulename": "satkit.metrics.pd", "qualname": "PD.get_meta", "kind": "function", "doc": "<p>Return this Modality's metadata as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.pd.PD.name", "modulename": "satkit.metrics.pd", "qualname": "PD.name", "kind": "variable", "doc": "<p>Identity, metric, and parent data class.</p>\n\n<p>The name will be of the form\n'PD [metric name] on [data modality class name]'.</p>\n\n<p>This overrides the default behaviour of Modality.name.</p>\n", "annotation": ": str"}, {"fullname": "satkit.metrics.peaks", "modulename": "satkit.metrics.peaks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.metrics.peaks.Normalisation", "modulename": "satkit.metrics.peaks", "qualname": "Normalisation", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "satkit.metrics.peaks.Normalisation.none", "modulename": "satkit.metrics.peaks", "qualname": "Normalisation.none", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Normalisation.none: &#x27;NONE&#x27;&gt;"}, {"fullname": "satkit.metrics.peaks.Normalisation.peak", "modulename": "satkit.metrics.peaks", "qualname": "Normalisation.peak", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Normalisation.peak: &#x27;PEAK&#x27;&gt;"}, {"fullname": "satkit.metrics.peaks.Normalisation.bottom", "modulename": "satkit.metrics.peaks", "qualname": "Normalisation.bottom", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Normalisation.bottom: &#x27;BOTTOM&#x27;&gt;"}, {"fullname": "satkit.metrics.peaks.Normalisation.both", "modulename": "satkit.metrics.peaks", "qualname": "Normalisation.both", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Normalisation.both: &#x27;PEAK AND BOTTOM&#x27;&gt;"}, {"fullname": "satkit.metrics.peaks.PeakData", "modulename": "satkit.metrics.peaks", "qualname": "PeakData", "kind": "class", "doc": "<p>Peaks, their times, and properties as returned by scipy's find_peaks.</p>\n"}, {"fullname": "satkit.metrics.peaks.PeakData.__init__", "modulename": "satkit.metrics.peaks", "qualname": "PeakData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">peaks</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">peak_times</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "satkit.metrics.peaks.PeakData.peaks", "modulename": "satkit.metrics.peaks", "qualname": "PeakData.peaks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "satkit.metrics.peaks.PeakData.peak_times", "modulename": "satkit.metrics.peaks", "qualname": "PeakData.peak_times", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "satkit.metrics.peaks.PeakData.properties", "modulename": "satkit.metrics.peaks", "qualname": "PeakData.properties", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "satkit.metrics.peaks.time_series_peaks", "modulename": "satkit.metrics.peaks", "qualname": "time_series_peaks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_lim</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">normalise</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">peaks</span><span class=\"o\">.</span><span class=\"n\">Normalisation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NONE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_ignored_frames</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">prominence</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.peaks.save_peaks", "modulename": "satkit.metrics.peaks", "qualname": "save_peaks", "kind": "function", "doc": "<p>Save peak data to .csv files.</p>\n\n<p>Save both numbers/recording for each recording and the peak times themselves\ndo this for unthresholded and thresholded peaks.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.peaks.get_nearest_neighbours", "modulename": "satkit.metrics.peaks", "qualname": "get_nearest_neighbours", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">array2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.peaks.plot_peak_ns", "modulename": "satkit.metrics.peaks", "qualname": "plot_peak_ns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unthresholded_peak_ns</span>, </span><span class=\"param\"><span class=\"n\">thresholded_peak_ns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.metrics.peaks.plot_peak_comparison", "modulename": "satkit.metrics.peaks", "qualname": "plot_peak_comparison", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">whole_to_bottom</span>,</span><span class=\"param\">\t<span class=\"n\">bottom_to_whole</span>,</span><span class=\"param\">\t<span class=\"n\">whole_to_bottom_thresholded</span>,</span><span class=\"param\">\t<span class=\"n\">bottom_to_whole_thresholded</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.modalities", "modulename": "satkit.modalities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.modalities.modalities", "modulename": "satkit.modalities.modalities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.modalities.modalities.MonoAudio", "modulename": "satkit.modalities.modalities", "qualname": "MonoAudio", "kind": "class", "doc": "<p>A mono audio track. </p>\n\n<p>Audio data is assumed to be small enough for the\nwhole session to fit in working memory and therefore\nthis Modality preloads data at construction time.</p>\n", "bases": "satkit.data_structures.Modality"}, {"fullname": "satkit.modalities.modalities.MonoAudio.__init__", "modulename": "satkit.modalities.modalities", "qualname": "MonoAudio.__init__", "kind": "function", "doc": "<p>Create a MonoAudio track.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.        </p>\n\n<p>Keyword arguments:\ndata_path -- path of the wav file\nload_path -- path of the saved data - both wav and metadata\nparent -- the Modality this one was derived from. None means this \n    is an underived data Modality.\nparsed_data -- ModalityData object containing waveform, sampling rate,\n    and either timevector and/or time_offset. Providing a timevector \n    overrides any time_offset value given, but in absence of a \n    timevector the time_offset will be applied on reading the data \n    from file. \ngo_signal -- time of the go_signal in seconds from start of recording.\nhas_speech -- True if the heuristic algorithm thinks there is speech \n    audio in the sample.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">load_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">go_signal</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">has_speech</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satkit.modalities.modalities.MonoAudio.go_signal", "modulename": "satkit.modalities.modalities", "qualname": "MonoAudio.go_signal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.modalities.modalities.MonoAudio.has_speech", "modulename": "satkit.modalities.modalities", "qualname": "MonoAudio.has_speech", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.modalities.modalities.MonoAudio.get_meta", "modulename": "satkit.modalities.modalities", "qualname": "MonoAudio.get_meta", "kind": "function", "doc": "<p>Return this Modality's metadata as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.modalities.modalities.RawUltrasound", "modulename": "satkit.modalities.modalities", "qualname": "RawUltrasound", "kind": "class", "doc": "<p>Ultrasound Recording with raw (probe return) data.</p>\n", "bases": "satkit.data_structures.Modality"}, {"fullname": "satkit.modalities.modalities.RawUltrasound.__init__", "modulename": "satkit.modalities.modalities", "qualname": "RawUltrasound.__init__", "kind": "function", "doc": "<p>Create a RawUltrasound Modality.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.        </p>\n\n<p>Keyword arguments:\ndata_path -- path of the ultrasound file\nload_path -- path of the saved data - both ultrasound and metadata\nparsed_data -- ModalityData object containing raw ultrasound, sampling rate,\n    and either timevector and/or time_offset. Providing a timevector \n    overrides any time_offset value given, but in absence of a \n    timevector the time_offset will be applied on reading the data \n    from file. \nmeta -- a dict with (at least) the keys listed in \n    RawUltrasound.requiredMetaKeys. Extra keys will be ignored. \n    Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">load_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satkit.modalities.modalities.RawUltrasound.requiredMetaKeys", "modulename": "satkit.modalities.modalities", "qualname": "RawUltrasound.requiredMetaKeys", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;meta_file&#x27;, &#x27;Angle&#x27;, &#x27;FramesPerSec&#x27;, &#x27;NumVectors&#x27;, &#x27;PixPerVector&#x27;, &#x27;PixelsPerMm&#x27;, &#x27;ZeroOffset&#x27;]"}, {"fullname": "satkit.modalities.modalities.RawUltrasound.video_has_been_stored", "modulename": "satkit.modalities.modalities", "qualname": "RawUltrasound.video_has_been_stored", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.modalities.modalities.RawUltrasound.get_meta", "modulename": "satkit.modalities.modalities", "qualname": "RawUltrasound.get_meta", "kind": "function", "doc": "<p>Return this Modality's metadata as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.modalities.modalities.RawUltrasound.data", "modulename": "satkit.modalities.modalities", "qualname": "RawUltrasound.data", "kind": "variable", "doc": "<p>Abstract property: a NumPy array. </p>\n\n<p>The data refers to the actual data this modality represents\nand for DerivedModality it is the result of running the \nmodality's algorithm on the original data.</p>\n\n<p>The dimensions of the array are in the \norder of [time, others]</p>\n\n<p>If this modality is not preloaded, accessing this property will\ncause data to be loaded on the fly _and_ saved in memory. To \nrelease the memory, assign None to this Modality's data.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "satkit.modalities.modalities.RawUltrasound.interpolated_image", "modulename": "satkit.modalities.modalities", "qualname": "RawUltrasound.interpolated_image", "kind": "function", "doc": "<p>Return an interpolated version of the ultrasound frame at index.</p>\n\n<p>A new interpolated image is calculated, if necessary. To avoid large memory overheads\nonly the current frame's interpolated version maybe stored in memory.</p>\n\n<p>Arguments:\nindex - the index of the ultrasound frame to be returned</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.modalities.modalities.RawUltrasound.interpolated_frames", "modulename": "satkit.modalities.modalities", "qualname": "RawUltrasound.interpolated_frames", "kind": "function", "doc": "<p>Return an interpolated version of the ultrasound frame at index.</p>\n\n<p>A new interpolated image is calculated, if necessary. To avoid large memory overheads\nonly the current frame's interpolated version maybe stored in memory.</p>\n\n<p>Arguments:\nindex - the index of the ultrasound frame to be returned</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.modalities.modalities.Video", "modulename": "satkit.modalities.modalities", "qualname": "Video", "kind": "class", "doc": "<p>Video recording.</p>\n", "bases": "satkit.data_structures.Modality"}, {"fullname": "satkit.modalities.modalities.Video.__init__", "modulename": "satkit.modalities.modalities", "qualname": "Video.__init__", "kind": "function", "doc": "<p>Create a Video Modality.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.        </p>\n\n<p>Keyword arguments:\ndata_path -- path of the ultrasound file\nload_path -- path of the saved data - both ultrasound and metadata\nparent -- the Modality this one was derived from. Should be None \n    which means this is an underived data Modality.\nparsed_data -- ModalityData object containing raw ultrasound, sampling rate,\n    and either timevector and/or time_offset. Providing a timevector \n    overrides any time_offset value given, but in absence of a \n    timevector the time_offset will be applied on reading the data \n    from file. \nmeta -- a dict with (at least) the keys listed in \n    Video.requiredMetaKeys. Extra keys will be ignored. \n    Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">load_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satkit.modalities.modalities.Video.requiredMetaKeys", "modulename": "satkit.modalities.modalities", "qualname": "Video.requiredMetaKeys", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;FramesPerSec&#x27;]"}, {"fullname": "satkit.modalities.modalities.Video.get_meta", "modulename": "satkit.modalities.modalities", "qualname": "Video.get_meta", "kind": "function", "doc": "<p>Return this Modality's metadata as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.modalities.modalities.ThreeD_Ultrasound", "modulename": "satkit.modalities.modalities", "qualname": "ThreeD_Ultrasound", "kind": "class", "doc": "<p>Ultrasound Recording with interpolated 3D/4D data.</p>\n", "bases": "satkit.data_structures.Modality"}, {"fullname": "satkit.modalities.modalities.ThreeD_Ultrasound.__init__", "modulename": "satkit.modalities.modalities", "qualname": "ThreeD_Ultrasound.__init__", "kind": "function", "doc": "<p>Create a RawUltrasound Modality.</p>\n\n<p>Positional arguments:\nrecording -- the containing Recording.        </p>\n\n<p>Keyword arguments:\ndata_path -- path of the ultrasound file\nload_path -- path of the saved data - both ultrasound and metadata\nparsed_data -- ModalityData object containing raw ultrasound, sampling rate,\n    and either timevector and/or time_offset. Providing a timevector \n    overrides any time_offset value given, but in absence of a \n    timevector the time_offset will be applied on reading the data \n    from file. \nmeta -- a dict with (at least) the keys listed in \n    RawUltrasound.requiredMetaKeys. Extra keys will be ignored. \n    Default is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">load_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parsed_data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">ModalityData</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satkit.modalities.modalities.ThreeD_Ultrasound.requiredMetaKeys", "modulename": "satkit.modalities.modalities", "qualname": "ThreeD_Ultrasound.requiredMetaKeys", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;meta_file&#x27;, &#x27;Angle&#x27;, &#x27;FramesPerSec&#x27;, &#x27;NumVectors&#x27;, &#x27;PixPerVector&#x27;, &#x27;PixelsPerMm&#x27;, &#x27;ZeroOffset&#x27;]"}, {"fullname": "satkit.modalities.modalities.ThreeD_Ultrasound.data", "modulename": "satkit.modalities.modalities", "qualname": "ThreeD_Ultrasound.data", "kind": "variable", "doc": "<p>Abstract property: a NumPy array. </p>\n\n<p>The data refers to the actual data this modality represents\nand for DerivedModality it is the result of running the \nmodality's algorithm on the original data.</p>\n\n<p>The dimensions of the array are in the \norder of [time, others]</p>\n\n<p>If this modality is not preloaded, accessing this property will\ncause data to be loaded on the fly _and_ saved in memory. To \nrelease the memory, assign None to this Modality's data.</p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "satkit.modalities.modalities.ThreeD_Ultrasound.get_meta", "modulename": "satkit.modalities.modalities", "qualname": "ThreeD_Ultrasound.get_meta", "kind": "function", "doc": "<p>Return this Modality's metadata as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.plot", "modulename": "satkit.plot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.plot.plot", "modulename": "satkit.plot.plot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.plot.plot.Normalisation", "modulename": "satkit.plot.plot", "qualname": "Normalisation", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "satkit.plot.plot.Normalisation.none", "modulename": "satkit.plot.plot", "qualname": "Normalisation.none", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Normalisation.none: &#x27;NONE&#x27;&gt;"}, {"fullname": "satkit.plot.plot.Normalisation.peak", "modulename": "satkit.plot.plot", "qualname": "Normalisation.peak", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Normalisation.peak: &#x27;PEAK&#x27;&gt;"}, {"fullname": "satkit.plot.plot.Normalisation.bottom", "modulename": "satkit.plot.plot", "qualname": "Normalisation.bottom", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Normalisation.bottom: &#x27;BOTTOM&#x27;&gt;"}, {"fullname": "satkit.plot.plot.Normalisation.both", "modulename": "satkit.plot.plot", "qualname": "Normalisation.both", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Normalisation.both: &#x27;PEAK AND BOTTOM&#x27;&gt;"}, {"fullname": "satkit.plot.plot.plot_timeseries", "modulename": "satkit.plot.plot", "qualname": "plot_timeseries", "kind": "function", "doc": "<p>Plot a timeseries.</p>\n\n<p>The timeseries most likely comes from a Modality, but \nthat is left up to the caller. </p>\n\n<p>Arguments:\naxis -- matplotlib axes to plot on.\npd -- the timeseries - NOT the PD data object.\ntime -- timestamps for the timeseries.\nxlim -- limits for the x-axis in seconds.</p>\n\n<p>Keyword arguments:\npeak_normalise -- if True, scale the data maximum to equal 1.\npeak_normalisation_offset -- how many values to ignore from \n    the beginning of data when calculating maximum. \nylabel -- label for this axes. \npicker -- a picker tied to the plotted PD curve to facilitate\n    annotation.\ncolor -- matplotlib color for the line.\nlinestyle -- matplotlib linestyle.\nalpha -- alpha value for the line.</p>\n\n<p>Returns None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalise</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">Normalisation</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NONE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_ignored_frames</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;deepskyblue&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linestyle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">sampling_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">find_peaks</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.plot.plot.mark_gesture_peaks", "modulename": "satkit.plot.plot", "qualname": "mark_gesture_peaks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">axes</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">timevector</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.plot.plot.mark_gesture_boundaries", "modulename": "satkit.plot.plot", "qualname": "mark_gesture_boundaries", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">axes</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">timevector</span></span><span class=\"return-annotation\">) -> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.plot.plot.find_gesture_peaks", "modulename": "satkit.plot.plot", "qualname": "find_gesture_peaks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.plot.plot.plot_satgrid_tier", "modulename": "satkit.plot.plot", "qualname": "plot_satgrid_tier", "kind": "function", "doc": "<p>Plot a textgrid tier on the axis and return animator objects.</p>\n\n<p>This is used both for displaying tiers as part of the tier display \nand for decorating other plots with either just the boundary lines \nor both boundaries and the annotation text.</p>\n\n<p>Arguments:\nax -- matplotlib axes to plot on.\ntier -- TextGrid Tier represented as a SatTier.</p>\n\n<p>Keyword arguments:\nstimulus_onset -- onset time of the stimulus in the recording in\n    seconds. Default is 0s.\ndraw_text -- boolean value indicating if each segment's text should\n    be drawn on the plot. Default is True.\ndraggable --\ntext_y -- </p>\n\n<p>Returns a line object for the segment line, so that it\ncan be included in the legend.\nAlso returns a list of BoundaryAnimators that</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">tier</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">satgrid</span><span class=\"o\">.</span><span class=\"n\">SatTier</span>,</span><span class=\"param\">\t<span class=\"n\">time_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">draw_text</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">text_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">500</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">Line2D</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">boundary_animation</span><span class=\"o\">.</span><span class=\"n\">BoundaryAnimator</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.plot.plot.plot_wav", "modulename": "satkit.plot.plot", "qualname": "plot_wav", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">waveform</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">wav_time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.plot.plot.plot_spectrogram", "modulename": "satkit.plot.plot", "qualname": "plot_spectrogram", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">waveform</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sampling_frequency</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">xtent_on_x</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">NFFT</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">220</span>,</span><span class=\"param\">\t<span class=\"n\">noverlap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">215</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Greys&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Spectrogram&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.plot.plot.plot_density", "modulename": "satkit.plot.plot", "qualname": "plot_density", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">frequencies</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">x_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylim</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Densities)&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">picker</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator", "modulename": "satkit.qt_annotator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator", "kind": "class", "doc": "<p>Qt_Annotator_Window is a GUI class for annotating PD curves.</p>\n\n<p>The annotator works with PD curves and allows\nselection of a single points (labelled as pdOnset in the saved file).\nThe GUI also displays the waveform, and if TextGrids\nare provided, the acoustic segment boundaries.</p>\n", "bases": "PyQt5.QtWidgets.QMainWindow, builtins.Ui_MainWindow"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.__init__", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording_session</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">RecordingSession</span>,</span><span class=\"param\">\t<span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"n\">xlim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">categories</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pickle_filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.default_categories", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.default_categories", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;Stable&#x27;, &#x27;Hesitation&#x27;, &#x27;Chaos&#x27;, &#x27;No data&#x27;, &#x27;Not set&#x27;]"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.default_tongue_positions", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.default_tongue_positions", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;High&#x27;, &#x27;Low&#x27;, &#x27;Other / Not visible&#x27;]"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.recording_session", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.recording_session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.recordings", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.recordings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.index", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.max_index", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.max_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.commandlineargs", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.commandlineargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.display_tongue", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.display_tongue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.tongue_positions", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.tongue_positions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.pickle_filename", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.pickle_filename", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.close_window_shortcut", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.close_window_shortcut", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.export_figure_shortcut", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.export_figure_shortcut", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.figure", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.figure", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.canvas", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.data_axes", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.data_axes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.tier_axes", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.tier_axes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.shift_is_held", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.shift_is_held", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.xlim", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.xlim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.ylim", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.ylim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.main_grid_spec", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.main_grid_spec", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.data_grid_spec", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.data_grid_spec", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.ultra_fig", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.ultra_fig", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.ultra_canvas", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.ultra_canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.ultra_axes", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.ultra_axes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.multicursor", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.multicursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.current", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.current", "kind": "variable", "doc": "<p>Current recording index.</p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.default_annotations", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.default_annotations", "kind": "variable", "doc": "<p>List default annotations and their default values as a dict.</p>\n"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.clear_axes", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.clear_axes", "kind": "function", "doc": "<p>Clear data axes of this annotator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.update", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.update", "kind": "function", "doc": "<p>Updates the graphs but not the buttons.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.update_ui", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.update_ui", "kind": "function", "doc": "<p>Updates parts of the UI outwith the graphs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.draw_plots", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.draw_plots", "kind": "function", "doc": "<p>Updates title and graphs. Called by self.update().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.draw_ultra_frame", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.draw_ultra_frame", "kind": "function", "doc": "<p>Display an already interpolated ultrasound frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.draw_raw_ultra_frame", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.draw_raw_ultra_frame", "kind": "function", "doc": "<p>Interpolate and display a raw ultrasound frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.next", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.next", "kind": "function", "doc": "<p>Callback function for the Next button.\nIncreases cursor index, updates the view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.next_frame", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.next_frame", "kind": "function", "doc": "<p>Move the data cursor to the next frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.previous_frame", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.previous_frame", "kind": "function", "doc": "<p>Move the data cursor to the previous frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.prev", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.prev", "kind": "function", "doc": "<p>Callback function for the Previous button.\nDecreases cursor index, updates the view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.go_to_recording", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.go_to_recording", "kind": "function", "doc": "<p>Go to a recording specified in the goLineEdit text input field.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.quit", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.quit", "kind": "function", "doc": "<p>Quit the app.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.open", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.open", "kind": "function", "doc": "<p>Open either SATKIT saved data or import new data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.open_file", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.open_file", "kind": "function", "doc": "<p>Open either SATKIT saved data or import new data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.save_all", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.save_all", "kind": "function", "doc": "<p>Save derived modalities and annotations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.save_to_pickle", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.save_to_pickle", "kind": "function", "doc": "<p>Save the recordings into a pickle file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.save_textgrid", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.save_textgrid", "kind": "function", "doc": "<p>Save the recordings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.export_figure", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.export_figure", "kind": "function", "doc": "<p>Callback method to export the current figure in any supported format.</p>\n\n<p>Opens a filedialog to ask for the filename. Save format is determined by\nfile extension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.export", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.export", "kind": "function", "doc": "<p>Export annotations and some other meta data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.pd_category_cb", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.pd_category_cb", "kind": "function", "doc": "<p>Callback funtion for the RadioButton for catogorising\nthe PD curve.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.tongue_position_cb", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.tongue_position_cb", "kind": "function", "doc": "<p>Callback funtion for the RadioButton for catogorising\nthe PD curve.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.onpick", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.onpick", "kind": "function", "doc": "<p>Callback for handling time selection on events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.resizeEvent", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.resizeEvent", "kind": "function", "doc": "<p>Handle window being resized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.keyPressEvent", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.keyPressEvent", "kind": "function", "doc": "<p>keyPressEvent(self, QKeyEvent)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.qt_annotator.PdQtAnnotator.keyReleaseEvent", "modulename": "satkit.qt_annotator", "qualname": "PdQtAnnotator.keyReleaseEvent", "kind": "function", "doc": "<p>keyReleaseEvent(self, QKeyEvent)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.satgrid", "modulename": "satkit.satgrid", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.satgrid.SatInterval", "modulename": "satkit.satgrid", "qualname": "SatInterval", "kind": "class", "doc": "<p>TextGrid Interval representation to enable editing with GUI.</p>\n"}, {"fullname": "satkit.satgrid.SatInterval.__init__", "modulename": "satkit.satgrid", "qualname": "SatInterval.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">begin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">Transcript</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">prev</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">next</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satkit.satgrid.SatInterval.from_textgrid_interval", "modulename": "satkit.satgrid", "qualname": "SatInterval.from_textgrid_interval", "kind": "function", "doc": "<p>Copy the info of a Python TextGrids Interval into a new SatInterval.</p>\n\n<p>Only xmin and text are copied from the original Interval. xmax is\nassumed to be handled by either the next SatInterval or the constructing\nmethod if this is the last Interval. </p>\n\n<p>Since SatIntervals are doubly linked, an attempt will be made to link\nprev and next to this interval. </p>\n\n<p>Returns the newly created SatInterval.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">Interval</span>,</span><span class=\"param\">\t<span class=\"n\">prev</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"nb\">next</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.satgrid.SatInterval.begin", "modulename": "satkit.satgrid", "qualname": "SatInterval.begin", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.satgrid.SatInterval.text", "modulename": "satkit.satgrid", "qualname": "SatInterval.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.satgrid.SatInterval.prev", "modulename": "satkit.satgrid", "qualname": "SatInterval.prev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.satgrid.SatInterval.next", "modulename": "satkit.satgrid", "qualname": "SatInterval.next", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.satgrid.SatInterval.mid", "modulename": "satkit.satgrid", "qualname": "SatInterval.mid", "kind": "variable", "doc": "<p>Middle time point of the interval.</p>\n\n<p>This is a property that will return None\nif this Interval is the one that marks\nthe last boundary.</p>\n", "annotation": ": Optional[float]"}, {"fullname": "satkit.satgrid.SatInterval.is_legal_value", "modulename": "satkit.satgrid", "qualname": "SatInterval.is_legal_value", "kind": "function", "doc": "<p>Check if the given time is between the previous and next boundary.</p>\n\n<p>Usual caveats about float testing don't apply, because each boundary is\npadded with SATKIT epsilon. Tests used do not include equality with\neither bounding boundary, and that may or may not be trusted to be the\nactual case depending on how small the epsilon is.</p>\n\n<p>Returns True, if time is  between the previous and next boundary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.satgrid.SatInterval.is_at_time", "modulename": "satkit.satgrid", "qualname": "SatInterval.is_at_time", "kind": "function", "doc": "<p>Intervals are considered equivalent if the difference between their\nbegin values is &lt; epsilon. Epsilon is a constant defined in SATKIT's\nconfiguration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.satgrid.SatTier", "modulename": "satkit.satgrid", "qualname": "SatTier", "kind": "class", "doc": "<p>TextGrid Tier representation to enable editing with GUI.</p>\n", "bases": "builtins.list"}, {"fullname": "satkit.satgrid.SatTier.__init__", "modulename": "satkit.satgrid", "qualname": "SatTier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tier</span><span class=\"p\">:</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">Tier</span></span>)</span>"}, {"fullname": "satkit.satgrid.SatTier.from_textgrid_tier", "modulename": "satkit.satgrid", "qualname": "SatTier.from_textgrid_tier", "kind": "function", "doc": "<p>Copy a Python TextGrids Tier as a SatTier.</p>\n\n<p>Returns the newly created SatTier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">tier</span><span class=\"p\">:</span> <span class=\"n\">textgrids</span><span class=\"o\">.</span><span class=\"n\">Tier</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.satgrid.SatTier.begin", "modulename": "satkit.satgrid", "qualname": "SatTier.begin", "kind": "variable", "doc": "<p>Begin timestamp.</p>\n\n<p>Corresponds to a TextGrid Interval's xmin.</p>\n\n<p>This is a property and the actual value is generated from the first\nSatInterval of this SatTier.</p>\n", "annotation": ": float"}, {"fullname": "satkit.satgrid.SatTier.end", "modulename": "satkit.satgrid", "qualname": "SatTier.end", "kind": "variable", "doc": "<p>End timestamp.</p>\n\n<p>Corresponds to a TextGrid Interval's xmin.</p>\n\n<p>This is a property and the actual value is generated from the last\nSatInterval of this SatTier.</p>\n", "annotation": ": float"}, {"fullname": "satkit.satgrid.SatTier.is_point_tier", "modulename": "satkit.satgrid", "qualname": "SatTier.is_point_tier", "kind": "variable", "doc": "<p>Is this Tier a PointTier.</p>\n", "annotation": ": bool"}, {"fullname": "satkit.satgrid.SatTier.boundary_at_time", "modulename": "satkit.satgrid", "qualname": "SatTier.boundary_at_time", "kind": "function", "doc": "<p>If there is a boundary at time, return it.</p>\n\n<p>Returns None, if there is no boundary at time. </p>\n\n<p>'Being at time' is defined as being within SATKIT epsilon of the given\ntimestamp.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">satgrid</span><span class=\"o\">.</span><span class=\"n\">SatInterval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.satgrid.SatGrid", "modulename": "satkit.satgrid", "qualname": "SatGrid", "kind": "class", "doc": "<p>TextGrid representation which makes editing easier.</p>\n\n<p>SatGrid is a OrderedDict very similar to Python textgrids TextGrid, but made\nup of SatTiers that in turn contain intervals or points as doubly linked\nlists instead of just lists. See there relevant classes for more details.</p>\n", "bases": "collections.OrderedDict"}, {"fullname": "satkit.satgrid.SatGrid.as_textgrid", "modulename": "satkit.satgrid", "qualname": "SatGrid.as_textgrid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.satgrid.SatGrid.begin", "modulename": "satkit.satgrid", "qualname": "SatGrid.begin", "kind": "variable", "doc": "<p>Begin timestamp.</p>\n\n<p>Corresponds to a TextGrids xmin.</p>\n\n<p>This is a property and the actual value is generated from the first\nSatTier of this SatGrid.</p>\n", "annotation": ": float"}, {"fullname": "satkit.satgrid.SatGrid.end", "modulename": "satkit.satgrid", "qualname": "SatGrid.end", "kind": "variable", "doc": "<p>End timestamp.</p>\n\n<p>Corresponds to a TextGrids xmax.</p>\n\n<p>This is a property and the actual value is generated from the first\nSatTier of this SatGrid.</p>\n", "annotation": ": float"}, {"fullname": "satkit.satgrid.SatGrid.format_long", "modulename": "satkit.satgrid", "qualname": "SatGrid.format_long", "kind": "function", "doc": "<p>Format self as long format TextGrid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load", "modulename": "satkit.save_and_load", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.save_and_load.load", "modulename": "satkit.save_and_load.load", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.save_and_load.load.load_derived_modality", "modulename": "satkit.save_and_load.load", "qualname": "load_derived_modality", "kind": "function", "doc": "<p>Load a saved derived Modality meta and data and return them. </p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>path : Path\n    This is the path to the save files.\nmodality_schema : ModalityListingLoadschema\n    This contains the name of the meta and data files.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">modality_schema</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">save_and_load</span><span class=\"o\">.</span><span class=\"n\">save_and_load_helpers</span><span class=\"o\">.</span><span class=\"n\">ModalityListingLoadschema</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.load.read_recording_meta", "modulename": "satkit.save_and_load.load", "qualname": "read_recording_meta", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">save_and_load</span><span class=\"o\">.</span><span class=\"n\">save_and_load_helpers</span><span class=\"o\">.</span><span class=\"n\">RecordingLoadSchema</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.load.load_recording", "modulename": "satkit.save_and_load.load", "qualname": "load_recording", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.load.load_recordings_from_directory", "modulename": "satkit.save_and_load.load", "qualname": "load_recordings_from_directory", "kind": "function", "doc": "<p>Load Recordings from directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.load.load_recordings", "modulename": "satkit.save_and_load.load", "qualname": "load_recordings", "kind": "function", "doc": "<p>Load Recordings from directory.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span>,</span><span class=\"param\">\t<span class=\"n\">recording_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.load.load_recording_session", "modulename": "satkit.save_and_load.load", "qualname": "load_recording_session", "kind": "function", "doc": "<p>Load a recording session from a directory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>directory: Path\n    The directory path.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Session\n    The loaded RecordingSession object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">RecordingSession</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.save", "modulename": "satkit.save_and_load.save", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.save_and_load.save.save_modality_data", "modulename": "satkit.save_and_load.save", "qualname": "save_modality_data", "kind": "function", "doc": "<p>Save the data of a Modality.</p>\n\n<p>This saves only ModalityData.data and ModalityData.timevector.</p>\n\n<p>Returns the filename of the</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.save.save_modality_meta", "modulename": "satkit.save_and_load.save", "qualname": "save_modality_meta", "kind": "function", "doc": "<p>Save meta data and annotations for a Modality.</p>\n\n<p>Saved data includes sampling frequency and any processing metadata that is\nneeded to reconstruct the Modality.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.save.save_recording_meta", "modulename": "satkit.save_and_load.save", "qualname": "save_recording_meta", "kind": "function", "doc": "<p>Save Recording meta.</p>\n\n<p>The meta dict should contain at least a list of the modalities this recording\nhas and their saving locations.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span>,</span><span class=\"param\">\t<span class=\"n\">modalities_saves</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.save.save_modalities", "modulename": "satkit.save_and_load.save", "qualname": "save_modalities", "kind": "function", "doc": "<p>Save derived data Modalities for a single Recording.</p>\n\n<p>Returns a dictionary of the data and meta paths of the Modalities.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">recording</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.save.save_recordings", "modulename": "satkit.save_and_load.save", "qualname": "save_recordings", "kind": "function", "doc": "<p>Save derived data modalities for each Recording.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">save_excluded</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.save.save_recording_session_meta", "modulename": "satkit.save_and_load.save", "qualname": "save_recording_session_meta", "kind": "function", "doc": "<p>Save recording session metadata.</p>\n\n<p>The meta dict should contain at least a list of the recordings in this\nsession and their saving locations.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">RecordingSession</span>,</span><span class=\"param\">\t<span class=\"n\">recording_meta_files</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.save.save_recording_session", "modulename": "satkit.save_and_load.save", "qualname": "save_recording_session", "kind": "function", "doc": "<p>Save a recording session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">RecordingSession</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.save_and_load.save_and_load_helpers", "modulename": "satkit.save_and_load.save_and_load_helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.nested_text_converters", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "nested_text_converters", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;class &#x27;datetime.datetime&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib.PosixPath&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib.WindowsPath&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;: &lt;class &#x27;str&#x27;&gt;}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityLoadSchema", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved Modality.</p>\n\n<p>Modality is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityLoadSchema.object_type", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityLoadSchema.object_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityLoadSchema.name", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityLoadSchema.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityLoadSchema.format_version", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityLoadSchema.format_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityLoadSchema.parameters", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityLoadSchema.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityLoadSchema.model_config", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityLoadSchema.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityLoadSchema.model_fields", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityLoadSchema.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;object_type&#x27;: FieldInfo(annotation=str, required=True), &#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;format_version&#x27;: FieldInfo(annotation=str, required=True), &#x27;parameters&#x27;: FieldInfo(annotation=dict, required=True)}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityListingLoadschema", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityListingLoadschema", "kind": "class", "doc": "<p>Loading schema for the Modality listing in a saved Rercording.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityListingLoadschema.data_name", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityListingLoadschema.data_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityListingLoadschema.meta_name", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityListingLoadschema.meta_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityListingLoadschema.model_config", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityListingLoadschema.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.ModalityListingLoadschema.model_fields", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "ModalityListingLoadschema.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;data_name&#x27;: FieldInfo(annotation=str, required=True), &#x27;meta_name&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True)}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingLoadSchema", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved Recording.</p>\n\n<p>Recording is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingLoadSchema.object_type", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingLoadSchema.object_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": satkit.constants.SavedObjectTypes"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingLoadSchema.name", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingLoadSchema.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingLoadSchema.format_version", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingLoadSchema.format_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingLoadSchema.parameters", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingLoadSchema.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": satkit.data_structures.RecordingMetaData"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingLoadSchema.modalities", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingLoadSchema.modalities", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, satkit.save_and_load.save_and_load_helpers.ModalityListingLoadschema]"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingLoadSchema.model_config", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingLoadSchema.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingLoadSchema.model_fields", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingLoadSchema.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;object_type&#x27;: FieldInfo(annotation=SavedObjectTypes, required=False, default=&lt;SavedObjectTypes.RECORDING: &#x27;Recording&#x27;&gt;), &#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;format_version&#x27;: FieldInfo(annotation=str, required=True), &#x27;parameters&#x27;: FieldInfo(annotation=RecordingMetaData, required=True), &#x27;modalities&#x27;: FieldInfo(annotation=dict[str, ModalityListingLoadschema], required=True)}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionParameterLoadSchema", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionParameterLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved RecordingSession.</p>\n\n<p>RecordingSession is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionParameterLoadSchema.path", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionParameterLoadSchema.path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": typing.Annotated[pathlib.Path, PathType(path_type=&#x27;dir&#x27;)]"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionParameterLoadSchema.datasource", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionParameterLoadSchema.datasource", "kind": "variable", "doc": "<p></p>\n", "annotation": ": satkit.constants.Datasource"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionParameterLoadSchema.model_config", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionParameterLoadSchema.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionParameterLoadSchema.model_fields", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionParameterLoadSchema.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;path&#x27;: FieldInfo(annotation=Path, required=True, metadata=[PathType(path_type=&#x27;dir&#x27;)]), &#x27;datasource&#x27;: FieldInfo(annotation=Datasource, required=True)}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionLoadSchema", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionLoadSchema", "kind": "class", "doc": "<p>Loading schema for a saved RecordingSession.</p>\n\n<p>RecordingSession is defined in the data_structures module.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionLoadSchema.object_type", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionLoadSchema.object_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": satkit.constants.SavedObjectTypes"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionLoadSchema.name", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionLoadSchema.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionLoadSchema.format_version", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionLoadSchema.format_version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionLoadSchema.parameters", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionLoadSchema.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": satkit.save_and_load.save_and_load_helpers.RecordingSessionParameterLoadSchema"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionLoadSchema.recordings", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionLoadSchema.recordings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionLoadSchema.model_config", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionLoadSchema.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "satkit.save_and_load.save_and_load_helpers.RecordingSessionLoadSchema.model_fields", "modulename": "satkit.save_and_load.save_and_load_helpers", "qualname": "RecordingSessionLoadSchema.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;object_type&#x27;: FieldInfo(annotation=SavedObjectTypes, required=False, default=&lt;SavedObjectTypes.RECORDING_SESSION: &#x27;RecordingSession&#x27;&gt;), &#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;format_version&#x27;: FieldInfo(annotation=str, required=True), &#x27;parameters&#x27;: FieldInfo(annotation=RecordingSessionParameterLoadSchema, required=True), &#x27;recordings&#x27;: FieldInfo(annotation=list[str], required=True)}"}, {"fullname": "satkit.scripting_interface", "modulename": "satkit.scripting_interface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.scripting_interface.argument_parser", "modulename": "satkit.scripting_interface.argument_parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.scripting_interface.argument_parser.widen_help_formatter", "modulename": "satkit.scripting_interface.argument_parser", "qualname": "widen_help_formatter", "kind": "function", "doc": "<p>Return a wider HelpFormatter for argparse, if possible.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">formatter</span>, </span><span class=\"param\"><span class=\"n\">total_width</span><span class=\"o\">=</span><span class=\"mi\">140</span>, </span><span class=\"param\"><span class=\"n\">syntax_width</span><span class=\"o\">=</span><span class=\"mi\">35</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satkit.scripting_interface.argument_parser.SatkitArgumentParser", "modulename": "satkit.scripting_interface.argument_parser", "qualname": "SatkitArgumentParser", "kind": "class", "doc": "<p>This class is the root class for SATKIT commandline interfaces.</p>\n\n<p>This class is not fully functional by itself: It does not read files\nnor run any processing on files.</p>\n"}, {"fullname": "satkit.scripting_interface.argument_parser.SatkitArgumentParser.__init__", "modulename": "satkit.scripting_interface.argument_parser", "qualname": "SatkitArgumentParser.__init__", "kind": "function", "doc": "<p>Setup a commandline interface with the given description.</p>\n\n<p>Sets up the parsers and runs it, and also sets up logging.\nDescription is what this version will be called if called with -h or --help.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">description</span></span>)</span>"}, {"fullname": "satkit.scripting_interface.argument_parser.SatkitArgumentParser.description", "modulename": "satkit.scripting_interface.argument_parser", "qualname": "SatkitArgumentParser.description", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satkit.scripting_interface.data_loader", "modulename": "satkit.scripting_interface.data_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.scripting_interface.data_loader.logger", "modulename": "satkit.scripting_interface.data_loader", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger satkit.scripting (DEBUG)&gt;"}, {"fullname": "satkit.scripting_interface.data_loader.load_data", "modulename": "satkit.scripting_interface.data_loader", "qualname": "load_data", "kind": "function", "doc": "<p>Handle loading data from individual files or a previously saved session.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">exclusion_file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">RecordingSession</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.scripting_interface.data_loader.read_recording_session_from_dir", "modulename": "satkit.scripting_interface.data_loader", "qualname": "read_recording_session_from_dir", "kind": "function", "doc": "<p>Wrapper for reading data from a directory full of files.</p>\n\n<p>Having this as a separate method allows subclasses to change\narguments or even the parser.</p>\n\n<p>Note that to make data loading work in a consistent way,\nthis method just returns the data and saving it in an\ninstance variable is left for the caller to handle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">RecordingSession</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.scripting_interface.data_processor", "modulename": "satkit.scripting_interface.data_processor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.scripting_interface.data_processor.logger", "modulename": "satkit.scripting_interface.data_processor", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger satkit.scripting (DEBUG)&gt;"}, {"fullname": "satkit.scripting_interface.data_processor.Operation", "modulename": "satkit.scripting_interface.data_processor", "qualname": "Operation", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "satkit.scripting_interface.data_processor.Operation.__init__", "modulename": "satkit.scripting_interface.data_processor", "qualname": "Operation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">processing_function</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">modality</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Modality</span>,</span><span class=\"param\">\t<span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"n\">Dict</span></span>)</span>"}, {"fullname": "satkit.scripting_interface.data_processor.Operation.processing_function", "modulename": "satkit.scripting_interface.data_processor", "qualname": "Operation.processing_function", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable"}, {"fullname": "satkit.scripting_interface.data_processor.Operation.modality", "modulename": "satkit.scripting_interface.data_processor", "qualname": "Operation.modality", "kind": "variable", "doc": "<p></p>\n", "annotation": ": satkit.data_structures.Modality"}, {"fullname": "satkit.scripting_interface.data_processor.Operation.arguments", "modulename": "satkit.scripting_interface.data_processor", "qualname": "Operation.arguments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict"}, {"fullname": "satkit.scripting_interface.data_processor.process_data", "modulename": "satkit.scripting_interface.data_processor", "qualname": "process_data", "kind": "function", "doc": "<p>Apply processing functions to data.</p>\n\n<p>Arguments: \nrecordings is a list of Recordings to be processed. The results of applying\n    the functions get added to the Recordings as new Modalities.\nprocessing_functions is a dictionary containing three keys:\n    'function' is a callable used to process a Recording,\n    'modality' is the Modality passed to the function, and \n    'arguments' is a dict of arguments for the function.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">processing_functions</span><span class=\"p\">:</span> <span class=\"n\">Dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.scripting_interface.data_processor.multi_process_data", "modulename": "satkit.scripting_interface.data_processor", "qualname": "multi_process_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">scripting_interface</span><span class=\"o\">.</span><span class=\"n\">data_processor</span><span class=\"o\">.</span><span class=\"n\">Operation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satkit.scripting_interface.data_saver", "modulename": "satkit.scripting_interface.data_saver", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satkit.scripting_interface.data_saver.logger", "modulename": "satkit.scripting_interface.data_saver", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger satkit.scripting (DEBUG)&gt;"}, {"fullname": "satkit.scripting_interface.data_saver.save_data", "modulename": "satkit.scripting_interface.data_saver", "qualname": "save_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">recordings</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">satkit</span><span class=\"o\">.</span><span class=\"n\">data_structures</span><span class=\"o\">.</span><span class=\"n\">Recording</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();